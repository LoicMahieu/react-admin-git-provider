patch-package
--- a/node_modules/gitlab/dist/index.browser.js
+++ b/node_modules/gitlab/dist/index.browser.js
@@ -1 +1,2297 @@
-!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("got"),require("humps"),require("query-string"),require("form-data"),require("randomstring")):"function"==typeof define&&define.amd?define(["exports","got","humps","query-string","form-data","randomstring"],e):e((t=t||self)["node-gitlab"]={},t.Request,t.Humps,t.QueryString,t.FormData,t.RandomString)}(this,function(t,e,o,n,r,s){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e,r=r&&r.hasOwnProperty("default")?r.default:r,s=s&&s.hasOwnProperty("default")?s.default:s;var p=function(t,e){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)};function i(t,e){function o(){this.constructor=t}p(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}var u=function(){return(u=Object.assign||function(t){for(var e,o=1,n=arguments.length;o<n;o++)for(var r in e=arguments[o])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function c(t,e){var o={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(o[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(t);r<n.length;r++)e.indexOf(n[r])<0&&(o[n[r]]=t[n[r]])}return o}function a(t,e,o,n){return new(o||(o=Promise))(function(r,s){function p(t){try{u(n.next(t))}catch(t){s(t)}}function i(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){t.done?r(t.value):new o(function(e){e(t.value)}).then(p,i)}u((n=n.apply(t,e||[])).next())})}function h(t,e){var o,n,r,s,p={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(o)throw new TypeError("Generator is already executing.");for(;p;)try{if(o=1,n&&(r=2&s[0]?n.return:s[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,s[1])).done)return r;switch(n=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return p.label++,{value:s[1],done:!1};case 5:p.label++,n=s[1],s=[0];continue;case 7:s=p.ops.pop(),p.trys.pop();continue;default:if(!(r=(r=p.trys).length>0&&r[r.length-1])&&(6===s[0]||2===s[0])){p=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){p.label=s[1];break}if(6===s[0]&&p.label<r[1]){p.label=r[1],r=s;break}if(r&&p.label<r[2]){p.label=r[2],p.ops.push(s);break}r[2]&&p.ops.pop(),p.trys.pop();continue}s=e.call(t,p)}catch(t){s=[6,t],n=0}finally{o=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}function m(t,e){var o="function"==typeof Symbol&&t[Symbol.iterator];if(!o)return t;var n,r,s=o.call(t),p=[];try{for(;(void 0===e||e-- >0)&&!(n=s.next()).done;)p.push(n.value)}catch(t){r={error:t}}finally{try{n&&!n.done&&(o=s.return)&&o.call(s)}finally{if(r)throw r.error}}return p}function l(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(m(arguments[e]));return t}function d(t,e,r){var s=r.body,p=r.query,i=r.sudo;return[e,{baseUrl:t.url,headers:u({sudo:i},t.headers),query:p&&n.stringify(o.decamelizeKeys(p),{arrayFormat:"bracket"}),body:s&&o.decamelizeKeys(s),rejectUnauthorized:t.rejectUnauthorized,json:!0}]}function f(t,o,n){return void 0===n&&(n={}),a(this,void 0,void 0,function(){var r,s,p,i,a,m,y,I,v,R,U;return h(this,function(h){switch(h.label){case 0:return r=n.showPagination,s=n.maxPages,p=n.sudo,i=c(n,["showPagination","maxPages","sudo"]),a=d(t,o,{query:i,sudo:p}),[4,e.get.apply(e,l(a))];case 1:return m=h.sent(),y=m.headers,I=m.body,v={total:y["x-total"],next:y["x-next-page"]||null,current:y["x-page"]||null,previous:y["x-prev-page"]||null,perPage:y["x-per-page"],totalPages:y["x-total-pages"]},R=!s||v.current<s,!i.page&&R&&v.next?[4,f(t,o,u({page:v.next},n))]:[3,3];case 2:return U=h.sent(),[2,l(I,U)];case 3:return[2,(i.page||s)&&r?{data:I,pagination:v}:I]}})})}function y(t,o,n){return void 0===n&&(n={}),e.stream.apply(e,l(d(t,o,{query:n})))}function I(t,o,n){return void 0===n&&(n={}),a(this,void 0,void 0,function(){var r,s;return h(this,function(p){switch(p.label){case 0:return r=n.sudo,s=c(n,["sudo"]),[4,e.post.apply(e,l(d(t,o,{body:s,sudo:r})))];case 1:return[2,p.sent().body]}})})}function v(t,o,n){return void 0===n&&(n={}),a(this,void 0,void 0,function(){var r;return h(this,function(s){switch(s.label){case 0:return n.sudo,r=c(n,["sudo"]),[4,e.put.apply(e,l(d(t,o,{body:r})))];case 1:return[2,s.sent().body]}})})}function R(t,o,n){return void 0===n&&(n={}),a(this,void 0,void 0,function(){var r;return h(this,function(s){switch(s.label){case 0:return n.sudo,r=c(n,["sudo"]),[4,e.delete.apply(e,l(d(t,o,{query:r})))];case 1:return[2,s.sent().body]}})})}var U=function(){return function(t){var o=t.token,n=t.oauthToken,r=t.sudo,s=t.host,p=void 0===s?"https://gitlab.com":s,i=t.url,u=void 0===i?"":i,c=t.version,a=void 0===c?"v4":c,h=t.rejectUnauthorized,m=void 0===h||h,l=t.requester,d=void 0===l?e:l;this.url=[p,"api",a,u].join("/"),this.headers={},this.rejectUnauthorized=m,this.requester=d,n?this.headers.authorization="Bearer "+n:o&&(this.headers["private-token"]=o),r&&(this.headers.Sudo=r)}}();function j(t){return function(e){var o=this;Object.entries(t||{}).forEach(function(t){var n=m(t,2),r=n[0],s=n[1];o[r]=new s(e)})}}var C=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"groups",t)},e.prototype.create=function(t){return I(this,"groups",t)},e.prototype.createLDAPLink=function(t,e,o,n,r){return I(this,"groups/"+encodeURIComponent(t)+"/ldap_group_links",u({cn:e,groupAccess:o,provider:n},r))},e.prototype.edit=function(t,e){return v(this,"groups/"+encodeURIComponent(t),e)},e.prototype.remove=function(t,e){return R(this,"groups/"+encodeURIComponent(t),e)},e.prototype.removeLDAPLink=function(t,e,o){void 0===o&&(o={});var n=o.provider,r=c(o,["provider"]);return R(this,"groups/"+encodeURIComponent(t)+"/ldap_group_links/"+(n?n+"/"+e:""+e),r)},e.prototype.search=function(t,e){return f(this,"groups",u({search:t},e))},e.prototype.show=function(t,e){return f(this,"groups/"+encodeURIComponent(t),e)},e.prototype.subgroups=function(t,e){return f(this,"groups/"+encodeURIComponent(t)+"/subgroups",e)},e.prototype.syncLDAP=function(t,e){return I(this,"groups/"+encodeURIComponent(t)+"/ldap_sync",e)},e}(U),g=function(t){function e(e,o){return t.call(this,u({url:e},o))||this}return i(e,t),e.prototype.all=function(t){return f(this,encodeURIComponent(t)+"/access_requests")},e.prototype.request=function(t){return I(this,encodeURIComponent(t)+"/access_requests")},e.prototype.approve=function(t,e,o){var n=o.accessLevel,r=m([t,e].map(encodeURIComponent),2);return I(this,r[0]+"/access_requests/"+r[1]+"/approve",{accessLevel:n})},e.prototype.deny=function(t,e){var o=m([t,e].map(encodeURIComponent),2);return R(this,o[0]+"/access_requests/"+o[1])},e}(U);function b(t,e,o,n,r){var s=m([t,o].map(encodeURIComponent),2),p=[s[0],e,s[1]];return r&&p.push("notes",encodeURIComponent(r)),p.push(encodeURIComponent("award_emoji")),n&&p.push(encodeURIComponent(n)),p.join("/")}var _=function(t){function e(e,o){var n=t.call(this,u({url:"projects"},o))||this;return n.resourceType=e,n}return i(e,t),e.prototype.all=function(t,e,o,n){return f(this,b(t,this.resourceType,e,null,o),n)},e.prototype.award=function(t,e,o,n,r){return I(this,b(t,this.resourceType,e,null,n),u({name:o},r))},e.prototype.remove=function(t,e,o,n,r){return R(this,b(t,this.resourceType,e,o,n),r)},e.prototype.show=function(t,e,o,n,r){return f(this,b(t,this.resourceType,e,o,n),r)},e}(U),w=function(t){function e(e,o){return t.call(this,u({url:e},o))||this}return i(e,t),e.prototype.add=function(t,e){return I(this,encodeURIComponent(t)+"/badges",e)},e.prototype.all=function(t,e){return f(this,encodeURIComponent(t)+"/badges",e)},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,n[0]+"/badges/"+n[1],o)},e.prototype.preview=function(t,e,o,n){return f(this,encodeURIComponent(t)+"/badges/render",u({linkUrl:e,imageUrl:o},n))},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,n[0]+"/badges/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/badges/"+n[1],o)},e}(U),P=function(t){function e(e,o){return t.call(this,u({url:e},o))||this}return i(e,t),e.prototype.all=function(t,e){return f(this,encodeURIComponent(t)+"/custom_attributes",e)},e.prototype.set=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return v(this,r[0]+"/custom_attributes/"+r[1],u({value:o},n))},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,n[0]+"/custom_attributes/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/custom_attributes/"+n[1],o)},e}(U),q=function(t){function e(e,o,n){var r=t.call(this,u({url:e},n))||this;return r.resource2Type=o,r}return i(e,t),e.prototype.addNote=function(t,e,o,n,r,s){if(!r)throw new Error("Missing required content argument");var p=m([t,e,o,n].map(encodeURIComponent),4),i=p[0],c=p[1],a=p[2],h=p[3];return v(this,i+"/"+this.resource2Type+"/"+c+"/discussions/"+a+"/notes/"+h,u({body:r},s))},e.prototype.all=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2),r=n[0],s=n[1];return f(this,r+"/"+this.resource2Type+"/"+s+"/discussions",o)},e.prototype.create=function(t,e,o,n){if(!o)throw new Error("Missing required content argument");var r=m([t,e].map(encodeURIComponent),2),s=r[0],p=r[1];return I(this,s+"/"+this.resource2Type+"/"+p+"/discussions",u({body:o},n))},e.prototype.editNote=function(t,e,o,n,r){var s=m([t,e,o,n].map(encodeURIComponent),4),p=s[0],i=s[1],u=s[2],c=s[3];return v(this,p+"/"+this.resource2Type+"/"+i+"/discussions/"+u+"/notes/"+c,{body:r})},e.prototype.removeNote=function(t,e,o,n,r){var s=m([t,e,o,n].map(encodeURIComponent),4),p=s[0],i=s[1],u=s[2],c=s[3];return R(this,p+"/"+this.resource2Type+"/"+i+"/discussions/"+u+"/notes/"+c,r)},e.prototype.show=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3),s=r[0],p=r[1],i=r[2];return f(this,s+"/"+this.resource2Type+"/"+p+"/discussions/"+i,n)},e}(U),k=function(t){function e(e,o){return t.call(this,u({url:e},o))||this}return i(e,t),e.prototype.all=function(t,e){return f(this,encodeURIComponent(t)+"/boards",e)},e.prototype.create=function(t,e,o){return I(this,encodeURIComponent(t)+"/boards",u({name:e},o))},e.prototype.createList=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return I(this,r[0]+"/boards/"+r[1]+"/lists",u({labelId:o},n))},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,n[0]+"/boards/"+n[1],o)},e.prototype.editList=function(t,e,o,n,r){var s=m([t,e,o].map(encodeURIComponent),3);return v(this,s[0]+"/boards/"+s[1]+"/lists/"+s[2],u({position:n},r))},e.prototype.lists=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/boards/"+n[1]+"/lists",o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,n[0]+"/boards/"+n[1],o)},e.prototype.removeList=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return R(this,r[0]+"/boards/"+r[1]+"/lists/"+r[2],n)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/boards/"+n[1],o)},e.prototype.showList=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return f(this,r[0]+"/boards/"+r[1]+"/lists/"+r[2],n)},e}(U),S=function(t){function e(e,o){return t.call(this,u({url:e},o))||this}return i(e,t),e.prototype.all=function(t,e,o){void 0===e&&(e=!1);var n=[encodeURIComponent(t),"members"];return e&&n.push("all"),f(this,n.join("/"),{options:o})},e.prototype.add=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2),s=r[0],p=r[1];return I(this,s+"/members",u({userId:p,accessLevel:o},n))},e.prototype.edit=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return v(this,r[0]+"/members/"+r[1],u({accessLevel:o},n))},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/members/"+n[1],o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,n[0]+"/members/"+n[1],o)},e}(U),T=function(t){function e(e,o){return t.call(this,u({url:e},o))||this}return i(e,t),e.prototype.all=function(t,e){return f(this,encodeURIComponent(t)+"/milestones",e)},e.prototype.create=function(t,e,o){return I(this,encodeURIComponent(t)+"/milestones",u({title:e},o))},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,n[0]+"/milestones/"+n[1],o)},e.prototype.issues=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/milestones/"+n[1]+"/issues",o)},e.prototype.mergeRequests=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/milestones/"+n[1]+"/merge_requests",o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/milestones/"+n[1],o)},e}(U),G=function(t){function e(e,o,n){var r=t.call(this,u({url:e},n))||this;return r.resource2Type=o,r}return i(e,t),e.prototype.all=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2),r=n[0],s=n[1];return f(this,r+"/"+this.resource2Type+"/"+s+"/notes",o)},e.prototype.create=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2),s=r[0],p=r[1];return I(this,s+"/"+this.resource2Type+"/"+p+"/notes",u({body:o},n))},e.prototype.edit=function(t,e,o,n,r){var s=m([t,e,o].map(encodeURIComponent),3),p=s[0],i=s[1],c=s[2];return v(this,p+"/"+this.resource2Type+"/"+i+"/notes/"+c,u({body:n},r))},e.prototype.remove=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3),s=r[0],p=r[1],i=r[2];return R(this,s+"/"+this.resource2Type+"/"+p+"/notes/"+i,n)},e.prototype.show=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3),s=r[0],p=r[1],i=r[2];return f(this,s+"/"+this.resource2Type+"/"+p+"/notes/"+i,n)},e}(U),A=function(t){function e(e,o){return t.call(this,u({url:["templates",e].join("/")},o))||this}return i(e,t),e.prototype.all=function(t){return f(this,"",t)},e.prototype.show=function(t,e){return I(this,""+encodeURIComponent(t),e)},e}(U),E=function(t){function e(e,o){return t.call(this,u({url:e},o))||this}return i(e,t),e.prototype.all=function(t,e){return f(this,encodeURIComponent(t)+"/variables",e)},e.prototype.create=function(t,e){return I(this,encodeURIComponent(t)+"/variables",e)},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,n[0]+"/variables/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,n[0]+"/variables/"+n[1],o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,n[0]+"/variables/"+n[1],o)},e}(U),M=function(t){function e(e){return t.call(this,"groups",e)||this}return i(e,t),e}(g),x=function(t){function e(e){return t.call(this,"groups",e)||this}return i(e,t),e}(w),D=function(t){function e(e){return t.call(this,"groups",e)||this}return i(e,t),e}(P),B=function(t){function e(e){return t.call(this,"groups",e)||this}return i(e,t),e}(k),L=function(t){function e(e){return t.call(this,"groups",e)||this}return i(e,t),e}(S),N=function(t){function e(e){return t.call(this,"groups",e)||this}return i(e,t),e}(T),O=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"groups/"+encodeURIComponent(t)+"/projects",e)},e.prototype.add=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"groups/"+n[0]+"/projects/"+n[1],o)},e}(U),K=function(t){function e(e){return t.call(this,"groups",e)||this}return i(e,t),e}(E),F=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"groups/"+encodeURIComponent(t)+"/epics",e)},e.prototype.create=function(t,e,o){return I(this,"groups/"+encodeURIComponent(t)+"/epics",u({title:e},o))},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"groups/"+n[0]+"/epics/"+n[1],o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"groups/"+n[0]+"/epics/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"groups/"+n[0]+"/epics/"+n[1],o)},e}(U),V=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"groups/"+n[0]+"/epics/"+n[1]+"/issues",o)},e.prototype.assign=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return v(this,"groups/"+r[0]+"/epics/"+r[1]+"/issues/"+r[2],n)},e.prototype.edit=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return R(this,"groups/"+r[0]+"/epics/"+r[1]+"/issues/"+r[2],n)},e.prototype.remove=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return R(this,"groups/"+r[0]+"/epics/"+r[1]+"/issues/"+r[2],n)},e}(U),z=function(t){function e(e){return t.call(this,"groups","epics",e)||this}return i(e,t),e}(G),H=function(t){function e(e){return t.call(this,"groups","epics",e)||this}return i(e,t),e}(q),J=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"users",t)},e.prototype.activities=function(t){return f(this,"users/activities",t)},e.prototype.projects=function(t,e){return f(this,"users/"+encodeURIComponent(t)+"/projects",e)},e.prototype.block=function(t,e){return I(this,"users/"+encodeURIComponent(t)+"/block",e)},e.prototype.create=function(t){return I(this,"users",t)},e.prototype.current=function(t){return f(this,"user",t)},e.prototype.edit=function(t,e){return v(this,"users/"+encodeURIComponent(t),e)},e.prototype.events=function(t,e){return f(this,"users/"+encodeURIComponent(t)+"/events",e)},e.prototype.session=function(t,e,o){return I(this,"session",u({email:t,password:e},o))},e.prototype.search=function(t,e){return f(this,"users",u({search:t},e))},e.prototype.show=function(t,e){return f(this,"users/"+encodeURIComponent(t),e)},e.prototype.remove=function(t,e){return R(this,"users/"+encodeURIComponent(t),e)},e.prototype.unblock=function(t,e){return I(this,"users/"+encodeURIComponent(t)+"/unblock",e)},e}(U),W=function(t){function e(e){return t.call(this,"users",e)||this}return i(e,t),e}(P),Y=function(t){return t?"users/"+encodeURIComponent(t)+"/emails":"user/emails"},Q=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){void 0===t&&(t={});var e=t.userId,o=c(t,["userId"]);return f(this,Y(e),o)},e.prototype.add=function(t,e){void 0===e&&(e={});var o=e.userId,n=c(e,["userId"]);return I(this,Y(o),u({email:t},n))},e.prototype.show=function(t,e){return f(this,"user/emails/"+encodeURIComponent(t),e)},e.prototype.remove=function(t,e){void 0===e&&(e={});var o=e.userId,n=c(e,["userId"]),r=encodeURIComponent(t);return R(this,Y(o)+"/"+r,n)},e}(U),X=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"users/"+encodeURIComponent(t)+"/impersonation_tokens",e)},e.prototype.add=function(t,e,o,n,r){return I(this,"users/"+encodeURIComponent(t)+"/impersonation_tokens",u({name:e,expiresAt:n,scopes:o},r))},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"users/"+n[0]+"/impersonation_tokens/"+n[1],o)},e.prototype.revoke=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"users/"+n[0]+"/impersonation_tokens/"+n[1],o)},e}(U),Z=function(t){return t?"users/"+encodeURIComponent(t)+"/keys":"user/keys"},$=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){void 0===t&&(t={});var e=t.userId,o=c(t,["userId"]);return f(this,Z(e),o)},e.prototype.create=function(t,e,o){void 0===o&&(o={});var n=o.userId,r=c(o,["userId"]);return I(this,Z(n),u({title:t,key:e},r))},e.prototype.show=function(t,e){return f(this,"user/keys/"+encodeURIComponent(t),e)},e.prototype.remove=function(t,e){void 0===e&&(e={});var o=e.userId,n=c(e,["userId"]),r=encodeURIComponent(t);return R(this,Z(o)+"/"+r,n)},e}(U),tt=function(t){return t?"users/"+encodeURIComponent(t)+"/gpg_keys":"users/gpg_keys"},et=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){void 0===t&&(t={});var e=t.userId,o=c(t,["userId"]);return f(this,tt(e),o)},e.prototype.add=function(t,e,o){void 0===o&&(o={});var n=o.userId,r=c(o,["userId"]);return I(this,tt(n),u({title:t,key:e},r))},e.prototype.show=function(t,e){void 0===e&&(e={});var o=e.userId,n=c(e,["userId"]),r=encodeURIComponent(t);return f(this,tt(o)+"/"+r,n)},e.prototype.remove=function(t,e){void 0===e&&(e={});var o=e.userId,n=c(e,["userId"]),r=encodeURIComponent(t);return R(this,tt(o)+"/"+r,n)},e}(U),ot=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/repository/branches",e)},e.prototype.create=function(t,e,o,n){return I(this,"projects/"+encodeURIComponent(t)+"/repository/branches",u({branch:e,ref:o},n))},e.prototype.protect=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/protected_branches",u({name:e},o))},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/repository/branches/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/repository/branches/"+n[1],o)},e.prototype.unprotect=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/repository/branches/"+n[1]+"/unprotect",o)},e}(U),nt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/repository/commits",e)},e.prototype.cherryPick=function(t,e,o,n){return I(this,"projects/"+encodeURIComponent(t)+"/repository/commits/"+e+"/cherry_pick",u({branch:o},n))},e.prototype.comments=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/repository/commits/"+e+"/comments",o)},e.prototype.create=function(t,e,o,n,r){return void 0===n&&(n=[]),I(this,"projects/"+encodeURIComponent(t)+"/repository/commits",u({branch:e,commitMessage:o,actions:n},r))},e.prototype.createComment=function(t,e,o,n){return I(this,"projects/"+encodeURIComponent(t)+"/repository/commits/"+e+"/comments",u({note:o},n))},e.prototype.diff=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/repository/commits/"+e+"/diff",o)},e.prototype.editStatus=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/statuses/"+e,o)},e.prototype.references=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/repository/commits/"+e+"/refs",o)},e.prototype.show=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/repository/commits/"+e,o)},e.prototype.status=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/repository/commits/"+e+"/statuses",o)},e}(U),rt=function(t){function e(e){return t.call(this,"projects","commits",e)||this}return i(e,t),e}(q),st=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/deployments",e)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/deployments/"+n[1],o)},e}(U),pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.add=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/deploy_keys",e)},e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/deploy_keys",e)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/deploy_keys/"+n[1],o)},e.prototype.enable=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/deploy_keys/"+n[1]+"/enable",o)},e}(U),it=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/environments",e)},e.prototype.create=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/environments",e)},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/environments/"+n[1],o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/environments/"+n[1],o)},e.prototype.stop=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/environments/"+n[1]+"/stop",o)},e}(U),ut=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.addSpentTime=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+r[0]+"/issues/"+r[1]+"/add_spent_time",u({duration:o},n))},e.prototype.addTimeEstimate=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+r[0]+"/issues/"+r[1]+"/time_estimate",u({duration:o},n))},e.prototype.all=function(t){var e=t.projectId,o=c(t,["projectId"]);return f(this,e?"projects/"+encodeURIComponent(e)+"/issues":"issues",o)},e.prototype.create=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/issues",e)},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/issues/"+n[1],o)},e.prototype.link=function(t,e,o,n,r){var s=m([t,e].map(encodeURIComponent),2),p=s[0],i=s[1],c=m([o,n].map(encodeURIComponent),2),a=c[0],h=c[1];return I(this,"projects/"+p+"/issues/"+i+"/links",u({targetProjectId:a,targetIssueId:h},r))},e.prototype.participants=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/issues/"+n[1]+"/participants",o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/issues/"+n[1],o)},e.prototype.resetSpentTime=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/issues/"+n[1]+"/reset_spent_time",o)},e.prototype.resetTimeEstimate=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/issues/"+n[1]+"/reset_time_estimate",o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/issues/"+n[1],o)},e.prototype.subscribe=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/issues/"+n[1]+"/subscribe",o)},e.prototype.timeStats=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/issues/"+n[1]+"/time_stats",o)},e.prototype.unsubscribe=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/issues/"+n[1]+"/unsubscribe",o)},e}(U),ct=function(t){function e(e){return t.call(this,"projects","issues",e)||this}return i(e,t),e}(G),at=function(t){function e(e){return t.call(this,"projects","issues",e)||this}return i(e,t),e}(q),ht=function(t){function e(e){return t.call(this,"issues",e)||this}return i(e,t),e}(_),mt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/jobs",e)},e.prototype.cancel=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/jobs/"+n[1]+"/cancel",o)},e.prototype.downloadSingleArtifactFile=function(t,e,o,n){var r=n.stream,s=void 0!==r&&r,p=c(n,["stream"]),i=m([t,e].map(encodeURIComponent),2),u=i[0],a=i[1];return s?y(this,"projects/"+u+"/jobs/"+a+"/artifacts/"+o,p):f(this,"projects/"+u+"/jobs/"+a+"/artifacts/"+o,p)},e.prototype.downloadLatestArtifactFile=function(t,e,o,n){var r=n.stream,s=void 0!==r&&r,p=c(n,["stream"]),i=m([t,e,o].map(encodeURIComponent),3),u=i[0],a=i[1],h=i[2];return s?y(this,"projects/"+u+"/jobs/artifacts/"+a+"/download?job="+h,p):f(this,"projects/"+u+"/jobs/artifacts/"+a+"/download?job="+h,p)},e.prototype.downloadTraceFile=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/jobs/"+n[1]+"/trace",o)},e.prototype.erase=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/jobs/"+n[1]+"/erase",o)},e.prototype.keepArtifacts=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/jobs/"+n[1]+"/artifacts/keep",o)},e.prototype.play=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/jobs/"+n[1]+"/play",o)},e.prototype.retry=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/jobs/"+n[1]+"/retry",o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/jobs/"+n[1],o)},e.prototype.showPipelineJobs=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/pipelines/"+n[1]+"/jobs",o)},e}(U),lt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/labels",e)},e.prototype.create=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/labels",e)},e.prototype.edit=function(t,e,o){return v(this,"projects/"+encodeURIComponent(t)+"/labels",u({name:e},o))},e.prototype.remove=function(t,e,o){return R(this,"projects/"+encodeURIComponent(t)+"/labels",u({name:e},o))},e.prototype.subscribe=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/issues/"+n[1]+"/subscribe",o)},e.prototype.unsubscribe=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/issues/"+n[1]+"/unsubscribe",o)},e}(U),dt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.accept=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/merge",o)},e.prototype.addSpentTime=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+r[0]+"/issues/"+r[1]+"/add_spent_time",u({duration:o},n))},e.prototype.addTimeEstimate=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+r[0]+"/issues/"+r[1]+"/time_estimate",u({duration:o},n))},e.prototype.all=function(t){var e=t.projectId,o=t.groupId,n=c(t,["projectId","groupId"]);return f(this,e?"projects/"+encodeURIComponent(e)+"/merge_requests":o?"groups/"+encodeURIComponent(o)+"/merge_requests":"merge_requests",n)},e.prototype.approve=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/approve",o)},e.prototype.approvals=function(t,e){var o=e.mergerequestIId,n=c(e,["mergerequestIId"]),r=m([t,o].map(encodeURIComponent),2),s=r[0],p=r[1];return f(this,o?"projects/"+s+"/merge_requests/"+p+"/approvals":"projects/"+s+"/approvals",n)},e.prototype.approvers=function(t,e,o,n){var r=n.mergerequestIId,s=c(n,["mergerequestIId"]),p=m([t,r].map(encodeURIComponent),2),i=p[0],a=p[1];return I(this,r?"projects/"+i+"/merge_requests/"+a+"/approvals":"projects/"+i+"/approvals",u({approverIds:e,approverGroupIds:o},s))},e.prototype.cancelOnPipelineSucess=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/cancel_merge_when_pipeline_succeeds",o)},e.prototype.changes=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/changes",o)},e.prototype.closesIssues=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/closes_issues",o)},e.prototype.commits=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/commits",o)},e.prototype.create=function(t,e,o,n,r){var s=encodeURIComponent(t);return I(this,"projects/"+s+"/merge_requests",u({id:s,sourceBranch:e,targetBranch:o,title:n},r))},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/merge_requests/"+n[1],o)},e.prototype.editApprovals=function(t,e){var o=e.mergerequestIId,n=c(e,["mergerequestIId"]),r=m([t,o].map(encodeURIComponent),2),s=r[0],p=r[1];return I(this,o?"projects/"+s+"/merge_requests/"+p+"/approvals":"projects/"+s+"/approvals",n)},e.prototype.pipelines=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/pipelines",o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/merge_requests/"+n[1],o)},e.prototype.resetSpentTime=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/reset_spent_time",o)},e.prototype.resetTimeEstimate=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/reset_time_estimate",o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/merge_requests/"+n[1],o)},e.prototype.timeStats=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/time_stats",o)},e.prototype.version=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return f(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/versions/"+r[2],n)},e.prototype.versions=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/versions",o)},e.prototype.unapprove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/approve",o)},e.prototype.unsubscribe=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/unsubscribe",o)},e}(U),ft=function(t){function e(e){return t.call(this,"merge_requests",e)||this}return i(e,t),e}(_),yt=function(t){function e(e){return t.call(this,"projects","merge_requests",e)||this}return i(e,t),e}(q),It=function(t){function e(e){return t.call(this,"projects","merge_requests",e)||this}return i(e,t),e}(G),vt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/pipelines",e)},e.prototype.create=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/pipeline",u({ref:e},o))},e.prototype.show=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/pipelines/"+e,o)},e.prototype.retry=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/pipelines/"+e+"/retry",o)},e.prototype.cancel=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/pipelines/"+e+"/cancel",o)},e.prototype.showJobs=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/pipelines/"+e+"/jobs",o)},e}(U),Rt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/pipeline_schedules",e)},e.prototype.create=function(t,e,o,n,r){return I(this,"projects/"+encodeURIComponent(t)+"/pipeline_schedules",u({description:e,ref:o,cron:n},r))},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1],o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1],o)},e.prototype.takeOwnership=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/take_ownership",o)},e}(U),Ut=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/variables",o)},e.prototype.create=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/variables",o)},e.prototype.edit=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return v(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/variables/"+r[2],n)},e.prototype.show=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return f(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/variables/"+r[2],n)},e.prototype.remove=function(t,e,o,n){var r=m([t,e,o].map(encodeURIComponent),3);return R(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/variables/"+r[2],n)},e}(U),jt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"projects",t)},e.prototype.archive=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/archive",e)},e.prototype.create=function(t){var e=t.userId,o=c(t,["userId"]);return I(this,e?"projects/user/"+encodeURIComponent(e):"projects",o)},e.prototype.edit=function(t,e){return v(this,"projects/"+encodeURIComponent(t),e)},e.prototype.events=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/events",e)},e.prototype.fork=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/fork",e)},e.prototype.forks=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/forks",e)},e.prototype.languages=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/languages",e)},e.prototype.mirrorPull=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/mirror/pull",e)},e.prototype.remove=function(t,e){return R(this,"projects/"+encodeURIComponent(t),e)},e.prototype.search=function(t){return f(this,"projects",{search:t})},e.prototype.share=function(t,e,o,n){return I(this,"projects/"+encodeURIComponent(t)+"/share",u({groupId:e,groupAccess:o},n))},e.prototype.show=function(t,e){return f(this,"projects/"+encodeURIComponent(t),e)},e.prototype.star=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/star",e)},e.prototype.statuses=function(t,e,o,n){return I(this,"projects/"+encodeURIComponent(t)+"/statuses/"+e,u({state:o},n))},e.prototype.transfer=function(t,e){return v(this,"projects/"+encodeURIComponent(t)+"/transfer",{namespace:e})},e.prototype.unarchive=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/unarchive",e)},e.prototype.unshare=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/share"+n[1],o)},e.prototype.unstar=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/unstar",e)},e.prototype.updatePushRule=function(t,e){return v(this,"projects/"+encodeURIComponent(t)+"/push_rule",e)},e.prototype.upload=function(t,e,o){var n=o.fileName,p=void 0===n?s(8):n,i=encodeURIComponent(t),u=new r;return u.append(p,{file:{value:e,options:{filename:p,contentType:"application/octet-stream"}}}),I(this,"projects/"+i+"/uploads",u)},e}(U),Ct=function(t){function e(e){return t.call(this,"projects",e)||this}return i(e,t),e}(g),gt=function(t){function e(e){return t.call(this,"projects",e)||this}return i(e,t),e}(w),bt=function(t){function e(e){return t.call(this,"projects",e)||this}return i(e,t),e}(P),_t=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.download=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/export/download",e)},e.prototype.exportStatus=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/export",e)},e.prototype.import=function(t,e,o){var n=new r;return n.append(e,{file:{value:t,options:{filename:e,contentType:"application/octet-stream"}}}),I(this,"projects/import",u({},n,o))},e.prototype.importStatus=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/import",e)},e.prototype.schedule=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/export",e)},e}(U),wt=function(t){function e(e){return t.call(this,"projects",e)||this}return i(e,t),e}(k),Pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/hooks",e)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/hooks/"+n[1],o)},e.prototype.add=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/hooks",u({url:e},o))},e.prototype.edit=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+r[0]+"/hooks/"+r[1],u({url:o},n))},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/hooks/"+n[1],o)},e}(U),qt=function(t){function e(e){return t.call(this,"projects",e)||this}return i(e,t),e}(S),kt=function(t){function e(e){return t.call(this,"projects",e)||this}return i(e,t),e}(T),St=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/snippets",e)},e.prototype.content=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/snippets/"+n[1]+"/raw",o)},e.prototype.create=function(t,e,o,n,r,s){return I(this,"projects/"+encodeURIComponent(t)+"/snippets",u({title:e,fileName:o,code:n,visibility:r},s))},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/snippets/"+n[1],o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/snippets/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/snippets/"+n[1],o)},e.prototype.userAgentDetails=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/snippets/"+n[1]+"/user_agent_detail",o)},e}(U),Tt=function(t){function e(e){return t.call(this,"projects","snippets",e)||this}return i(e,t),e}(G),Gt=function(t){function e(e){return t.call(this,"projects","snippets",e)||this}return i(e,t),e}(q),At=function(t){function e(e){return t.call(this,"issues",e)||this}return i(e,t),e}(_),Et=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/protected_branches",e)},e.prototype.protect=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/protected_branches",u({name:e},o))},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/protected_branches/"+n[1],o)},e.prototype.unprotect=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/protected_branches/"+n[1],o)},e}(U),Mt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/protected_tags",e)},e.prototype.protect=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/protected_tags",u({name:e},o))},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/protected_tags/"+n[1],o)},e.prototype.unprotect=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/protected_tags/"+n[1],o)},e}(U),xt=function(t){function e(e){return t.call(this,"projects",e)||this}return i(e,t),e}(E),Dt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.compare=function(t,e,o,n){return f(this,"projects/"+encodeURIComponent(t)+"/repository/compare",u({from:e,to:o},n))},e.prototype.contributors=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/repository/contributors",e)},e.prototype.showArchive=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/repository/archive",e)},e.prototype.showBlob=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/repository/blobs/"+e,o)},e.prototype.showBlobRaw=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/repository/blobs/"+e+"/raw",o)},e.prototype.tree=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/repository/tree",e)},e}(U),Bt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.create=function(t,e,o,n,r){var s=m([t,e].map(encodeURIComponent),2);return I(this,"projects/"+s[0]+"/repository/files/"+s[1],u({branch:o,content:n},r))},e.prototype.edit=function(t,e,o,n,r){var s=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+s[0]+"/repository/files/"+s[1],u({branch:o,content:n},r))},e.prototype.remove=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+r[0]+"/repository/files/"+r[1],u({branch:o},n))},e.prototype.show=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+r[0]+"/repository/files/"+r[1],u({ref:o},n))},e.prototype.showRaw=function(t,e,o,n){var r=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+r[0]+"/repository/files/"+r[1]+"/raw",u({ref:o},n))},e}(U),Lt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){var e=t.projectId,o=c(t,["projectId"]);return f(this,e?"projects/"+encodeURIComponent(e)+"/runners":"runners/all",o)},e.prototype.allOwned=function(t){return f(this,"runners",t)},e.prototype.edit=function(t,e){return v(this,"runners/"+encodeURIComponent(t),e)},e.prototype.enable=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2),r=n[0],s=n[1];return I(this,"projects/"+r+"/runners",u({runnerId:s},o))},e.prototype.disable=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/runners/"+n[1],o)},e.prototype.jobs=function(t,e){return f(this,"runners/"+encodeURIComponent(t)+"/jobs",e)},e.prototype.remove=function(t,e){return R(this,"runners/"+encodeURIComponent(t),e)},e.prototype.show=function(t,e){return f(this,"runners/"+encodeURIComponent(t),e)},e}(U),Nt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.edit=function(t,e,o){return v(this,"projects/"+encodeURIComponent(t)+"/services/"+e,o)},e.prototype.remove=function(t,e,o){return R(this,"projects/"+encodeURIComponent(t)+"/services/"+e,o)},e.prototype.show=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/services/"+e,o)},e}(U),Ot=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/repository/tags",e)},e.prototype.create=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/repository/tags",e)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/repository/tags/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/repository/tags/"+n[1],o)},e}(U),Kt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"todos",t)},e.prototype.create=function(t,e,o){return I(this,"projects/"+t+"/merge_requests/"+e+"/todo",o)},e.prototype.done=function(t){var e=t.todoId,o="mark_as_done";return e&&(o=e+"/"+o),R(this,"todos/"+o,c(t,["todoId"]))},e}(U),Ft=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.add=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/triggers",e)},e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/triggers",e)},e.prototype.edit=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return v(this,"projects/"+n[0]+"/triggers/"+n[1],o)},e.prototype.remove=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return R(this,"projects/"+n[0]+"/triggers/"+n[1],o)},e.prototype.show=function(t,e,o){var n=m([t,e].map(encodeURIComponent),2);return f(this,"projects/"+n[0]+"/triggers/"+n[1],o)},e}(U),Vt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.create=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/push_rule",e)},e.prototype.edit=function(t,e){e.upsert;var o=c(e,["upsert"]),n=encodeURIComponent(t);try{return v(this,"projects/"+n+"/push_rule",o)}catch(e){if(e.message.includes("exist"))return this.create(t,o);throw e}},e.prototype.remove=function(t,e){return R(this,"projects/"+encodeURIComponent(t)+"/push_rule",e)},e.prototype.show=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/push_rule",e)},e}(U),zt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"application/settings",t)},e.prototype.edit=function(t){return v(this,"application/settings",t)},e}(U),Ht=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"broadcast_messages",t)},e.prototype.create=function(t){return I(this,"broadcast_messages",t)},e.prototype.edit=function(t,e){return v(this,"broadcast_messages/"+encodeURIComponent(t),e)},e.prototype.remove=function(t){return R(this,"broadcast_messages/"+encodeURIComponent(t))},e.prototype.show=function(t,e){return f(this,"broadcast_messages/"+encodeURIComponent(t),e)},e}(U),Jt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"events",t)},e}(U),Wt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"features",t)},e.prototype.set=function(t,e){return I(this,"features/"+encodeURIComponent(t),e)},e}(U),Yt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"geo_nodes",t)},e.prototype.create=function(t,e){return I(this,"geo_nodes/"+encodeURIComponent(t),e)},e.prototype.edit=function(t,e){return v(this,"geo_nodes/"+encodeURIComponent(t),e)},e.prototype.failures=function(t){return I(this,"geo_nodes/current/failures",t)},e.prototype.repair=function(t,e){return R(this,"geo_nodes/"+encodeURIComponent(t),e)},e.prototype.show=function(t,e){return f(this,"geo_nodes/"+encodeURIComponent(t),e)},e.prototype.status=function(t,e){return f(this,"geo_nodes/"+encodeURIComponent(t)+"/status",e)},e.prototype.statuses=function(t){return f(this,"geo_nodes/statuses",t)},e}(U),Qt=function(t){function e(e){return t.call(this,"gitignores",e)||this}return i(e,t),e}(A),Xt=function(t){function e(e){return t.call(this,"gitlab_ci_ymls",e)||this}return i(e,t),e}(A),Zt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.show=function(t,e){return f(this,"keys/"+encodeURIComponent(t),e)},e}(U),$t=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"licence",t)},e.prototype.create=function(t){return I(this,"licence",t)},e}(U),te=function(t){function e(e){return t.call(this,"licences",e)||this}return i(e,t),e}(A),ee=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.lint=function(t,e){return I(this,"lint",u({content:t},e))},e}(U),oe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,"namespaces",t)},e.prototype.show=function(t,e){return f(this,"namespaces/"+encodeURIComponent(t),e)},e}(U),ne=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){void 0===t&&(t={});var e=t.projectId,o=t.groupId,n=c(t,["projectId","groupId"]),r="";return e?r+="projects/"+encodeURIComponent(e)+"/":o&&(r+="groups/"+encodeURIComponent(o)+"/"),f(this,r+"notification_settings",n)},e.prototype.edit=function(t){void 0===t&&(t={});var e=t.projectId,o=t.groupId,n=c(t,["projectId","groupId"]),r="";return e?r+="projects/"+encodeURIComponent(e)+"/":o&&(r+="groups/"+encodeURIComponent(o)+"/"),v(this,r+"notification_settings",n)},e}(U),re=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.render=function(t,e){return I(this,"markdown",u({text:t},e))},e}(U),se=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){void 0===t&&(t={});var e=t.projectId,o=c(t,["projectId"]);return f(this,(e?"projects/"+encodeURIComponent(e)+"/":"")+"pages/domains",o)},e.prototype.create=function(t,e,o){return I(this,"projects/"+encodeURIComponent(t)+"/pages/domains",u({domain:e},o))},e.prototype.edit=function(t,e,o){return v(this,"projects/"+encodeURIComponent(t)+"/pages/domains/"+e,o)},e.prototype.show=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/pages/domains/"+e,o)},e.prototype.remove=function(t,e,o){return R(this,"projects/"+encodeURIComponent(t)+"/pages/domains/"+e,o)},e}(U),pe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e,o){var n=o.projectId,r=o.groupId,s=c(o,["projectId","groupId"]),p="";return n?p+="projects/"+encodeURIComponent(n)+"/":r&&(p+="groups/"+encodeURIComponent(r)+"/"),f(this,p+"search",u({scope:t,search:e},s))},e}(U),ie=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.queueMetrics=function(){return f(this,"sidekiq/queue_metrics")},e.prototype.processMetrics=function(){return f(this,"sidekiq/process_metrics")},e.prototype.jobStats=function(){return f(this,"sidekiq/job_stats")},e.prototype.compoundMetrics=function(){return f(this,"sidekiq/compound_metrics")},e}(U),ue=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t){return f(this,t.public?"snippets/public":"snippets",c(t,["public"]))},e.prototype.content=function(t,e){return f(this,"snippets/"+encodeURIComponent(t)+"/raw",e)},e.prototype.create=function(t,e,o,n,r){return I(this,"snippets",u({title:t,fileName:e,content:o,visibility:n},r))},e.prototype.edit=function(t,e){return v(this,"snippets/"+encodeURIComponent(t),e)},e.prototype.remove=function(t,e){return R(this,"snippets/"+encodeURIComponent(t),e)},e.prototype.show=function(t,e){return f(this,"snippets/"+encodeURIComponent(t),e)},e.prototype.userAgentDetails=function(t,e){return f(this,"snippets/"+encodeURIComponent(t)+"/user_agent_detail",e)},e}(U),ce=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.add=function(t,e){return I(this,"hooks",u({url:t},e))},e.prototype.all=function(t){return f(this,"hooks",t)},e.prototype.edit=function(t,e,o){return v(this,"hooks/"+encodeURIComponent(t),u({url:e},o))},e.prototype.remove=function(t,e){return R(this,"hooks/"+encodeURIComponent(t),e)},e}(U),ae=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.show=function(t){return f(this,"version",t)},e}(U),he=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.all=function(t,e){return f(this,"projects/"+encodeURIComponent(t)+"/wikis",e)},e.prototype.create=function(t,e){return I(this,"projects/"+encodeURIComponent(t)+"/wikis",e)},e.prototype.edit=function(t,e,o){return v(this,"projects/"+encodeURIComponent(t)+"/wikis/"+e,o)},e.prototype.show=function(t,e,o){return f(this,"projects/"+encodeURIComponent(t)+"/wikis/"+e,o)},e.prototype.remove=function(t,e,o){return R(this,"projects/"+encodeURIComponent(t)+"/wikis/"+e,o)},e}(U),me=Object.freeze({Groups:C,GroupAccessRequests:M,GroupBadges:x,GroupCustomAttributes:D,GroupIssueBoards:B,GroupMembers:L,GroupMilestones:N,GroupProjects:O,GroupVariables:K,Epics:F,EpicIssues:V,EpicNotes:z,EpicDiscussions:H,Users:J,UserCustomAttributes:W,UserEmails:Q,UserImpersonationTokens:X,UserKeys:$,UserGPGKeys:et,Branches:ot,Commits:nt,CommitDiscussions:rt,Deployments:st,DeployKeys:pt,Environments:it,Issues:ut,IssueNotes:ct,IssueDiscussions:at,IssueAwardEmojis:ht,Jobs:mt,Labels:lt,MergeRequests:dt,MergeRequestAwardEmojis:ft,MergeRequestDiscussions:yt,MergeRequestNotes:It,Pipelines:vt,PipelineSchedules:Rt,PipelineScheduleVariables:Ut,Projects:jt,ProjectAccessRequests:Ct,ProjectBadges:gt,ProjectCustomAttributes:bt,ProjectImportExport:_t,ProjectIssueBoards:wt,ProjectHooks:Pt,ProjectMembers:qt,ProjectMilestones:kt,ProjectSnippets:St,ProjectSnippetNotes:Tt,ProjectSnippetDiscussions:Gt,ProjectSnippetAwardEmojis:At,ProtectedBranches:Et,ProtectedTags:Mt,ProjectVariables:xt,Repositories:Dt,RepositoryFiles:Bt,Runners:Lt,Services:Nt,Tags:Ot,Todos:Kt,Triggers:Ft,PushRule:Vt,ApplicationSettings:zt,BroadcastMessages:Ht,Events:Jt,FeatureFlags:Wt,GeoNodes:Yt,GitignoreTemplates:Qt,GitLabCIYMLTemplates:Xt,Keys:Zt,Licence:$t,LicenceTemplates:te,Lint:ee,Namespaces:oe,NotificationSettings:ne,Markdown:re,PagesDomains:se,Search:pe,SidekiqMetrics:ie,Snippets:ue,SystemHooks:ce,Version:ae,Wikis:he}),le=j({Groups:C,GroupAccessRequests:M,GroupBadges:x,GroupCustomAttributes:D,GroupIssueBoards:B,GroupMembers:L,GroupMilestones:N,GroupProjects:O,GroupVariables:K,Epics:F,EpicIssues:V,EpicNotes:z,EpicDiscussions:H}),de=j({Users:J,UserCustomAttributes:W,UserEmails:Q,UserImpersonationTokens:X,UserKeys:$,UserGPGKeys:et}),fe=j({Branches:ot,Commits:nt,CommitDiscussions:rt,DeployKeys:pt,Deployments:st,Environments:it,Issues:ut,IssueAwardEmojis:ht,IssueNotes:ct,IssueDiscussions:at,Jobs:mt,Labels:lt,MergeRequests:dt,MergeRequestAwardEmojis:ft,MergeRequestDiscussions:yt,MergeRequestNotes:It,Pipelines:vt,PipelineSchedules:Rt,PipelineScheduleVariables:Ut,Projects:jt,ProjectAccessRequests:Ct,ProjectBadges:gt,ProjectCustomAttributes:bt,ProjectImportExport:_t,ProjectIssueBoards:wt,ProjectHooks:Pt,ProjectMembers:qt,ProjectMilestones:kt,ProjectSnippets:St,ProjectSnippetNotes:Tt,ProjectSnippetDiscussions:Gt,ProjectSnippetAwardEmojis:At,ProtectedBranches:Et,ProtectedTags:Mt,ProjectVariables:xt,Repositories:Dt,RepositoryFiles:Bt,Runners:Lt,Services:Nt,Tags:Ot,Triggers:Ft}),ye=j(me);t.GroupsBundle=le,t.UsersBundle=de,t.ProjectsBundle=fe,t.Gitlab=ye,t.Groups=C,t.GroupAccessRequests=M,t.GroupBadges=x,t.GroupCustomAttributes=D,t.GroupIssueBoards=B,t.GroupMembers=L,t.GroupMilestones=N,t.GroupProjects=O,t.GroupVariables=K,t.Epics=F,t.EpicIssues=V,t.EpicNotes=z,t.EpicDiscussions=H,t.Users=J,t.UserCustomAttributes=W,t.UserEmails=Q,t.UserImpersonationTokens=X,t.UserKeys=$,t.UserGPGKeys=et,t.Branches=ot,t.Commits=nt,t.CommitDiscussions=rt,t.Deployments=st,t.DeployKeys=pt,t.Environments=it,t.Issues=ut,t.IssueNotes=ct,t.IssueDiscussions=at,t.IssueAwardEmojis=ht,t.Jobs=mt,t.Labels=lt,t.MergeRequests=dt,t.MergeRequestAwardEmojis=ft,t.MergeRequestDiscussions=yt,t.MergeRequestNotes=It,t.Pipelines=vt,t.PipelineSchedules=Rt,t.PipelineScheduleVariables=Ut,t.Projects=jt,t.ProjectAccessRequests=Ct,t.ProjectBadges=gt,t.ProjectCustomAttributes=bt,t.ProjectImportExport=_t,t.ProjectIssueBoards=wt,t.ProjectHooks=Pt,t.ProjectMembers=qt,t.ProjectMilestones=kt,t.ProjectSnippets=St,t.ProjectSnippetNotes=Tt,t.ProjectSnippetDiscussions=Gt,t.ProjectSnippetAwardEmojis=At,t.ProtectedBranches=Et,t.ProtectedTags=Mt,t.ProjectVariables=xt,t.Repositories=Dt,t.RepositoryFiles=Bt,t.Runners=Lt,t.Services=Nt,t.Tags=Ot,t.Todos=Kt,t.Triggers=Ft,t.PushRule=Vt,t.ApplicationSettings=zt,t.BroadcastMessages=Ht,t.Events=Jt,t.FeatureFlags=Wt,t.GeoNodes=Yt,t.GitignoreTemplates=Qt,t.GitLabCIYMLTemplates=Xt,t.Keys=Zt,t.Licence=$t,t.LicenceTemplates=te,t.Lint=ee,t.Namespaces=oe,t.NotificationSettings=ne,t.Markdown=re,t.PagesDomains=se,t.Search=pe,t.SidekiqMetrics=ie,t.Snippets=ue,t.SystemHooks=ce,t.Version=ae,t.Wikis=he,Object.defineProperty(t,"__esModule",{value:!0})});
+(function (global, factory) {
+    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('ky'), require('humps'), require('query-string'), require('form-data'), require('randomstring')) :
+    typeof define === 'function' && define.amd ? define(['exports', 'ky', 'humps', 'query-string', 'form-data', 'randomstring'], factory) :
+    (global = global || self, factory(global['node-gitlab'] = {}, global.Request, global.Humps, global.QueryString, global.FormData, global.RandomString));
+}(this, function (exports, Request, humps, queryString, FormData, randomstring) { 'use strict';
+
+    Request = Request && Request.hasOwnProperty('default') ? Request['default'] : Request;
+    FormData = FormData && FormData.hasOwnProperty('default') ? FormData['default'] : FormData;
+    randomstring = randomstring && randomstring.hasOwnProperty('default') ? randomstring['default'] : randomstring;
+
+    /*! *****************************************************************************
+    Copyright (c) Microsoft Corporation. All rights reserved.
+    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
+    this file except in compliance with the License. You may obtain a copy of the
+    License at http://www.apache.org/licenses/LICENSE-2.0
+
+    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+    MERCHANTABLITY OR NON-INFRINGEMENT.
+
+    See the Apache Version 2.0 License for specific language governing permissions
+    and limitations under the License.
+    ***************************************************************************** */
+
+    function __rest(s, e) {
+        var t = {};
+        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+            t[p] = s[p];
+        if (s != null && typeof Object.getOwnPropertySymbols === "function")
+            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+                t[p[i]] = s[p[i]];
+        return t;
+    }
+
+    function defaultRequest(service, endpoint, { body, query, sudo }) {
+        let urlStr = `${service.url}${endpoint}`;
+        if (query) {
+            urlStr += `?${queryString.stringify(humps.decamelizeKeys(query), { arrayFormat: 'bracket' })}`;
+        }
+        const headers = Object.assign({}, service.headers);
+        if (sudo) {
+            headers.sudo = sudo;
+        }
+        return [
+            urlStr,
+            {
+                headers,
+                body: body && typeof body !== 'object' ? body : undefined,
+                // TODO
+                // rejectUnauthorized: service.rejectUnauthorized,
+                json: typeof body === 'object' ? humps.decamelizeKeys(body) : undefined,
+            },
+        ];
+    }
+    async function handleResponse(response) {
+        const { headers, status, statusText } = await response;
+        const rawBody = await response.json();
+        let body;
+        if (Array.isArray(body)) {
+            body = rawBody;
+        }
+        else if (typeof rawBody === 'object' && rawBody !== null) {
+            body = humps.camelizeKeys(rawBody);
+        }
+        else {
+            body = {};
+        }
+        return {
+            body,
+            headers,
+            status,
+            statusText,
+        };
+    }
+    async function get(service, endpoint, options = {}) {
+        const { showPagination, maxPages, sudo } = options, query = __rest(options, ["showPagination", "maxPages", "sudo"]);
+        const requestOptions = defaultRequest(service, endpoint, {
+            query,
+            sudo,
+        });
+        const { headers, body } = await handleResponse(Request.get(...requestOptions));
+        const pagination = {
+            total: headers['x-total'],
+            next: headers['x-next-page'] || null,
+            current: headers['x-page'] || null,
+            previous: headers['x-prev-page'] || null,
+            perPage: headers['x-per-page'],
+            totalPages: headers['x-total-pages'],
+        };
+        const underLimit = maxPages ? pagination.current < maxPages : true;
+        // If not looking for a singular page and still under the max pages limit
+        // AND their is a next page, paginate
+        if (!query.page && underLimit && pagination.next) {
+            const more = await get(service, endpoint, Object.assign({ page: pagination.next }, options));
+            return [...(Array.isArray(body) ? body : []), ...(Array.isArray(more) ? more : [])];
+        }
+        return (query.page || maxPages) && showPagination ? { data: body, pagination } : body;
+    }
+    function stream(service, endpoint, options = ({} = {})) {
+        const Req = Request;
+        if (typeof Req.stream !== 'function') {
+            throw new Error('Not implementated! Arg!');
+        }
+        return Req.stream(...defaultRequest(service, endpoint, {
+            query: options,
+        }));
+    }
+    async function post(service, endpoint, options = {}) {
+        const { sudo } = options, body = __rest(options, ["sudo"]);
+        const response = await handleResponse(Request.post(...defaultRequest(service, endpoint, {
+            body,
+            sudo,
+        })));
+        return response.body;
+    }
+    async function put(service, endpoint, options = {}) {
+        const body = __rest(options, ["sudo"]);
+        const response = await handleResponse(Request.put(...defaultRequest(service, endpoint, {
+            body,
+        })));
+        return response.body;
+    }
+    async function del(service, endpoint, options = {}) {
+        const query = __rest(options, ["sudo"]);
+        const response = await handleResponse(Request.delete(...defaultRequest(service, endpoint, {
+            query,
+        })));
+        return response.body;
+    }
+
+    class BaseService {
+        constructor({ token, oauthToken, sudo, host = 'https://gitlab.com', url = '', version = 'v4', rejectUnauthorized = true, requester = Request, }) {
+            this.url = [host, 'api', version, url].join('/');
+            this.headers = {};
+            this.rejectUnauthorized = rejectUnauthorized;
+            this.requester = requester;
+            // Handle auth tokens
+            if (oauthToken)
+                this.headers.authorization = `Bearer ${oauthToken}`;
+            else if (token)
+                this.headers['private-token'] = token;
+            // Set sudo
+            if (sudo)
+                this.headers['Sudo'] = sudo;
+        }
+    }
+
+    function bundler(services) {
+        return function Bundle(options) {
+            Object.entries(services || {}).forEach(([name, ser]) => {
+                this[name] = new ser(options);
+            });
+        };
+    }
+
+    class Groups extends BaseService {
+        all(options) {
+            return get(this, 'groups', options);
+        }
+        create(options) {
+            return post(this, 'groups', options);
+        }
+        createLDAPLink(groupId, cn, groupAccess, provider, options) {
+            const gId = encodeURIComponent(groupId);
+            return post(this, `groups/${gId}/ldap_group_links`, Object.assign({ cn,
+                groupAccess,
+                provider }, options));
+        }
+        edit(groupId, options) {
+            const gId = encodeURIComponent(groupId);
+            return put(this, `groups/${gId}`, options);
+        }
+        remove(groupId, options) {
+            const gId = encodeURIComponent(groupId);
+            return del(this, `groups/${gId}`, options);
+        }
+        removeLDAPLink(groupId, cn, _a = {}) {
+            var { provider } = _a, options = __rest(_a, ["provider"]);
+            const gId = encodeURIComponent(groupId);
+            const url = provider ? `${provider}/${cn}` : `${cn}`;
+            return del(this, `groups/${gId}/ldap_group_links/${url}`, options);
+        }
+        search(nameOrPath, options) {
+            return get(this, 'groups', Object.assign({ search: nameOrPath }, options));
+        }
+        show(groupId, options) {
+            const gId = encodeURIComponent(groupId);
+            return get(this, `groups/${gId}`, options);
+        }
+        subgroups(groupId, options) {
+            const gId = encodeURIComponent(groupId);
+            return get(this, `groups/${gId}/subgroups`, options);
+        }
+        syncLDAP(groupId, options) {
+            const gId = encodeURIComponent(groupId);
+            return post(this, `groups/${gId}/ldap_sync`, options);
+        }
+    }
+
+    class ResourceAccessRequests extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: resourceType }, options));
+        }
+        all(resourceId) {
+            const rId = encodeURIComponent(resourceId);
+            return get(this, `${rId}/access_requests`);
+        }
+        request(resourceId) {
+            const rId = encodeURIComponent(resourceId);
+            return post(this, `${rId}/access_requests`);
+        }
+        approve(resourceId, userId, { accessLevel }) {
+            const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+            return post(this, `${rId}/access_requests/${uId}/approve`, {
+                accessLevel,
+            });
+        }
+        deny(resourceId, userId) {
+            const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+            return del(this, `${rId}/access_requests/${uId}`);
+        }
+    }
+
+    function url(projectId, resourceType, resourceId, awardId, noteId) {
+        const [pId, rId] = [projectId, resourceId].map(encodeURIComponent);
+        const output = [pId, resourceType, rId];
+        if (noteId)
+            output.push('notes', encodeURIComponent(noteId));
+        output.push(encodeURIComponent('award_emoji'));
+        if (awardId)
+            output.push(encodeURIComponent(awardId));
+        return output.join('/');
+    }
+    class ResourceAwardsEmojis extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: 'projects' }, options));
+            this.resourceType = resourceType;
+        }
+        all(projectId, resourceId, noteId, options) {
+            return get(this, url(projectId, this.resourceType, resourceId, null, noteId), options);
+        }
+        award(projectId, resourceId, name, noteId, options) {
+            return post(this, url(projectId, this.resourceType, resourceId, null, noteId), Object.assign({ name }, options));
+        }
+        remove(projectId, resourceId, awardId, noteId, options) {
+            return del(this, url(projectId, this.resourceType, resourceId, awardId, noteId), options);
+        }
+        show(projectId, resourceId, awardId, noteId, options) {
+            return get(this, url(projectId, this.resourceType, resourceId, awardId, noteId), options);
+        }
+    }
+
+    class ResourceBadges extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: resourceType }, options));
+        }
+        add(resourceId, options) {
+            const rId = encodeURIComponent(resourceId);
+            return post(this, `${rId}/badges`, options);
+        }
+        all(resourceId, options) {
+            const rId = encodeURIComponent(resourceId);
+            return get(this, `${rId}/badges`, options);
+        }
+        edit(resourceId, badgeId, options) {
+            const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+            return put(this, `${rId}/badges/${bId}`, options);
+        }
+        preview(resourceId, linkUrl, imageUrl, options) {
+            const rId = encodeURIComponent(resourceId);
+            return get(this, `${rId}/badges/render`, Object.assign({ linkUrl, imageUrl }, options));
+        }
+        remove(resourceId, badgeId, options) {
+            const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+            return del(this, `${rId}/badges/${bId}`, options);
+        }
+        show(resourceId, badgeId, options) {
+            const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+            return get(this, `${rId}/badges/${bId}`, options);
+        }
+    }
+
+    class ResourceCustomAttributes extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: resourceType }, options));
+        }
+        all(resourceId, options) {
+            const rId = encodeURIComponent(resourceId);
+            return get(this, `${rId}/custom_attributes`, options);
+        }
+        set(resourceId, customAttributeId, value, options) {
+            const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+            return put(this, `${rId}/custom_attributes/${cId}`, Object.assign({ value }, options));
+        }
+        remove(resourceId, customAttributeId, options) {
+            const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+            return del(this, `${rId}/custom_attributes/${cId}`, options);
+        }
+        show(resourceId, customAttributeId, options) {
+            const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+            return get(this, `${rId}/custom_attributes/${cId}`, options);
+        }
+    }
+
+    class ResourceDiscussions extends BaseService {
+        constructor(resourceType, resource2Type, options) {
+            super(Object.assign({ url: resourceType }, options));
+            this.resource2Type = resource2Type;
+        }
+        addNote(resourceId, resource2Id, discussionId, noteId, content, options) {
+            if (!content)
+                throw new Error('Missing required content argument');
+            const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+            return put(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, Object.assign({ body: content }, options));
+        }
+        all(resourceId, resource2Id, options) {
+            const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+            return get(this, `${rId}/${this.resource2Type}/${r2Id}/discussions`, options);
+        }
+        create(resourceId, resource2Id, content, options) {
+            if (!content)
+                throw new Error('Missing required content argument');
+            const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+            return post(this, `${rId}/${this.resource2Type}/${r2Id}/discussions`, Object.assign({ body: content }, options));
+        }
+        editNote(resourceId, resource2Id, discussionId, noteId, options) {
+            const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+            return put(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, { body: options });
+        }
+        removeNote(resourceId, resource2Id, discussionId, noteId, options) {
+            const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+            return del(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, options);
+        }
+        show(resourceId, resource2Id, discussionId, options) {
+            const [rId, r2Id, dId] = [resourceId, resource2Id, discussionId].map(encodeURIComponent);
+            return get(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}`, options);
+        }
+    }
+
+    class ResourceIssueBoards extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: resourceType }, options));
+        }
+        all(resourceId, options) {
+            const rId = encodeURIComponent(resourceId);
+            return get(this, `${rId}/boards`, options);
+        }
+        create(resourceId, name, options) {
+            const rId = encodeURIComponent(resourceId);
+            return post(this, `${rId}/boards`, Object.assign({ name }, options));
+        }
+        createList(resourceId, boardId, labelId, options) {
+            const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+            return post(this, `${rId}/boards/${bId}/lists`, Object.assign({ labelId }, options));
+        }
+        edit(resourceId, boardId, options) {
+            const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+            return put(this, `${rId}/boards/${bId}`, options);
+        }
+        editList(resourceId, boardId, listId, position, options) {
+            const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+            return put(this, `${rId}/boards/${bId}/lists/${lId}`, Object.assign({ position }, options));
+        }
+        lists(resourceId, boardId, options) {
+            const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+            return get(this, `${rId}/boards/${bId}/lists`, options);
+        }
+        remove(resourceId, boardId, options) {
+            const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+            return del(this, `${rId}/boards/${bId}`, options);
+        }
+        removeList(resourceId, boardId, listId, options) {
+            const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+            return del(this, `${rId}/boards/${bId}/lists/${lId}`, options);
+        }
+        show(resourceId, boardId, options) {
+            const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+            return get(this, `${rId}/boards/${bId}`, options);
+        }
+        showList(resourceId, boardId, listId, options) {
+            const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+            return get(this, `${rId}/boards/${bId}/lists/${lId}`, options);
+        }
+    }
+
+    class ResourceMembers extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: resourceType }, options));
+        }
+        all(resourceId, includeInherited = false, options) {
+            const rId = encodeURIComponent(resourceId);
+            const url = [rId, 'members'];
+            if (includeInherited)
+                url.push('all');
+            return get(this, url.join('/'), { options });
+        }
+        add(resourceId, userId, accessLevel, options) {
+            const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+            return post(this, `${rId}/members`, Object.assign({ userId: uId, accessLevel }, options));
+        }
+        edit(resourceId, userId, accessLevel, options) {
+            const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+            return put(this, `${rId}/members/${uId}`, Object.assign({ accessLevel }, options));
+        }
+        show(resourceId, userId, options) {
+            const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+            return get(this, `${rId}/members/${uId}`, options);
+        }
+        remove(resourceId, userId, options) {
+            const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+            return del(this, `${rId}/members/${uId}`, options);
+        }
+    }
+
+    class ResourceMilestones extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: resourceType }, options));
+        }
+        all(resourceId, options) {
+            const rId = encodeURIComponent(resourceId);
+            return get(this, `${rId}/milestones`, options);
+        }
+        create(resourceId, title, options) {
+            const rId = encodeURIComponent(resourceId);
+            return post(this, `${rId}/milestones`, Object.assign({ title }, options));
+        }
+        edit(resourceId, milestoneId, options) {
+            const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+            return put(this, `${rId}/milestones/${mId}`, options);
+        }
+        issues(resourceId, milestoneId, options) {
+            const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+            return get(this, `${rId}/milestones/${mId}/issues`, options);
+        }
+        mergeRequests(resourceId, milestoneId, options) {
+            const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+            return get(this, `${rId}/milestones/${mId}/merge_requests`, options);
+        }
+        show(resourceId, milestoneId, options) {
+            const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+            return get(this, `${rId}/milestones/${mId}`, options);
+        }
+    }
+
+    class ResourceNotes extends BaseService {
+        constructor(resourceType, resource2Type, options) {
+            super(Object.assign({ url: resourceType }, options));
+            this.resource2Type = resource2Type;
+        }
+        all(resourceId, resource2Id, options) {
+            const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+            return get(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, options);
+        }
+        create(resourceId, resource2Id, body, options) {
+            const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+            return post(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, Object.assign({ body }, options));
+        }
+        edit(resourceId, resource2Id, noteId, body, options) {
+            const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+            return put(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, Object.assign({ body }, options));
+        }
+        remove(resourceId, resource2Id, noteId, options) {
+            const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+            return del(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);
+        }
+        show(resourceId, resource2Id, noteId, options) {
+            const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+            return get(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);
+        }
+    }
+
+    class ResourceTemplates extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: ['templates', resourceType].join('/') }, options));
+        }
+        all(options) {
+            return get(this, '', options);
+        }
+        show(resourceId, options) {
+            const rId = encodeURIComponent(resourceId);
+            return post(this, `${rId}`, options);
+        }
+    }
+
+    class ResourceVariables extends BaseService {
+        constructor(resourceType, options) {
+            super(Object.assign({ url: resourceType }, options));
+        }
+        all(resourceId, options) {
+            const rId = encodeURIComponent(resourceId);
+            return get(this, `${rId}/variables`, options);
+        }
+        create(resourceId, options) {
+            const rId = encodeURIComponent(resourceId);
+            return post(this, `${rId}/variables`, options);
+        }
+        edit(resourceId, keyId, options) {
+            const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+            return put(this, `${rId}/variables/${kId}`, options);
+        }
+        show(resourceId, keyId, options) {
+            const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+            return get(this, `${rId}/variables/${kId}`, options);
+        }
+        remove(resourceId, keyId, options) {
+            const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+            return del(this, `${rId}/variables/${kId}`, options);
+        }
+    }
+
+    class GroupAccessRequests extends ResourceAccessRequests {
+        constructor(options) {
+            super('groups', options);
+        }
+    }
+
+    class GroupBadges extends ResourceBadges {
+        constructor(options) {
+            super('groups', options);
+        }
+    }
+
+    class GroupCustomAttributes extends ResourceCustomAttributes {
+        constructor(options) {
+            super('groups', options);
+        }
+    }
+
+    class GroupIssueBoards extends ResourceIssueBoards {
+        constructor(options) {
+            super('groups', options);
+        }
+    }
+
+    class GroupMembers extends ResourceMembers {
+        constructor(options) {
+            super('groups', options);
+        }
+    }
+
+    class GroupMilestones extends ResourceMilestones {
+        constructor(options) {
+            super('groups', options);
+        }
+    }
+
+    class GroupProjects extends BaseService {
+        all(groupId, options) {
+            const gId = encodeURIComponent(groupId);
+            return get(this, `groups/${gId}/projects`, options);
+        }
+        add(groupId, projectId, options) {
+            const [gId, pId] = [groupId, projectId].map(encodeURIComponent);
+            return post(this, `groups/${gId}/projects/${pId}`, options);
+        }
+    }
+
+    class GroupVariables extends ResourceVariables {
+        constructor(options) {
+            super('groups', options);
+        }
+    }
+
+    class Epics extends BaseService {
+        all(groupId, options) {
+            const gId = encodeURIComponent(groupId);
+            return get(this, `groups/${gId}/epics`, options);
+        }
+        create(groupId, title, options) {
+            const gId = encodeURIComponent(groupId);
+            return post(this, `groups/${gId}/epics`, Object.assign({ title }, options));
+        }
+        edit(groupId, epicId, options) {
+            const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+            return put(this, `groups/${gId}/epics/${eId}`, options);
+        }
+        remove(groupId, epicId, options) {
+            const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+            return del(this, `groups/${gId}/epics/${eId}`, options);
+        }
+        show(groupId, epicId, options) {
+            const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+            return get(this, `groups/${gId}/epics/${eId}`, options);
+        }
+    }
+
+    class EpicIssues extends BaseService {
+        all(groupId, epicId, options) {
+            const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+            return get(this, `groups/${gId}/epics/${eId}/issues`, options);
+        }
+        assign(groupId, epicId, issueId, options) {
+            const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+            return put(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+        }
+        edit(groupId, epicId, issueId, options) {
+            const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+            return del(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+        }
+        remove(groupId, epicId, issueId, options) {
+            const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+            return del(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+        }
+    }
+
+    class EpicNotes extends ResourceNotes {
+        constructor(options) {
+            super('groups', 'epics', options);
+        }
+    }
+
+    class EpicDiscussions extends ResourceDiscussions {
+        constructor(options) {
+            super('groups', 'epics', options);
+        }
+    }
+
+    class Users extends BaseService {
+        all(options) {
+            return get(this, 'users', options);
+        }
+        activities(options) {
+            return get(this, 'users/activities', options);
+        }
+        projects(userId, options) {
+            const uId = encodeURIComponent(userId);
+            return get(this, `users/${uId}/projects`, options);
+        }
+        block(userId, options) {
+            const uId = encodeURIComponent(userId);
+            return post(this, `users/${uId}/block`, options);
+        }
+        create(options) {
+            return post(this, 'users', options);
+        }
+        current(options) {
+            return get(this, 'user', options);
+        }
+        edit(userId, options) {
+            const uId = encodeURIComponent(userId);
+            return put(this, `users/${uId}`, options);
+        }
+        events(userId, options) {
+            const uId = encodeURIComponent(userId);
+            return get(this, `users/${uId}/events`, options);
+        }
+        session(email, password, options) {
+            return post(this, 'session', Object.assign({ email,
+                password }, options));
+        }
+        search(emailOrUsername, options) {
+            return get(this, 'users', Object.assign({ search: emailOrUsername }, options));
+        }
+        show(userId, options) {
+            const uId = encodeURIComponent(userId);
+            return get(this, `users/${uId}`, options);
+        }
+        remove(userId, options) {
+            const uId = encodeURIComponent(userId);
+            return del(this, `users/${uId}`, options);
+        }
+        unblock(userId, options) {
+            const uId = encodeURIComponent(userId);
+            return post(this, `users/${uId}/unblock`, options);
+        }
+    }
+
+    class UserCustomAttributes extends ResourceCustomAttributes {
+        constructor(options) {
+            super('users', options);
+        }
+    }
+
+    const url$1 = userId => (userId ? `users/${encodeURIComponent(userId)}/emails` : 'user/emails');
+    class UserEmails extends BaseService {
+        all(_a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            return get(this, url$1(userId), options);
+        }
+        add(email, _a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            return post(this, url$1(userId), Object.assign({ email }, options));
+        }
+        show(emailId, options) {
+            const eId = encodeURIComponent(emailId);
+            return get(this, `user/emails/${eId}`, options);
+        }
+        remove(emailId, _a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            const eId = encodeURIComponent(emailId);
+            return del(this, `${url$1(userId)}/${eId}`, options);
+        }
+    }
+
+    class UserImpersonationTokens extends BaseService {
+        all(userId, options) {
+            const uId = encodeURIComponent(userId);
+            return get(this, `users/${uId}/impersonation_tokens`, options);
+        }
+        add(userId, name, scopes, expiresAt, options) {
+            const uId = encodeURIComponent(userId);
+            return post(this, `users/${uId}/impersonation_tokens`, Object.assign({ name,
+                expiresAt,
+                scopes }, options));
+        }
+        show(userId, tokenId, options) {
+            const [uId, tId] = [userId, tokenId].map(encodeURIComponent);
+            return get(this, `users/${uId}/impersonation_tokens/${tId}`, options);
+        }
+        revoke(userId, tokenId, options) {
+            const [uId, tId] = [userId, tokenId].map(encodeURIComponent);
+            return del(this, `users/${uId}/impersonation_tokens/${tId}`, options);
+        }
+    }
+
+    const url$2 = (userId) => (userId ? `users/${encodeURIComponent(userId)}/keys` : 'user/keys');
+    class UserKeys extends BaseService {
+        all(_a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            return get(this, url$2(userId), options);
+        }
+        create(title, key, _a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            return post(this, url$2(userId), Object.assign({ title,
+                key }, options));
+        }
+        show(keyId, options) {
+            const kId = encodeURIComponent(keyId);
+            return get(this, `user/keys/${kId}`, options);
+        }
+        remove(keyId, _a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            const kId = encodeURIComponent(keyId);
+            return del(this, `${url$2(userId)}/${kId}`, options);
+        }
+    }
+
+    const url$3 = userId => (userId ? `users/${encodeURIComponent(userId)}/gpg_keys` : 'users/gpg_keys');
+    class UserGPGKeys extends BaseService {
+        all(_a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            return get(this, url$3(userId), options);
+        }
+        add(title, key, _a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            return post(this, url$3(userId), Object.assign({ title,
+                key }, options));
+        }
+        show(keyId, _a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            const kId = encodeURIComponent(keyId);
+            return get(this, `${url$3(userId)}/${kId}`, options);
+        }
+        remove(keyId, _a = {}) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            const kId = encodeURIComponent(keyId);
+            return del(this, `${url$3(userId)}/${kId}`, options);
+        }
+    }
+
+    class Branches extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/branches`, options);
+        }
+        create(projectId, branchName, ref, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/repository/branches`, Object.assign({ branch: branchName, ref }, options));
+        }
+        protect(projectId, branchName, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/protected_branches`, Object.assign({ name: branchName }, options));
+        }
+        remove(projectId, branchName, options) {
+            const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+            return del(this, `projects/${pId}/repository/branches/${bName}`, options);
+        }
+        show(projectId, branchName, options) {
+            const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+            return get(this, `projects/${pId}/repository/branches/${bName}`, options);
+        }
+        unprotect(projectId, branchName, options) {
+            const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+            return put(this, `projects/${pId}/repository/branches/${bName}/unprotect`, options);
+        }
+    }
+
+    class Commits extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/commits`, options);
+        }
+        cherryPick(projectId, sha, branch, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/repository/commits/${sha}/cherry_pick`, Object.assign({ branch }, options));
+        }
+        comments(projectId, sha, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/commits/${sha}/comments`, options);
+        }
+        create(projectId, branch, message, actions = [], options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/repository/commits`, Object.assign({ branch, commitMessage: message, actions }, options));
+        }
+        createComment(projectId, sha, note, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/repository/commits/${sha}/comments`, Object.assign({ note }, options));
+        }
+        diff(projectId, sha, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/commits/${sha}/diff`, options);
+        }
+        editStatus(projectId, sha, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/statuses/${sha}`, options);
+        }
+        references(projectId, sha, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/commits/${sha}/refs`, options);
+        }
+        show(projectId, sha, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/commits/${sha}`, options);
+        }
+        status(projectId, sha, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/commits/${sha}/statuses`, options);
+        }
+    }
+
+    class CommitDiscussions extends ResourceDiscussions {
+        constructor(options) {
+            super('projects', 'commits', options);
+        }
+    }
+
+    class Deployments extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/deployments`, options);
+        }
+        show(projectId, deploymentId, options) {
+            const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/deployments/${dId}`, options);
+        }
+    }
+
+    class DeployKeys extends BaseService {
+        add(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/deploy_keys`, options);
+        }
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/deploy_keys`, options);
+        }
+        show(projectId, keyId, options) {
+            const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/deploy_keys/${kId}`, options);
+        }
+        enable(projectId, keyId, options) {
+            const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/deploy_keys/${kId}/enable`, options);
+        }
+    }
+
+    class Environments extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/environments`, options);
+        }
+        create(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/environments`, options);
+        }
+        edit(projectId, environmentId, options) {
+            const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/environments/${eId}`, options);
+        }
+        remove(projectId, environmentId, options) {
+            const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/environments/${eId}`, options);
+        }
+        stop(projectId, environmentId, options) {
+            const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/environments/${eId}/stop`, options);
+        }
+    }
+
+    class Issues extends BaseService {
+        addSpentTime(projectId, issueId, duration, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${iId}/add_spent_time`, Object.assign({ duration }, options));
+        }
+        addTimeEstimate(projectId, issueId, duration, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${iId}/time_estimate`, Object.assign({ duration }, options));
+        }
+        all(_a) {
+            var { projectId } = _a, options = __rest(_a, ["projectId"]);
+            const url = projectId ? `projects/${encodeURIComponent(projectId)}/issues` : 'issues';
+            return get(this, url, options);
+        }
+        create(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/issues`, options);
+        }
+        edit(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/issues/${iId}`, options);
+        }
+        link(projectId, issueIId, targetProjectId, targetIssueId, options) {
+            const [pId, iId] = [projectId, issueIId].map(encodeURIComponent);
+            const [targetpId, targetIId] = [targetProjectId, targetIssueId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${iId}/links`, Object.assign({ targetProjectId: targetpId, targetIssueId: targetIId }, options));
+        }
+        participants(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/issues/${iId}/participants`, options);
+        }
+        remove(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/issues/${iId}`, options);
+        }
+        resetSpentTime(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${iId}/reset_spent_time`, options);
+        }
+        resetTimeEstimate(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${iId}/reset_time_estimate`, options);
+        }
+        show(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/issues/${iId}`, options);
+        }
+        subscribe(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${iId}/subscribe`, options);
+        }
+        timeStats(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/issues/${iId}/time_stats`, options);
+        }
+        unsubscribe(projectId, issueId, options) {
+            const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/issues/${iId}/unsubscribe`, options);
+        }
+    }
+
+    class IssueNotes extends ResourceNotes {
+        constructor(options) {
+            super('projects', 'issues', options);
+        }
+    }
+
+    class IssueDiscussions extends ResourceDiscussions {
+        constructor(options) {
+            super('projects', 'issues', options);
+        }
+    }
+
+    class IssueAwardEmojis extends ResourceAwardsEmojis {
+        constructor(options) {
+            super('issues', options);
+        }
+    }
+
+    class Jobs extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/jobs`, options);
+        }
+        cancel(projectId, jobId, options) {
+            const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/jobs/${jId}/cancel`, options);
+        }
+        downloadSingleArtifactFile(projectId, jobId, artifactPath, _a) {
+            var { stream: stream$$1 = false } = _a, options = __rest(_a, ["stream"]);
+            const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+            if (stream$$1) {
+                return stream(this, `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`, options);
+            }
+            return get(this, `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`, options);
+        }
+        downloadLatestArtifactFile(projectId, ref, name, _a) {
+            var { stream: stream$$1 = false } = _a, options = __rest(_a, ["stream"]);
+            const [pId, rId, jobName] = [projectId, ref, name].map(encodeURIComponent);
+            if (stream$$1) {
+                return stream(this, `projects/${pId}/jobs/artifacts/${rId}/download?job=${jobName}`, options);
+            }
+            return get(this, `projects/${pId}/jobs/artifacts/${rId}/download?job=${jobName}`, options);
+        }
+        downloadTraceFile(projectId, jobId, options) {
+            const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/jobs/${jId}/trace`, options);
+        }
+        erase(projectId, jobId, options) {
+            const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/jobs/${jId}/erase`, options);
+        }
+        keepArtifacts(projectId, jobId, options) {
+            const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/jobs/${jId}/artifacts/keep`, options);
+        }
+        play(projectId, jobId, options) {
+            const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/jobs/${jId}/play`, options);
+        }
+        retry(projectId, jobId, options) {
+            const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/jobs/${jId}/retry`, options);
+        }
+        show(projectId, jobId, options) {
+            const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/jobs/${jId}`, options);
+        }
+        showPipelineJobs(projectId, pipelineId, options) {
+            const [pId, ppId] = [projectId, pipelineId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/pipelines/${ppId}/jobs`, options);
+        }
+    }
+
+    class Labels extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/labels`, options);
+        }
+        create(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/labels`, options);
+        }
+        edit(projectId, labelName, options) {
+            const pId = encodeURIComponent(projectId);
+            return put(this, `projects/${pId}/labels`, Object.assign({ name: labelName }, options));
+        }
+        remove(projectId, labelName, options) {
+            const pId = encodeURIComponent(projectId);
+            return del(this, `projects/${pId}/labels`, Object.assign({ name: labelName }, options));
+        }
+        subscribe(projectId, labelId, options) {
+            const [pId, lId] = [projectId, labelId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${lId}/subscribe`, options);
+        }
+        unsubscribe(projectId, labelId, options) {
+            const [pId, lId] = [projectId, labelId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/issues/${lId}/unsubscribe`, options);
+        }
+    }
+
+    class MergeRequests extends BaseService {
+        accept(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/merge_requests/${mIId}/merge`, options);
+        }
+        addSpentTime(projectId, mergerequestIId, duration, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${mIId}/add_spent_time`, Object.assign({ duration }, options));
+        }
+        addTimeEstimate(projectId, mergerequestIId, duration, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/issues/${mIId}/time_estimate`, Object.assign({ duration }, options));
+        }
+        all(_a) {
+            var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+            let url;
+            if (projectId) {
+                url = `projects/${encodeURIComponent(projectId)}/merge_requests`;
+            }
+            else if (groupId) {
+                url = `groups/${encodeURIComponent(groupId)}/merge_requests`;
+            }
+            else {
+                url = 'merge_requests';
+            }
+            return get(this, url, options);
+        }
+        approve(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/merge_requests/${mIId}/approve`, options);
+        }
+        approvals(projectId, _a) {
+            var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            let url;
+            if (mergerequestIId) {
+                url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+            }
+            else {
+                url = `projects/${pId}/approvals`;
+            }
+            return get(this, url, options);
+        }
+        approvers(projectId, approverIds, approverGroupIds, _a) {
+            var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            let url;
+            if (mergerequestIId) {
+                url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+            }
+            else {
+                url = `projects/${pId}/approvals`;
+            }
+            return post(this, url, Object.assign({ approverIds, approverGroupIds }, options));
+        }
+        cancelOnPipelineSucess(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/merge_requests/${mIId}/cancel_merge_when_pipeline_succeeds`, options);
+        }
+        changes(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/merge_requests/${mIId}/changes`, options);
+        }
+        closesIssues(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/merge_requests/${mIId}/closes_issues`, options);
+        }
+        commits(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/merge_requests/${mIId}/commits`, options);
+        }
+        create(projectId, sourceBranch, targetBranch, title, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/merge_requests`, Object.assign({ id: pId, sourceBranch,
+                targetBranch,
+                title }, options));
+        }
+        edit(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/merge_requests/${mIId}`, options);
+        }
+        editApprovals(projectId, _a) {
+            var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            let url;
+            if (mergerequestIId) {
+                url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+            }
+            else {
+                url = `projects/${pId}/approvals`;
+            }
+            return post(this, url, options);
+        }
+        pipelines(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/merge_requests/${mIId}/pipelines`, options);
+        }
+        remove(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/merge_requests/${mIId}`, options);
+        }
+        resetSpentTime(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/merge_requests/${mIId}/reset_spent_time`, options);
+        }
+        resetTimeEstimate(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/merge_requests/${mIId}/reset_time_estimate`, options);
+        }
+        show(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/merge_requests/${mIId}`, options);
+        }
+        timeStats(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/merge_requests/${mIId}/time_stats`, options);
+        }
+        version(projectId, mergerequestIId, versionId, options) {
+            const [pId, mIId, vId] = [projectId, mergerequestIId, versionId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/merge_requests/${mIId}/versions/${vId}`, options);
+        }
+        versions(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/merge_requests/${mIId}/versions`, options);
+        }
+        unapprove(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/merge_requests/${mIId}/approve`, options);
+        }
+        unsubscribe(projectId, mergerequestIId, options) {
+            const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/merge_requests/${mIId}/unsubscribe`, options);
+        }
+    }
+
+    class MergeRequestAwardEmojis extends ResourceAwardsEmojis {
+        constructor(options) {
+            super('merge_requests', options);
+        }
+    }
+
+    class MergeRequestDiscussions extends ResourceDiscussions {
+        constructor(options) {
+            super('projects', 'merge_requests', options);
+        }
+    }
+
+    class MergeRequestNotes extends ResourceNotes {
+        constructor(options) {
+            super('projects', 'merge_requests', options);
+        }
+    }
+
+    class Pipelines extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/pipelines`, options);
+        }
+        create(projectId, ref, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/pipeline`, Object.assign({ ref }, options));
+        }
+        show(projectId, pipelineId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/pipelines/${pipelineId}`, options);
+        }
+        retry(projectId, pipelineId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/pipelines/${pipelineId}/retry`, options);
+        }
+        cancel(projectId, pipelineId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/pipelines/${pipelineId}/cancel`, options);
+        }
+        showJobs(projectId, pipelineId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/pipelines/${pipelineId}/jobs`, options);
+        }
+    }
+
+    class PipelineSchedules extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/pipeline_schedules`, options);
+        }
+        create(projectId, description, ref, cron, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/pipeline_schedules`, Object.assign({ description,
+                ref,
+                cron }, options));
+        }
+        edit(projectId, scheduleId, options) {
+            const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+        }
+        remove(projectId, scheduleId, options) {
+            const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+        }
+        show(projectId, scheduleId, options) {
+            const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+        }
+        takeOwnership(projectId, scheduleId, options) {
+            const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/pipeline_schedules/${sId}/take_ownership`, options);
+        }
+    }
+
+    class PipelineScheduleVariables extends BaseService {
+        all(projectId, pipelineScheduleId, options) {
+            const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/pipeline_schedules/${psId}/variables`, options);
+        }
+        create(projectId, pipelineScheduleId, options) {
+            const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/pipeline_schedules/${psId}/variables`, options);
+        }
+        edit(projectId, pipelineScheduleId, keyId, options) {
+            const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+        }
+        show(projectId, pipelineScheduleId, keyId, options) {
+            const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+        }
+        remove(projectId, pipelineScheduleId, keyId, options) {
+            const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+        }
+    }
+
+    class Projects extends BaseService {
+        all(options) {
+            return get(this, 'projects', options);
+        }
+        archive(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/archive`, options);
+        }
+        create(_a) {
+            var { userId } = _a, options = __rest(_a, ["userId"]);
+            const url = userId ? `projects/user/${encodeURIComponent(userId)}` : 'projects';
+            return post(this, url, options);
+        }
+        edit(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return put(this, `projects/${pId}`, options);
+        }
+        events(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/events`, options);
+        }
+        fork(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/fork`, options);
+        }
+        forks(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/forks`, options);
+        }
+        languages(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/languages`, options);
+        }
+        mirrorPull(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/mirror/pull`, options);
+        }
+        remove(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return del(this, `projects/${pId}`, options);
+        }
+        search(projectName) {
+            return get(this, 'projects', { search: projectName });
+        }
+        share(projectId, groupId, groupAccess, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/share`, Object.assign({ groupId, groupAccess }, options));
+        }
+        show(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}`, options);
+        }
+        star(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/star`, options);
+        }
+        statuses(projectId, sha, state, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/statuses/${sha}`, Object.assign({ state }, options));
+        }
+        transfer(projectId, namespaceId) {
+            const pId = encodeURIComponent(projectId);
+            return put(this, `projects/${pId}/transfer`, { namespace: namespaceId });
+        }
+        unarchive(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/unarchive`, options);
+        }
+        unshare(projectId, groupId, options) {
+            const [pId, gId] = [projectId, groupId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/share${gId}`, options);
+        }
+        unstar(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/unstar`, options);
+        }
+        updatePushRule(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return put(this, `projects/${pId}/push_rule`, options);
+        }
+        upload(projectId, content, { fileName = randomstring(8) }) {
+            const pId = encodeURIComponent(projectId);
+            const form = new FormData();
+            form.append(fileName, {
+                file: {
+                    value: content,
+                    options: {
+                        filename: fileName,
+                        contentType: 'application/octet-stream',
+                    },
+                },
+            });
+            return post(this, `projects/${pId}/uploads`, form);
+        }
+    }
+
+    class ProjectAccessRequests extends ResourceAccessRequests {
+        constructor(options) {
+            super('projects', options);
+        }
+    }
+
+    class ProjectBadges extends ResourceBadges {
+        constructor(options) {
+            super('projects', options);
+        }
+    }
+
+    class ProjectCustomAttributes extends ResourceCustomAttributes {
+        constructor(options) {
+            super('projects', options);
+        }
+    }
+
+    class ProjectImportExport extends BaseService {
+        download(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/export/download`, options);
+        }
+        exportStatus(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/export`, options);
+        }
+        import(content, path, options) {
+            const form = new FormData();
+            form.append(path, {
+                file: {
+                    value: content,
+                    options: {
+                        filename: path,
+                        contentType: 'application/octet-stream',
+                    },
+                },
+            });
+            return post(this, 'projects/import', Object.assign({}, form, options));
+        }
+        importStatus(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/import`, options);
+        }
+        schedule(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/export`, options);
+        }
+    }
+
+    class ProjectIssueBoards extends ResourceIssueBoards {
+        constructor(options) {
+            super('projects', options);
+        }
+    }
+
+    class ProjectHooks extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/hooks`, options);
+        }
+        show(projectId, hookId, options) {
+            const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/hooks/${hId}`, options);
+        }
+        add(projectId, url, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/hooks`, Object.assign({ url }, options));
+        }
+        edit(projectId, hookId, url, options) {
+            const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/hooks/${hId}`, Object.assign({ url }, options));
+        }
+        remove(projectId, hookId, options) {
+            const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/hooks/${hId}`, options);
+        }
+    }
+
+    class ProjectMembers extends ResourceMembers {
+        constructor(options) {
+            super('projects', options);
+        }
+    }
+
+    class ProjectMilestones extends ResourceMilestones {
+        constructor(options) {
+            super('projects', options);
+        }
+    }
+
+    class ProjectSnippets extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/snippets`, options);
+        }
+        content(projectId, snippetId, options) {
+            const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/snippets/${sId}/raw`, options);
+        }
+        create(projectId, title, fileName, code, visibility, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/snippets`, Object.assign({ title,
+                fileName,
+                code,
+                visibility }, options));
+        }
+        edit(projectId, snippetId, options) {
+            const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/snippets/${sId}`, options);
+        }
+        remove(projectId, snippetId, options) {
+            const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/snippets/${sId}`, options);
+        }
+        show(projectId, snippetId, options) {
+            const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/snippets/${sId}`, options);
+        }
+        userAgentDetails(projectId, snippetId, options) {
+            const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/snippets/${sId}/user_agent_detail`, options);
+        }
+    }
+
+    class ProjectSnippetNotes extends ResourceNotes {
+        constructor(options) {
+            super('projects', 'snippets', options);
+        }
+    }
+
+    class ProjectSnippetDiscussions extends ResourceDiscussions {
+        constructor(options) {
+            super('projects', 'snippets', options);
+        }
+    }
+
+    class ProjectSnippetAwardEmojis extends ResourceAwardsEmojis {
+        constructor(options) {
+            super('issues', options);
+        }
+    }
+
+    class ProtectedBranches extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/protected_branches`, options);
+        }
+        protect(projectId, branchName, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/protected_branches`, Object.assign({ name: branchName }, options));
+        }
+        show(projectId, branchName, options) {
+            const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+            return get(this, `projects/${pId}/protected_branches/${bName}`, options);
+        }
+        unprotect(projectId, branchName, options) {
+            const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+            return del(this, `projects/${pId}/protected_branches/${bName}`, options);
+        }
+    }
+
+    class ProtectedTags extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/protected_tags`, options);
+        }
+        protect(projectId, tagName, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/protected_tags`, Object.assign({ name: tagName }, options));
+        }
+        show(projectId, tagName, options) {
+            const [pId, tName] = [projectId, tagName].map(encodeURIComponent);
+            return get(this, `projects/${pId}/protected_tags/${tName}`, options);
+        }
+        unprotect(projectId, tagName, options) {
+            const [pId, tName] = [projectId, tagName].map(encodeURIComponent);
+            return del(this, `projects/${pId}/protected_tags/${tName}`, options);
+        }
+    }
+
+    class ProjectVariables extends ResourceVariables {
+        constructor(options) {
+            super('projects', options);
+        }
+    }
+
+    class Repositories extends BaseService {
+        compare(projectId, from, to, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/compare`, Object.assign({ from,
+                to }, options));
+        }
+        contributors(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/contributors`, options);
+        }
+        showArchive(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/archive`, options);
+        }
+        showBlob(projectId, sha, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/blobs/${sha}`, options);
+        }
+        showBlobRaw(projectId, sha, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/blobs/${sha}/raw`, options);
+        }
+        tree(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/tree`, options);
+        }
+    }
+
+    class RepositoryFiles extends BaseService {
+        create(projectId, filePath, branch, content, options) {
+            const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+            return post(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch,
+                content }, options));
+        }
+        edit(projectId, filePath, branch, content, options) {
+            const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+            return put(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch,
+                content }, options));
+        }
+        remove(projectId, filePath, branch, options) {
+            const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+            return del(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch }, options));
+        }
+        show(projectId, filePath, ref, options) {
+            const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+            return get(this, `projects/${pId}/repository/files/${path}`, Object.assign({ ref }, options));
+        }
+        showRaw(projectId, filePath, ref, options) {
+            const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+            return get(this, `projects/${pId}/repository/files/${path}/raw`, Object.assign({ ref }, options));
+        }
+    }
+
+    class Runners extends BaseService {
+        all(_a) {
+            var { projectId } = _a, options = __rest(_a, ["projectId"]);
+            const url = projectId ? `projects/${encodeURIComponent(projectId)}/runners` : 'runners/all';
+            return get(this, url, options);
+        }
+        allOwned(options) {
+            return get(this, 'runners', options);
+        }
+        edit(runnerId, options) {
+            const rId = encodeURIComponent(runnerId);
+            return put(this, `runners/${rId}`, options);
+        }
+        enable(projectId, runnerId, options) {
+            const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);
+            return post(this, `projects/${pId}/runners`, Object.assign({ runnerId: rId }, options));
+        }
+        disable(projectId, runnerId, options) {
+            const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/runners/${rId}`, options);
+        }
+        jobs(runnerId, options) {
+            const rId = encodeURIComponent(runnerId);
+            return get(this, `runners/${rId}/jobs`, options);
+        }
+        remove(runnerId, options) {
+            const rId = encodeURIComponent(runnerId);
+            return del(this, `runners/${rId}`, options);
+        }
+        show(runnerId, options) {
+            const rId = encodeURIComponent(runnerId);
+            return get(this, `runners/${rId}`, options);
+        }
+    }
+
+    class Services extends BaseService {
+        edit(projectId, serviceName, options) {
+            const pId = encodeURIComponent(projectId);
+            return put(this, `projects/${pId}/services/${serviceName}`, options);
+        }
+        remove(projectId, serviceName, options) {
+            const pId = encodeURIComponent(projectId);
+            return del(this, `projects/${pId}/services/${serviceName}`, options);
+        }
+        show(projectId, serviceName, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/services/${serviceName}`, options);
+        }
+    }
+
+    class Tags extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/repository/tags`, options);
+        }
+        create(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/repository/tags`, options);
+        }
+        remove(projectId, tagName, options) {
+            const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
+            return del(this, `projects/${pId}/repository/tags/${tId}`, options);
+        }
+        show(projectId, tagName, options) {
+            const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
+            return get(this, `projects/${pId}/repository/tags/${tId}`, options);
+        }
+    }
+
+    class Todos extends BaseService {
+        all(options) {
+            return get(this, 'todos', options);
+        }
+        create(projectId, mergerequestId, options) {
+            return post(this, `projects/${projectId}/merge_requests/${mergerequestId}/todo`, options);
+        }
+        done(_a) {
+            var { todoId } = _a, options = __rest(_a, ["todoId"]);
+            let url = 'mark_as_done';
+            if (todoId)
+                url = `${todoId}/${url}`;
+            return del(this, `todos/${url}`, options);
+        }
+    }
+
+    class Triggers extends BaseService {
+        add(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/triggers`, options);
+        }
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/triggers`, options);
+        }
+        edit(projectId, triggerId, options) {
+            const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+            return put(this, `projects/${pId}/triggers/${tId}`, options);
+        }
+        remove(projectId, triggerId, options) {
+            const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+            return del(this, `projects/${pId}/triggers/${tId}`, options);
+        }
+        show(projectId, triggerId, options) {
+            const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+            return get(this, `projects/${pId}/triggers/${tId}`, options);
+        }
+    }
+
+    class PushRule extends BaseService {
+        create(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/push_rule`, options);
+        }
+        edit(projectId, _a) {
+            var options = __rest(_a, ["upsert"]);
+            const pId = encodeURIComponent(projectId);
+            try {
+                return put(this, `projects/${pId}/push_rule`, options);
+            }
+            catch (e) {
+                if (e.message.includes('exist'))
+                    return this.create(projectId, options);
+                throw e;
+            }
+        }
+        remove(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return del(this, `projects/${pId}/push_rule`, options);
+        }
+        show(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/push_rule`, options);
+        }
+    }
+
+    class ApplicationSettings extends BaseService {
+        all(options) {
+            return get(this, 'application/settings', options);
+        }
+        edit(options) {
+            return put(this, 'application/settings', options);
+        }
+    }
+
+    class BroadcastMessages extends BaseService {
+        all(options) {
+            return get(this, 'broadcast_messages', options);
+        }
+        create(options) {
+            return post(this, 'broadcast_messages', options);
+        }
+        edit(broadcastMessageId, options) {
+            const bId = encodeURIComponent(broadcastMessageId);
+            return put(this, `broadcast_messages/${bId}`, options);
+        }
+        remove(broadcastMessageId) {
+            const bId = encodeURIComponent(broadcastMessageId);
+            return del(this, `broadcast_messages/${bId}`);
+        }
+        show(broadcastMessageId, options) {
+            const bId = encodeURIComponent(broadcastMessageId);
+            return get(this, `broadcast_messages/${bId}`, options);
+        }
+    }
+
+    class Events extends BaseService {
+        all(options) {
+            return get(this, 'events', options);
+        }
+    }
+
+    class FeatureFlags extends BaseService {
+        all(options) {
+            return get(this, 'features', options);
+        }
+        set(name, options) {
+            const encodedName = encodeURIComponent(name);
+            return post(this, `features/${encodedName}`, options);
+        }
+    }
+
+    class GeoNodes extends BaseService {
+        all(options) {
+            return get(this, 'geo_nodes', options);
+        }
+        create(geonodeId, options) {
+            const gId = encodeURIComponent(geonodeId);
+            return post(this, `geo_nodes/${gId}`, options);
+        }
+        edit(geonodeId, options) {
+            const gId = encodeURIComponent(geonodeId);
+            return put(this, `geo_nodes/${gId}`, options);
+        }
+        failures(options) {
+            return post(this, 'geo_nodes/current/failures', options);
+        }
+        repair(geonodeId, options) {
+            const gId = encodeURIComponent(geonodeId);
+            return del(this, `geo_nodes/${gId}`, options);
+        }
+        show(geonodeId, options) {
+            const gId = encodeURIComponent(geonodeId);
+            return get(this, `geo_nodes/${gId}`, options);
+        }
+        status(geonodeId, options) {
+            const gId = encodeURIComponent(geonodeId);
+            return get(this, `geo_nodes/${gId}/status`, options);
+        }
+        statuses(options) {
+            return get(this, 'geo_nodes/statuses', options);
+        }
+    }
+
+    class GitignoreTemplates extends ResourceTemplates {
+        constructor(options) {
+            super('gitignores', options);
+        }
+    }
+
+    class GitLabCIYMLTemplates extends ResourceTemplates {
+        constructor(options) {
+            super('gitlab_ci_ymls', options);
+        }
+    }
+
+    class Keys extends BaseService {
+        show(keyId, options) {
+            const kId = encodeURIComponent(keyId);
+            return get(this, `keys/${kId}`, options);
+        }
+    }
+
+    class Licence extends BaseService {
+        all(options) {
+            return get(this, 'licence', options);
+        }
+        create(options) {
+            return post(this, 'licence', options);
+        }
+    }
+
+    class LicenceTemplates extends ResourceTemplates {
+        constructor(options) {
+            super('licences', options);
+        }
+    }
+
+    class Lint extends BaseService {
+        lint(content, options) {
+            return post(this, 'lint', Object.assign({ content }, options));
+        }
+    }
+
+    class Namespaces extends BaseService {
+        all(options) {
+            return get(this, 'namespaces', options);
+        }
+        show(namespaceId, options) {
+            const nId = encodeURIComponent(namespaceId);
+            return get(this, `namespaces/${nId}`, options);
+        }
+    }
+
+    class NotificationSettings extends BaseService {
+        all(_a = {}) {
+            var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+            let url = '';
+            if (projectId) {
+                url += `projects/${encodeURIComponent(projectId)}/`;
+            }
+            else if (groupId) {
+                url += `groups/${encodeURIComponent(groupId)}/`;
+            }
+            return get(this, `${url}notification_settings`, options);
+        }
+        edit(_a = {}) {
+            var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+            let url = '';
+            if (projectId) {
+                url += `projects/${encodeURIComponent(projectId)}/`;
+            }
+            else if (groupId) {
+                url += `groups/${encodeURIComponent(groupId)}/`;
+            }
+            return put(this, `${url}notification_settings`, options);
+        }
+    }
+
+    class Markdown extends BaseService {
+        render(text, options) {
+            return post(this, 'markdown', Object.assign({ text }, options));
+        }
+    }
+
+    class PagesDomains extends BaseService {
+        all(_a = {}) {
+            var { projectId } = _a, options = __rest(_a, ["projectId"]);
+            const url = projectId ? `projects/${encodeURIComponent(projectId)}/` : '';
+            return get(this, `${url}pages/domains`, options);
+        }
+        create(projectId, domain, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/pages/domains`, Object.assign({ domain }, options));
+        }
+        edit(projectId, domain, options) {
+            const pId = encodeURIComponent(projectId);
+            return put(this, `projects/${pId}/pages/domains/${domain}`, options);
+        }
+        show(projectId, domain, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/pages/domains/${domain}`, options);
+        }
+        remove(projectId, domain, options) {
+            const pId = encodeURIComponent(projectId);
+            return del(this, `projects/${pId}/pages/domains/${domain}`, options);
+        }
+    }
+
+    class Search extends BaseService {
+        all(scope, search, _a) {
+            var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+            let url = '';
+            if (projectId) {
+                url += `projects/${encodeURIComponent(projectId)}/`;
+            }
+            else if (groupId) {
+                url += `groups/${encodeURIComponent(groupId)}/`;
+            }
+            return get(this, `${url}search`, Object.assign({ scope, search }, options));
+        }
+    }
+
+    class SidekiqMetrics extends BaseService {
+        queueMetrics() {
+            return get(this, 'sidekiq/queue_metrics');
+        }
+        processMetrics() {
+            return get(this, 'sidekiq/process_metrics');
+        }
+        jobStats() {
+            return get(this, 'sidekiq/job_stats');
+        }
+        compoundMetrics() {
+            return get(this, 'sidekiq/compound_metrics');
+        }
+    }
+
+    class Snippets extends BaseService {
+        all(_a) {
+            var { public: p } = _a, options = __rest(_a, ["public"]);
+            const url = p ? 'snippets/public' : 'snippets';
+            return get(this, url, options);
+        }
+        content(snippetId, options) {
+            const sId = encodeURIComponent(snippetId);
+            return get(this, `snippets/${sId}/raw`, options);
+        }
+        create(title, fileName, content, visibility, options) {
+            return post(this, 'snippets', Object.assign({ title,
+                fileName,
+                content,
+                visibility }, options));
+        }
+        edit(snippetId, options) {
+            const sId = encodeURIComponent(snippetId);
+            return put(this, `snippets/${sId}`, options);
+        }
+        remove(snippetId, options) {
+            const sId = encodeURIComponent(snippetId);
+            return del(this, `snippets/${sId}`, options);
+        }
+        show(snippetId, options) {
+            const sId = encodeURIComponent(snippetId);
+            return get(this, `snippets/${sId}`, options);
+        }
+        userAgentDetails(snippetId, options) {
+            const sId = encodeURIComponent(snippetId);
+            return get(this, `snippets/${sId}/user_agent_detail`, options);
+        }
+    }
+
+    class SystemHooks extends BaseService {
+        add(url, options) {
+            return post(this, 'hooks', Object.assign({ url }, options));
+        }
+        all(options) {
+            return get(this, 'hooks', options);
+        }
+        edit(hookId, url, options) {
+            const hId = encodeURIComponent(hookId);
+            return put(this, `hooks/${hId}`, Object.assign({ url }, options));
+        }
+        remove(hookId, options) {
+            const hId = encodeURIComponent(hookId);
+            return del(this, `hooks/${hId}`, options);
+        }
+    }
+
+    class Version extends BaseService {
+        show(options) {
+            return get(this, 'version', options);
+        }
+    }
+
+    class Wikis extends BaseService {
+        all(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/wikis`, options);
+        }
+        create(projectId, options) {
+            const pId = encodeURIComponent(projectId);
+            return post(this, `projects/${pId}/wikis`, options);
+        }
+        edit(projectId, slug, options) {
+            const pId = encodeURIComponent(projectId);
+            return put(this, `projects/${pId}/wikis/${slug}`, options);
+        }
+        show(projectId, slug, options) {
+            const pId = encodeURIComponent(projectId);
+            return get(this, `projects/${pId}/wikis/${slug}`, options);
+        }
+        remove(projectId, slug, options) {
+            const pId = encodeURIComponent(projectId);
+            return del(this, `projects/${pId}/wikis/${slug}`, options);
+        }
+    }
+
+    // Groups
+
+    var APIServices = /*#__PURE__*/Object.freeze({
+        Groups: Groups,
+        GroupAccessRequests: GroupAccessRequests,
+        GroupBadges: GroupBadges,
+        GroupCustomAttributes: GroupCustomAttributes,
+        GroupIssueBoards: GroupIssueBoards,
+        GroupMembers: GroupMembers,
+        GroupMilestones: GroupMilestones,
+        GroupProjects: GroupProjects,
+        GroupVariables: GroupVariables,
+        Epics: Epics,
+        EpicIssues: EpicIssues,
+        EpicNotes: EpicNotes,
+        EpicDiscussions: EpicDiscussions,
+        Users: Users,
+        UserCustomAttributes: UserCustomAttributes,
+        UserEmails: UserEmails,
+        UserImpersonationTokens: UserImpersonationTokens,
+        UserKeys: UserKeys,
+        UserGPGKeys: UserGPGKeys,
+        Branches: Branches,
+        Commits: Commits,
+        CommitDiscussions: CommitDiscussions,
+        Deployments: Deployments,
+        DeployKeys: DeployKeys,
+        Environments: Environments,
+        Issues: Issues,
+        IssueNotes: IssueNotes,
+        IssueDiscussions: IssueDiscussions,
+        IssueAwardEmojis: IssueAwardEmojis,
+        Jobs: Jobs,
+        Labels: Labels,
+        MergeRequests: MergeRequests,
+        MergeRequestAwardEmojis: MergeRequestAwardEmojis,
+        MergeRequestDiscussions: MergeRequestDiscussions,
+        MergeRequestNotes: MergeRequestNotes,
+        Pipelines: Pipelines,
+        PipelineSchedules: PipelineSchedules,
+        PipelineScheduleVariables: PipelineScheduleVariables,
+        Projects: Projects,
+        ProjectAccessRequests: ProjectAccessRequests,
+        ProjectBadges: ProjectBadges,
+        ProjectCustomAttributes: ProjectCustomAttributes,
+        ProjectImportExport: ProjectImportExport,
+        ProjectIssueBoards: ProjectIssueBoards,
+        ProjectHooks: ProjectHooks,
+        ProjectMembers: ProjectMembers,
+        ProjectMilestones: ProjectMilestones,
+        ProjectSnippets: ProjectSnippets,
+        ProjectSnippetNotes: ProjectSnippetNotes,
+        ProjectSnippetDiscussions: ProjectSnippetDiscussions,
+        ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis,
+        ProtectedBranches: ProtectedBranches,
+        ProtectedTags: ProtectedTags,
+        ProjectVariables: ProjectVariables,
+        Repositories: Repositories,
+        RepositoryFiles: RepositoryFiles,
+        Runners: Runners,
+        Services: Services,
+        Tags: Tags,
+        Todos: Todos,
+        Triggers: Triggers,
+        PushRule: PushRule,
+        ApplicationSettings: ApplicationSettings,
+        BroadcastMessages: BroadcastMessages,
+        Events: Events,
+        FeatureFlags: FeatureFlags,
+        GeoNodes: GeoNodes,
+        GitignoreTemplates: GitignoreTemplates,
+        GitLabCIYMLTemplates: GitLabCIYMLTemplates,
+        Keys: Keys,
+        Licence: Licence,
+        LicenceTemplates: LicenceTemplates,
+        Lint: Lint,
+        Namespaces: Namespaces,
+        NotificationSettings: NotificationSettings,
+        Markdown: Markdown,
+        PagesDomains: PagesDomains,
+        Search: Search,
+        SidekiqMetrics: SidekiqMetrics,
+        Snippets: Snippets,
+        SystemHooks: SystemHooks,
+        Version: Version,
+        Wikis: Wikis
+    });
+
+    // Groups
+    const GroupsBundle = bundler({
+        Groups: Groups,
+        GroupAccessRequests: GroupAccessRequests,
+        GroupBadges: GroupBadges,
+        GroupCustomAttributes: GroupCustomAttributes,
+        GroupIssueBoards: GroupIssueBoards,
+        GroupMembers: GroupMembers,
+        GroupMilestones: GroupMilestones,
+        GroupProjects: GroupProjects,
+        GroupVariables: GroupVariables,
+        Epics: Epics,
+        EpicIssues: EpicIssues,
+        EpicNotes: EpicNotes,
+        EpicDiscussions: EpicDiscussions,
+    });
+    // Users
+    const UsersBundle = bundler({
+        Users: Users,
+        UserCustomAttributes: UserCustomAttributes,
+        UserEmails: UserEmails,
+        UserImpersonationTokens: UserImpersonationTokens,
+        UserKeys: UserKeys,
+        UserGPGKeys: UserGPGKeys,
+    });
+    // Projects
+    const ProjectsBundle = bundler({
+        Branches: Branches,
+        Commits: Commits,
+        CommitDiscussions: CommitDiscussions,
+        DeployKeys: DeployKeys,
+        Deployments: Deployments,
+        Environments: Environments,
+        Issues: Issues,
+        IssueAwardEmojis: IssueAwardEmojis,
+        IssueNotes: IssueNotes,
+        IssueDiscussions: IssueDiscussions,
+        Jobs: Jobs,
+        Labels: Labels,
+        MergeRequests: MergeRequests,
+        MergeRequestAwardEmojis: MergeRequestAwardEmojis,
+        MergeRequestDiscussions: MergeRequestDiscussions,
+        MergeRequestNotes: MergeRequestNotes,
+        Pipelines: Pipelines,
+        PipelineSchedules: PipelineSchedules,
+        PipelineScheduleVariables: PipelineScheduleVariables,
+        Projects: Projects,
+        ProjectAccessRequests: ProjectAccessRequests,
+        ProjectBadges: ProjectBadges,
+        ProjectCustomAttributes: ProjectCustomAttributes,
+        ProjectImportExport: ProjectImportExport,
+        ProjectIssueBoards: ProjectIssueBoards,
+        ProjectHooks: ProjectHooks,
+        ProjectMembers: ProjectMembers,
+        ProjectMilestones: ProjectMilestones,
+        ProjectSnippets: ProjectSnippets,
+        ProjectSnippetNotes: ProjectSnippetNotes,
+        ProjectSnippetDiscussions: ProjectSnippetDiscussions,
+        ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis,
+        ProtectedBranches: ProtectedBranches,
+        ProtectedTags: ProtectedTags,
+        ProjectVariables: ProjectVariables,
+        Repositories: Repositories,
+        RepositoryFiles: RepositoryFiles,
+        Runners: Runners,
+        Services: Services,
+        Tags: Tags,
+        Triggers: Triggers,
+    });
+    // All initialized
+    const Gitlab = bundler(APIServices);
+
+    exports.GroupsBundle = GroupsBundle;
+    exports.UsersBundle = UsersBundle;
+    exports.ProjectsBundle = ProjectsBundle;
+    exports.Gitlab = Gitlab;
+    exports.Groups = Groups;
+    exports.GroupAccessRequests = GroupAccessRequests;
+    exports.GroupBadges = GroupBadges;
+    exports.GroupCustomAttributes = GroupCustomAttributes;
+    exports.GroupIssueBoards = GroupIssueBoards;
+    exports.GroupMembers = GroupMembers;
+    exports.GroupMilestones = GroupMilestones;
+    exports.GroupProjects = GroupProjects;
+    exports.GroupVariables = GroupVariables;
+    exports.Epics = Epics;
+    exports.EpicIssues = EpicIssues;
+    exports.EpicNotes = EpicNotes;
+    exports.EpicDiscussions = EpicDiscussions;
+    exports.Users = Users;
+    exports.UserCustomAttributes = UserCustomAttributes;
+    exports.UserEmails = UserEmails;
+    exports.UserImpersonationTokens = UserImpersonationTokens;
+    exports.UserKeys = UserKeys;
+    exports.UserGPGKeys = UserGPGKeys;
+    exports.Branches = Branches;
+    exports.Commits = Commits;
+    exports.CommitDiscussions = CommitDiscussions;
+    exports.Deployments = Deployments;
+    exports.DeployKeys = DeployKeys;
+    exports.Environments = Environments;
+    exports.Issues = Issues;
+    exports.IssueNotes = IssueNotes;
+    exports.IssueDiscussions = IssueDiscussions;
+    exports.IssueAwardEmojis = IssueAwardEmojis;
+    exports.Jobs = Jobs;
+    exports.Labels = Labels;
+    exports.MergeRequests = MergeRequests;
+    exports.MergeRequestAwardEmojis = MergeRequestAwardEmojis;
+    exports.MergeRequestDiscussions = MergeRequestDiscussions;
+    exports.MergeRequestNotes = MergeRequestNotes;
+    exports.Pipelines = Pipelines;
+    exports.PipelineSchedules = PipelineSchedules;
+    exports.PipelineScheduleVariables = PipelineScheduleVariables;
+    exports.Projects = Projects;
+    exports.ProjectAccessRequests = ProjectAccessRequests;
+    exports.ProjectBadges = ProjectBadges;
+    exports.ProjectCustomAttributes = ProjectCustomAttributes;
+    exports.ProjectImportExport = ProjectImportExport;
+    exports.ProjectIssueBoards = ProjectIssueBoards;
+    exports.ProjectHooks = ProjectHooks;
+    exports.ProjectMembers = ProjectMembers;
+    exports.ProjectMilestones = ProjectMilestones;
+    exports.ProjectSnippets = ProjectSnippets;
+    exports.ProjectSnippetNotes = ProjectSnippetNotes;
+    exports.ProjectSnippetDiscussions = ProjectSnippetDiscussions;
+    exports.ProjectSnippetAwardEmojis = ProjectSnippetAwardEmojis;
+    exports.ProtectedBranches = ProtectedBranches;
+    exports.ProtectedTags = ProtectedTags;
+    exports.ProjectVariables = ProjectVariables;
+    exports.Repositories = Repositories;
+    exports.RepositoryFiles = RepositoryFiles;
+    exports.Runners = Runners;
+    exports.Services = Services;
+    exports.Tags = Tags;
+    exports.Todos = Todos;
+    exports.Triggers = Triggers;
+    exports.PushRule = PushRule;
+    exports.ApplicationSettings = ApplicationSettings;
+    exports.BroadcastMessages = BroadcastMessages;
+    exports.Events = Events;
+    exports.FeatureFlags = FeatureFlags;
+    exports.GeoNodes = GeoNodes;
+    exports.GitignoreTemplates = GitignoreTemplates;
+    exports.GitLabCIYMLTemplates = GitLabCIYMLTemplates;
+    exports.Keys = Keys;
+    exports.Licence = Licence;
+    exports.LicenceTemplates = LicenceTemplates;
+    exports.Lint = Lint;
+    exports.Namespaces = Namespaces;
+    exports.NotificationSettings = NotificationSettings;
+    exports.Markdown = Markdown;
+    exports.PagesDomains = PagesDomains;
+    exports.Search = Search;
+    exports.SidekiqMetrics = SidekiqMetrics;
+    exports.Snippets = Snippets;
+    exports.SystemHooks = SystemHooks;
+    exports.Version = Version;
+    exports.Wikis = Wikis;
+
+    Object.defineProperty(exports, '__esModule', { value: true });
+
+}));
--- a/node_modules/gitlab/dist/index.es.js
+++ b/node_modules/gitlab/dist/index.es.js
@@ -1 +1,2203 @@
-import Request from"got";import{decamelizeKeys}from"humps";import{stringify}from"query-string";import FormData from"form-data";import randomstring from"randomstring";var extendStatics=function(e,t){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)};function __extends(e,t){function o(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}var __assign=function(){return(__assign=Object.assign||function(e){for(var t,o=1,n=arguments.length;o<n;o++)for(var r in t=arguments[o])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function __rest(e,t){var o={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(o[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&(o[n[r]]=e[n[r]])}return o}function __awaiter(e,t,o,n){return new(o||(o=Promise))(function(r,s){function i(e){try{u(n.next(e))}catch(e){s(e)}}function p(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){e.done?r(e.value):new o(function(t){t(e.value)}).then(i,p)}u((n=n.apply(e,t||[])).next())})}function __generator(e,t){var o,n,r,s,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function p(s){return function(p){return function(s){if(o)throw new TypeError("Generator is already executing.");for(;i;)try{if(o=1,n&&(r=2&s[0]?n.return:s[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,s[1])).done)return r;switch(n=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,n=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(r=(r=i.trys).length>0&&r[r.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){i.label=s[1];break}if(6===s[0]&&i.label<r[1]){i.label=r[1],r=s;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(s);break}r[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],n=0}finally{o=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,p])}}}function __read(e,t){var o="function"==typeof Symbol&&e[Symbol.iterator];if(!o)return e;var n,r,s=o.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)i.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(o=s.return)&&o.call(s)}finally{if(r)throw r.error}}return i}function __spread(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(__read(arguments[t]));return e}function defaultRequest(e,t,o){var n=o.body,r=o.query,s=o.sudo;return[t,{baseUrl:e.url,headers:__assign({sudo:s},e.headers),query:r&&stringify(decamelizeKeys(r),{arrayFormat:"bracket"}),body:n&&decamelizeKeys(n),rejectUnauthorized:e.rejectUnauthorized,json:!0}]}function get(e,t,o){return void 0===o&&(o={}),__awaiter(this,void 0,void 0,function(){var n,r,s,i,p,u,c,a,d,l,_;return __generator(this,function(m){switch(m.label){case 0:return n=o.showPagination,r=o.maxPages,s=o.sudo,i=__rest(o,["showPagination","maxPages","sudo"]),p=defaultRequest(e,t,{query:i,sudo:s}),[4,Request.get.apply(Request,__spread(p))];case 1:return u=m.sent(),c=u.headers,a=u.body,d={total:c["x-total"],next:c["x-next-page"]||null,current:c["x-page"]||null,previous:c["x-prev-page"]||null,perPage:c["x-per-page"],totalPages:c["x-total-pages"]},l=!r||d.current<r,!i.page&&l&&d.next?[4,get(e,t,__assign({page:d.next},o))]:[3,3];case 2:return _=m.sent(),[2,__spread(a,_)];case 3:return[2,(i.page||r)&&n?{data:a,pagination:d}:a]}})})}function stream(e,t,o){return void 0===o&&(o={}),Request.stream.apply(Request,__spread(defaultRequest(e,t,{query:o})))}function post(e,t,o){return void 0===o&&(o={}),__awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(s){switch(s.label){case 0:return n=o.sudo,r=__rest(o,["sudo"]),[4,Request.post.apply(Request,__spread(defaultRequest(e,t,{body:r,sudo:n})))];case 1:return[2,s.sent().body]}})})}function put(e,t,o){return void 0===o&&(o={}),__awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){switch(r.label){case 0:return o.sudo,n=__rest(o,["sudo"]),[4,Request.put.apply(Request,__spread(defaultRequest(e,t,{body:n})))];case 1:return[2,r.sent().body]}})})}function del(e,t,o){return void 0===o&&(o={}),__awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){switch(r.label){case 0:return o.sudo,n=__rest(o,["sudo"]),[4,Request.delete.apply(Request,__spread(defaultRequest(e,t,{query:n})))];case 1:return[2,r.sent().body]}})})}var BaseService=function(){return function(e){var t=e.token,o=e.oauthToken,n=e.sudo,r=e.host,s=void 0===r?"https://gitlab.com":r,i=e.url,p=void 0===i?"":i,u=e.version,c=void 0===u?"v4":u,a=e.rejectUnauthorized,d=void 0===a||a,l=e.requester,_=void 0===l?Request:l;this.url=[s,"api",c,p].join("/"),this.headers={},this.rejectUnauthorized=d,this.requester=_,o?this.headers.authorization="Bearer "+o:t&&(this.headers["private-token"]=t),n&&(this.headers.Sudo=n)}}();function bundler(e){return function(t){var o=this;Object.entries(e||{}).forEach(function(e){var n=__read(e,2),r=n[0],s=n[1];o[r]=new s(t)})}}var Groups=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"groups",e)},t.prototype.create=function(e){return post(this,"groups",e)},t.prototype.createLDAPLink=function(e,t,o,n,r){return post(this,"groups/"+encodeURIComponent(e)+"/ldap_group_links",__assign({cn:t,groupAccess:o,provider:n},r))},t.prototype.edit=function(e,t){return put(this,"groups/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){return del(this,"groups/"+encodeURIComponent(e),t)},t.prototype.removeLDAPLink=function(e,t,o){void 0===o&&(o={});var n=o.provider,r=__rest(o,["provider"]);return del(this,"groups/"+encodeURIComponent(e)+"/ldap_group_links/"+(n?n+"/"+t:""+t),r)},t.prototype.search=function(e,t){return get(this,"groups",__assign({search:e},t))},t.prototype.show=function(e,t){return get(this,"groups/"+encodeURIComponent(e),t)},t.prototype.subgroups=function(e,t){return get(this,"groups/"+encodeURIComponent(e)+"/subgroups",t)},t.prototype.syncLDAP=function(e,t){return post(this,"groups/"+encodeURIComponent(e)+"/ldap_sync",t)},t}(BaseService),ResourceAccessRequests=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e){return get(this,encodeURIComponent(e)+"/access_requests")},t.prototype.request=function(e){return post(this,encodeURIComponent(e)+"/access_requests")},t.prototype.approve=function(e,t,o){var n=o.accessLevel,r=__read([e,t].map(encodeURIComponent),2);return post(this,r[0]+"/access_requests/"+r[1]+"/approve",{accessLevel:n})},t.prototype.deny=function(e,t){var o=__read([e,t].map(encodeURIComponent),2);return del(this,o[0]+"/access_requests/"+o[1])},t}(BaseService);function url(e,t,o,n,r){var s=__read([e,o].map(encodeURIComponent),2),i=[s[0],t,s[1]];return r&&i.push("notes",encodeURIComponent(r)),i.push(encodeURIComponent("award_emoji")),n&&i.push(encodeURIComponent(n)),i.join("/")}var ResourceAwardsEmojis=function(e){function t(t,o){var n=e.call(this,__assign({url:"projects"},o))||this;return n.resourceType=t,n}return __extends(t,e),t.prototype.all=function(e,t,o,n){return get(this,url(e,this.resourceType,t,null,o),n)},t.prototype.award=function(e,t,o,n,r){return post(this,url(e,this.resourceType,t,null,n),__assign({name:o},r))},t.prototype.remove=function(e,t,o,n,r){return del(this,url(e,this.resourceType,t,o,n),r)},t.prototype.show=function(e,t,o,n,r){return get(this,url(e,this.resourceType,t,o,n),r)},t}(BaseService),ResourceBadges=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.add=function(e,t){return post(this,encodeURIComponent(e)+"/badges",t)},t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/badges",t)},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,n[0]+"/badges/"+n[1],o)},t.prototype.preview=function(e,t,o,n){return get(this,encodeURIComponent(e)+"/badges/render",__assign({linkUrl:t,imageUrl:o},n))},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,n[0]+"/badges/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/badges/"+n[1],o)},t}(BaseService),ResourceCustomAttributes=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/custom_attributes",t)},t.prototype.set=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return put(this,r[0]+"/custom_attributes/"+r[1],__assign({value:o},n))},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,n[0]+"/custom_attributes/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/custom_attributes/"+n[1],o)},t}(BaseService),ResourceDiscussions=function(e){function t(t,o,n){var r=e.call(this,__assign({url:t},n))||this;return r.resource2Type=o,r}return __extends(t,e),t.prototype.addNote=function(e,t,o,n,r,s){if(!r)throw new Error("Missing required content argument");var i=__read([e,t,o,n].map(encodeURIComponent),4),p=i[0],u=i[1],c=i[2],a=i[3];return put(this,p+"/"+this.resource2Type+"/"+u+"/discussions/"+c+"/notes/"+a,__assign({body:r},s))},t.prototype.all=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2),r=n[0],s=n[1];return get(this,r+"/"+this.resource2Type+"/"+s+"/discussions",o)},t.prototype.create=function(e,t,o,n){if(!o)throw new Error("Missing required content argument");var r=__read([e,t].map(encodeURIComponent),2),s=r[0],i=r[1];return post(this,s+"/"+this.resource2Type+"/"+i+"/discussions",__assign({body:o},n))},t.prototype.editNote=function(e,t,o,n,r){var s=__read([e,t,o,n].map(encodeURIComponent),4),i=s[0],p=s[1],u=s[2],c=s[3];return put(this,i+"/"+this.resource2Type+"/"+p+"/discussions/"+u+"/notes/"+c,{body:r})},t.prototype.removeNote=function(e,t,o,n,r){var s=__read([e,t,o,n].map(encodeURIComponent),4),i=s[0],p=s[1],u=s[2],c=s[3];return del(this,i+"/"+this.resource2Type+"/"+p+"/discussions/"+u+"/notes/"+c,r)},t.prototype.show=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3),s=r[0],i=r[1],p=r[2];return get(this,s+"/"+this.resource2Type+"/"+i+"/discussions/"+p,n)},t}(BaseService),ResourceIssueBoards=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/boards",t)},t.prototype.create=function(e,t,o){return post(this,encodeURIComponent(e)+"/boards",__assign({name:t},o))},t.prototype.createList=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return post(this,r[0]+"/boards/"+r[1]+"/lists",__assign({labelId:o},n))},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,n[0]+"/boards/"+n[1],o)},t.prototype.editList=function(e,t,o,n,r){var s=__read([e,t,o].map(encodeURIComponent),3);return put(this,s[0]+"/boards/"+s[1]+"/lists/"+s[2],__assign({position:n},r))},t.prototype.lists=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/boards/"+n[1]+"/lists",o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,n[0]+"/boards/"+n[1],o)},t.prototype.removeList=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return del(this,r[0]+"/boards/"+r[1]+"/lists/"+r[2],n)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/boards/"+n[1],o)},t.prototype.showList=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return get(this,r[0]+"/boards/"+r[1]+"/lists/"+r[2],n)},t}(BaseService),ResourceMembers=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t,o){void 0===t&&(t=!1);var n=[encodeURIComponent(e),"members"];return t&&n.push("all"),get(this,n.join("/"),{options:o})},t.prototype.add=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2),s=r[0],i=r[1];return post(this,s+"/members",__assign({userId:i,accessLevel:o},n))},t.prototype.edit=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return put(this,r[0]+"/members/"+r[1],__assign({accessLevel:o},n))},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/members/"+n[1],o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,n[0]+"/members/"+n[1],o)},t}(BaseService),ResourceMilestones=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/milestones",t)},t.prototype.create=function(e,t,o){return post(this,encodeURIComponent(e)+"/milestones",__assign({title:t},o))},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,n[0]+"/milestones/"+n[1],o)},t.prototype.issues=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/milestones/"+n[1]+"/issues",o)},t.prototype.mergeRequests=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/milestones/"+n[1]+"/merge_requests",o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/milestones/"+n[1],o)},t}(BaseService),ResourceNotes=function(e){function t(t,o,n){var r=e.call(this,__assign({url:t},n))||this;return r.resource2Type=o,r}return __extends(t,e),t.prototype.all=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2),r=n[0],s=n[1];return get(this,r+"/"+this.resource2Type+"/"+s+"/notes",o)},t.prototype.create=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2),s=r[0],i=r[1];return post(this,s+"/"+this.resource2Type+"/"+i+"/notes",__assign({body:o},n))},t.prototype.edit=function(e,t,o,n,r){var s=__read([e,t,o].map(encodeURIComponent),3),i=s[0],p=s[1],u=s[2];return put(this,i+"/"+this.resource2Type+"/"+p+"/notes/"+u,__assign({body:n},r))},t.prototype.remove=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3),s=r[0],i=r[1],p=r[2];return del(this,s+"/"+this.resource2Type+"/"+i+"/notes/"+p,n)},t.prototype.show=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3),s=r[0],i=r[1],p=r[2];return get(this,s+"/"+this.resource2Type+"/"+i+"/notes/"+p,n)},t}(BaseService),ResourceTemplates=function(e){function t(t,o){return e.call(this,__assign({url:["templates",t].join("/")},o))||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"",e)},t.prototype.show=function(e,t){return post(this,""+encodeURIComponent(e),t)},t}(BaseService),ResourceVariables=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/variables",t)},t.prototype.create=function(e,t){return post(this,encodeURIComponent(e)+"/variables",t)},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,n[0]+"/variables/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,n[0]+"/variables/"+n[1],o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,n[0]+"/variables/"+n[1],o)},t}(BaseService),GroupAccessRequests=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceAccessRequests),GroupBadges=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceBadges),GroupCustomAttributes=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceCustomAttributes),GroupIssueBoards=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceIssueBoards),GroupMembers=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceMembers),GroupMilestones=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceMilestones),GroupProjects=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"groups/"+encodeURIComponent(e)+"/projects",t)},t.prototype.add=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"groups/"+n[0]+"/projects/"+n[1],o)},t}(BaseService),GroupVariables=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceVariables),Epics=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"groups/"+encodeURIComponent(e)+"/epics",t)},t.prototype.create=function(e,t,o){return post(this,"groups/"+encodeURIComponent(e)+"/epics",__assign({title:t},o))},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"groups/"+n[0]+"/epics/"+n[1],o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"groups/"+n[0]+"/epics/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"groups/"+n[0]+"/epics/"+n[1],o)},t}(BaseService),EpicIssues=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"groups/"+n[0]+"/epics/"+n[1]+"/issues",o)},t.prototype.assign=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return put(this,"groups/"+r[0]+"/epics/"+r[1]+"/issues/"+r[2],n)},t.prototype.edit=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return del(this,"groups/"+r[0]+"/epics/"+r[1]+"/issues/"+r[2],n)},t.prototype.remove=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return del(this,"groups/"+r[0]+"/epics/"+r[1]+"/issues/"+r[2],n)},t}(BaseService),EpicNotes=function(e){function t(t){return e.call(this,"groups","epics",t)||this}return __extends(t,e),t}(ResourceNotes),EpicDiscussions=function(e){function t(t){return e.call(this,"groups","epics",t)||this}return __extends(t,e),t}(ResourceDiscussions),Users=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"users",e)},t.prototype.activities=function(e){return get(this,"users/activities",e)},t.prototype.projects=function(e,t){return get(this,"users/"+encodeURIComponent(e)+"/projects",t)},t.prototype.block=function(e,t){return post(this,"users/"+encodeURIComponent(e)+"/block",t)},t.prototype.create=function(e){return post(this,"users",e)},t.prototype.current=function(e){return get(this,"user",e)},t.prototype.edit=function(e,t){return put(this,"users/"+encodeURIComponent(e),t)},t.prototype.events=function(e,t){return get(this,"users/"+encodeURIComponent(e)+"/events",t)},t.prototype.session=function(e,t,o){return post(this,"session",__assign({email:e,password:t},o))},t.prototype.search=function(e,t){return get(this,"users",__assign({search:e},t))},t.prototype.show=function(e,t){return get(this,"users/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){return del(this,"users/"+encodeURIComponent(e),t)},t.prototype.unblock=function(e,t){return post(this,"users/"+encodeURIComponent(e)+"/unblock",t)},t}(BaseService),UserCustomAttributes=function(e){function t(t){return e.call(this,"users",t)||this}return __extends(t,e),t}(ResourceCustomAttributes),url$1=function(e){return e?"users/"+encodeURIComponent(e)+"/emails":"user/emails"},UserEmails=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.userId,o=__rest(e,["userId"]);return get(this,url$1(t),o)},t.prototype.add=function(e,t){void 0===t&&(t={});var o=t.userId,n=__rest(t,["userId"]);return post(this,url$1(o),__assign({email:e},n))},t.prototype.show=function(e,t){return get(this,"user/emails/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){void 0===t&&(t={});var o=t.userId,n=__rest(t,["userId"]),r=encodeURIComponent(e);return del(this,url$1(o)+"/"+r,n)},t}(BaseService),UserImpersonationTokens=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"users/"+encodeURIComponent(e)+"/impersonation_tokens",t)},t.prototype.add=function(e,t,o,n,r){return post(this,"users/"+encodeURIComponent(e)+"/impersonation_tokens",__assign({name:t,expiresAt:n,scopes:o},r))},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"users/"+n[0]+"/impersonation_tokens/"+n[1],o)},t.prototype.revoke=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"users/"+n[0]+"/impersonation_tokens/"+n[1],o)},t}(BaseService),url$2=function(e){return e?"users/"+encodeURIComponent(e)+"/keys":"user/keys"},UserKeys=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.userId,o=__rest(e,["userId"]);return get(this,url$2(t),o)},t.prototype.create=function(e,t,o){void 0===o&&(o={});var n=o.userId,r=__rest(o,["userId"]);return post(this,url$2(n),__assign({title:e,key:t},r))},t.prototype.show=function(e,t){return get(this,"user/keys/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){void 0===t&&(t={});var o=t.userId,n=__rest(t,["userId"]),r=encodeURIComponent(e);return del(this,url$2(o)+"/"+r,n)},t}(BaseService),url$3=function(e){return e?"users/"+encodeURIComponent(e)+"/gpg_keys":"users/gpg_keys"},UserGPGKeys=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.userId,o=__rest(e,["userId"]);return get(this,url$3(t),o)},t.prototype.add=function(e,t,o){void 0===o&&(o={});var n=o.userId,r=__rest(o,["userId"]);return post(this,url$3(n),__assign({title:e,key:t},r))},t.prototype.show=function(e,t){void 0===t&&(t={});var o=t.userId,n=__rest(t,["userId"]),r=encodeURIComponent(e);return get(this,url$3(o)+"/"+r,n)},t.prototype.remove=function(e,t){void 0===t&&(t={});var o=t.userId,n=__rest(t,["userId"]),r=encodeURIComponent(e);return del(this,url$3(o)+"/"+r,n)},t}(BaseService),Branches=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/branches",t)},t.prototype.create=function(e,t,o,n){return post(this,"projects/"+encodeURIComponent(e)+"/repository/branches",__assign({branch:t,ref:o},n))},t.prototype.protect=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/protected_branches",__assign({name:t},o))},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/repository/branches/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/repository/branches/"+n[1],o)},t.prototype.unprotect=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/repository/branches/"+n[1]+"/unprotect",o)},t}(BaseService),Commits=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits",t)},t.prototype.cherryPick=function(e,t,o,n){return post(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/cherry_pick",__assign({branch:o},n))},t.prototype.comments=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/comments",o)},t.prototype.create=function(e,t,o,n,r){return void 0===n&&(n=[]),post(this,"projects/"+encodeURIComponent(e)+"/repository/commits",__assign({branch:t,commitMessage:o,actions:n},r))},t.prototype.createComment=function(e,t,o,n){return post(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/comments",__assign({note:o},n))},t.prototype.diff=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/diff",o)},t.prototype.editStatus=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/statuses/"+t,o)},t.prototype.references=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/refs",o)},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t,o)},t.prototype.status=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/statuses",o)},t}(BaseService),CommitDiscussions=function(e){function t(t){return e.call(this,"projects","commits",t)||this}return __extends(t,e),t}(ResourceDiscussions),Deployments=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/deployments",t)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/deployments/"+n[1],o)},t}(BaseService),DeployKeys=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.add=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/deploy_keys",t)},t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/deploy_keys",t)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/deploy_keys/"+n[1],o)},t.prototype.enable=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/deploy_keys/"+n[1]+"/enable",o)},t}(BaseService),Environments=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/environments",t)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/environments",t)},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/environments/"+n[1],o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/environments/"+n[1],o)},t.prototype.stop=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/environments/"+n[1]+"/stop",o)},t}(BaseService),Issues=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.addSpentTime=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/issues/"+r[1]+"/add_spent_time",__assign({duration:o},n))},t.prototype.addTimeEstimate=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/issues/"+r[1]+"/time_estimate",__assign({duration:o},n))},t.prototype.all=function(e){var t=e.projectId,o=__rest(e,["projectId"]);return get(this,t?"projects/"+encodeURIComponent(t)+"/issues":"issues",o)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/issues",t)},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/issues/"+n[1],o)},t.prototype.link=function(e,t,o,n,r){var s=__read([e,t].map(encodeURIComponent),2),i=s[0],p=s[1],u=__read([o,n].map(encodeURIComponent),2),c=u[0],a=u[1];return post(this,"projects/"+i+"/issues/"+p+"/links",__assign({targetProjectId:c,targetIssueId:a},r))},t.prototype.participants=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/issues/"+n[1]+"/participants",o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/issues/"+n[1],o)},t.prototype.resetSpentTime=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/issues/"+n[1]+"/reset_spent_time",o)},t.prototype.resetTimeEstimate=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/issues/"+n[1]+"/reset_time_estimate",o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/issues/"+n[1],o)},t.prototype.subscribe=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/issues/"+n[1]+"/subscribe",o)},t.prototype.timeStats=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/issues/"+n[1]+"/time_stats",o)},t.prototype.unsubscribe=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/issues/"+n[1]+"/unsubscribe",o)},t}(BaseService),IssueNotes=function(e){function t(t){return e.call(this,"projects","issues",t)||this}return __extends(t,e),t}(ResourceNotes),IssueDiscussions=function(e){function t(t){return e.call(this,"projects","issues",t)||this}return __extends(t,e),t}(ResourceDiscussions),IssueAwardEmojis=function(e){function t(t){return e.call(this,"issues",t)||this}return __extends(t,e),t}(ResourceAwardsEmojis),Jobs=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/jobs",t)},t.prototype.cancel=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/jobs/"+n[1]+"/cancel",o)},t.prototype.downloadSingleArtifactFile=function(e,t,o,n){var r=n.stream,s=void 0!==r&&r,i=__rest(n,["stream"]),p=__read([e,t].map(encodeURIComponent),2),u=p[0],c=p[1];return s?stream(this,"projects/"+u+"/jobs/"+c+"/artifacts/"+o,i):get(this,"projects/"+u+"/jobs/"+c+"/artifacts/"+o,i)},t.prototype.downloadLatestArtifactFile=function(e,t,o,n){var r=n.stream,s=void 0!==r&&r,i=__rest(n,["stream"]),p=__read([e,t,o].map(encodeURIComponent),3),u=p[0],c=p[1],a=p[2];return s?stream(this,"projects/"+u+"/jobs/artifacts/"+c+"/download?job="+a,i):get(this,"projects/"+u+"/jobs/artifacts/"+c+"/download?job="+a,i)},t.prototype.downloadTraceFile=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/jobs/"+n[1]+"/trace",o)},t.prototype.erase=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/jobs/"+n[1]+"/erase",o)},t.prototype.keepArtifacts=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/jobs/"+n[1]+"/artifacts/keep",o)},t.prototype.play=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/jobs/"+n[1]+"/play",o)},t.prototype.retry=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/jobs/"+n[1]+"/retry",o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/jobs/"+n[1],o)},t.prototype.showPipelineJobs=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/pipelines/"+n[1]+"/jobs",o)},t}(BaseService),Labels=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/labels",t)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/labels",t)},t.prototype.edit=function(e,t,o){return put(this,"projects/"+encodeURIComponent(e)+"/labels",__assign({name:t},o))},t.prototype.remove=function(e,t,o){return del(this,"projects/"+encodeURIComponent(e)+"/labels",__assign({name:t},o))},t.prototype.subscribe=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/issues/"+n[1]+"/subscribe",o)},t.prototype.unsubscribe=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/issues/"+n[1]+"/unsubscribe",o)},t}(BaseService),MergeRequests=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.accept=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/merge",o)},t.prototype.addSpentTime=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/issues/"+r[1]+"/add_spent_time",__assign({duration:o},n))},t.prototype.addTimeEstimate=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/issues/"+r[1]+"/time_estimate",__assign({duration:o},n))},t.prototype.all=function(e){var t=e.projectId,o=e.groupId,n=__rest(e,["projectId","groupId"]);return get(this,t?"projects/"+encodeURIComponent(t)+"/merge_requests":o?"groups/"+encodeURIComponent(o)+"/merge_requests":"merge_requests",n)},t.prototype.approve=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/approve",o)},t.prototype.approvals=function(e,t){var o=t.mergerequestIId,n=__rest(t,["mergerequestIId"]),r=__read([e,o].map(encodeURIComponent),2),s=r[0],i=r[1];return get(this,o?"projects/"+s+"/merge_requests/"+i+"/approvals":"projects/"+s+"/approvals",n)},t.prototype.approvers=function(e,t,o,n){var r=n.mergerequestIId,s=__rest(n,["mergerequestIId"]),i=__read([e,r].map(encodeURIComponent),2),p=i[0],u=i[1];return post(this,r?"projects/"+p+"/merge_requests/"+u+"/approvals":"projects/"+p+"/approvals",__assign({approverIds:t,approverGroupIds:o},s))},t.prototype.cancelOnPipelineSucess=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/cancel_merge_when_pipeline_succeeds",o)},t.prototype.changes=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/changes",o)},t.prototype.closesIssues=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/closes_issues",o)},t.prototype.commits=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/commits",o)},t.prototype.create=function(e,t,o,n,r){var s=encodeURIComponent(e);return post(this,"projects/"+s+"/merge_requests",__assign({id:s,sourceBranch:t,targetBranch:o,title:n},r))},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/merge_requests/"+n[1],o)},t.prototype.editApprovals=function(e,t){var o=t.mergerequestIId,n=__rest(t,["mergerequestIId"]),r=__read([e,o].map(encodeURIComponent),2),s=r[0],i=r[1];return post(this,o?"projects/"+s+"/merge_requests/"+i+"/approvals":"projects/"+s+"/approvals",n)},t.prototype.pipelines=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/pipelines",o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/merge_requests/"+n[1],o)},t.prototype.resetSpentTime=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/reset_spent_time",o)},t.prototype.resetTimeEstimate=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/reset_time_estimate",o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/merge_requests/"+n[1],o)},t.prototype.timeStats=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/time_stats",o)},t.prototype.version=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return get(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/versions/"+r[2],n)},t.prototype.versions=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/versions",o)},t.prototype.unapprove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/approve",o)},t.prototype.unsubscribe=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/unsubscribe",o)},t}(BaseService),MergeRequestAwardEmojis=function(e){function t(t){return e.call(this,"merge_requests",t)||this}return __extends(t,e),t}(ResourceAwardsEmojis),MergeRequestDiscussions=function(e){function t(t){return e.call(this,"projects","merge_requests",t)||this}return __extends(t,e),t}(ResourceDiscussions),MergeRequestNotes=function(e){function t(t){return e.call(this,"projects","merge_requests",t)||this}return __extends(t,e),t}(ResourceNotes),Pipelines=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/pipelines",t)},t.prototype.create=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/pipeline",__assign({ref:t},o))},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/pipelines/"+t,o)},t.prototype.retry=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/pipelines/"+t+"/retry",o)},t.prototype.cancel=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/pipelines/"+t+"/cancel",o)},t.prototype.showJobs=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/pipelines/"+t+"/jobs",o)},t}(BaseService),PipelineSchedules=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/pipeline_schedules",t)},t.prototype.create=function(e,t,o,n,r){return post(this,"projects/"+encodeURIComponent(e)+"/pipeline_schedules",__assign({description:t,ref:o,cron:n},r))},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1],o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1],o)},t.prototype.takeOwnership=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/take_ownership",o)},t}(BaseService),PipelineScheduleVariables=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/variables",o)},t.prototype.create=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/variables",o)},t.prototype.edit=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return put(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/variables/"+r[2],n)},t.prototype.show=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return get(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/variables/"+r[2],n)},t.prototype.remove=function(e,t,o,n){var r=__read([e,t,o].map(encodeURIComponent),3);return del(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/variables/"+r[2],n)},t}(BaseService),Projects=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"projects",e)},t.prototype.archive=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/archive",t)},t.prototype.create=function(e){var t=e.userId,o=__rest(e,["userId"]);return post(this,t?"projects/user/"+encodeURIComponent(t):"projects",o)},t.prototype.edit=function(e,t){return put(this,"projects/"+encodeURIComponent(e),t)},t.prototype.events=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/events",t)},t.prototype.fork=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/fork",t)},t.prototype.forks=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/forks",t)},t.prototype.languages=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/languages",t)},t.prototype.mirrorPull=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/mirror/pull",t)},t.prototype.remove=function(e,t){return del(this,"projects/"+encodeURIComponent(e),t)},t.prototype.search=function(e){return get(this,"projects",{search:e})},t.prototype.share=function(e,t,o,n){return post(this,"projects/"+encodeURIComponent(e)+"/share",__assign({groupId:t,groupAccess:o},n))},t.prototype.show=function(e,t){return get(this,"projects/"+encodeURIComponent(e),t)},t.prototype.star=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/star",t)},t.prototype.statuses=function(e,t,o,n){return post(this,"projects/"+encodeURIComponent(e)+"/statuses/"+t,__assign({state:o},n))},t.prototype.transfer=function(e,t){return put(this,"projects/"+encodeURIComponent(e)+"/transfer",{namespace:t})},t.prototype.unarchive=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/unarchive",t)},t.prototype.unshare=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/share"+n[1],o)},t.prototype.unstar=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/unstar",t)},t.prototype.updatePushRule=function(e,t){return put(this,"projects/"+encodeURIComponent(e)+"/push_rule",t)},t.prototype.upload=function(e,t,o){var n=o.fileName,r=void 0===n?randomstring(8):n,s=encodeURIComponent(e),i=new FormData;return i.append(r,{file:{value:t,options:{filename:r,contentType:"application/octet-stream"}}}),post(this,"projects/"+s+"/uploads",i)},t}(BaseService),ProjectAccessRequests=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceAccessRequests),ProjectBadges=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceBadges),ProjectCustomAttributes=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceCustomAttributes),ProjectImportExport=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.download=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/export/download",t)},t.prototype.exportStatus=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/export",t)},t.prototype.import=function(e,t,o){var n=new FormData;return n.append(t,{file:{value:e,options:{filename:t,contentType:"application/octet-stream"}}}),post(this,"projects/import",__assign({},n,o))},t.prototype.importStatus=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/import",t)},t.prototype.schedule=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/export",t)},t}(BaseService),ProjectIssueBoards=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceIssueBoards),ProjectHooks=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/hooks",t)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/hooks/"+n[1],o)},t.prototype.add=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/hooks",__assign({url:t},o))},t.prototype.edit=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/hooks/"+r[1],__assign({url:o},n))},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/hooks/"+n[1],o)},t}(BaseService),ProjectMembers=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceMembers),ProjectMilestones=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceMilestones),ProjectSnippets=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/snippets",t)},t.prototype.content=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/snippets/"+n[1]+"/raw",o)},t.prototype.create=function(e,t,o,n,r,s){return post(this,"projects/"+encodeURIComponent(e)+"/snippets",__assign({title:t,fileName:o,code:n,visibility:r},s))},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/snippets/"+n[1],o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/snippets/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/snippets/"+n[1],o)},t.prototype.userAgentDetails=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/snippets/"+n[1]+"/user_agent_detail",o)},t}(BaseService),ProjectSnippetNotes=function(e){function t(t){return e.call(this,"projects","snippets",t)||this}return __extends(t,e),t}(ResourceNotes),ProjectSnippetDiscussions=function(e){function t(t){return e.call(this,"projects","snippets",t)||this}return __extends(t,e),t}(ResourceDiscussions),ProjectSnippetAwardEmojis=function(e){function t(t){return e.call(this,"issues",t)||this}return __extends(t,e),t}(ResourceAwardsEmojis),ProtectedBranches=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/protected_branches",t)},t.prototype.protect=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/protected_branches",__assign({name:t},o))},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/protected_branches/"+n[1],o)},t.prototype.unprotect=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/protected_branches/"+n[1],o)},t}(BaseService),ProtectedTags=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/protected_tags",t)},t.prototype.protect=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/protected_tags",__assign({name:t},o))},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/protected_tags/"+n[1],o)},t.prototype.unprotect=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/protected_tags/"+n[1],o)},t}(BaseService),ProjectVariables=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceVariables),Repositories=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.compare=function(e,t,o,n){return get(this,"projects/"+encodeURIComponent(e)+"/repository/compare",__assign({from:t,to:o},n))},t.prototype.contributors=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/contributors",t)},t.prototype.showArchive=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/archive",t)},t.prototype.showBlob=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/blobs/"+t,o)},t.prototype.showBlobRaw=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/blobs/"+t+"/raw",o)},t.prototype.tree=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/tree",t)},t}(BaseService),RepositoryFiles=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.create=function(e,t,o,n,r){var s=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+s[0]+"/repository/files/"+s[1],__assign({branch:o,content:n},r))},t.prototype.edit=function(e,t,o,n,r){var s=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+s[0]+"/repository/files/"+s[1],__assign({branch:o,content:n},r))},t.prototype.remove=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/repository/files/"+r[1],__assign({branch:o},n))},t.prototype.show=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/repository/files/"+r[1],__assign({ref:o},n))},t.prototype.showRaw=function(e,t,o,n){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/repository/files/"+r[1]+"/raw",__assign({ref:o},n))},t}(BaseService),Runners=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){var t=e.projectId,o=__rest(e,["projectId"]);return get(this,t?"projects/"+encodeURIComponent(t)+"/runners":"runners/all",o)},t.prototype.allOwned=function(e){return get(this,"runners",e)},t.prototype.edit=function(e,t){return put(this,"runners/"+encodeURIComponent(e),t)},t.prototype.enable=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2),r=n[0],s=n[1];return post(this,"projects/"+r+"/runners",__assign({runnerId:s},o))},t.prototype.disable=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/runners/"+n[1],o)},t.prototype.jobs=function(e,t){return get(this,"runners/"+encodeURIComponent(e)+"/jobs",t)},t.prototype.remove=function(e,t){return del(this,"runners/"+encodeURIComponent(e),t)},t.prototype.show=function(e,t){return get(this,"runners/"+encodeURIComponent(e),t)},t}(BaseService),Services=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.edit=function(e,t,o){return put(this,"projects/"+encodeURIComponent(e)+"/services/"+t,o)},t.prototype.remove=function(e,t,o){return del(this,"projects/"+encodeURIComponent(e)+"/services/"+t,o)},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/services/"+t,o)},t}(BaseService),Tags=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/tags",t)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/repository/tags",t)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/repository/tags/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/repository/tags/"+n[1],o)},t}(BaseService),Todos=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"todos",e)},t.prototype.create=function(e,t,o){return post(this,"projects/"+e+"/merge_requests/"+t+"/todo",o)},t.prototype.done=function(e){var t=e.todoId,o="mark_as_done";return t&&(o=t+"/"+o),del(this,"todos/"+o,__rest(e,["todoId"]))},t}(BaseService),Triggers=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.add=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/triggers",t)},t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/triggers",t)},t.prototype.edit=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/triggers/"+n[1],o)},t.prototype.remove=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/triggers/"+n[1],o)},t.prototype.show=function(e,t,o){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/triggers/"+n[1],o)},t}(BaseService),PushRule=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/push_rule",t)},t.prototype.edit=function(e,t){t.upsert;var o=__rest(t,["upsert"]),n=encodeURIComponent(e);try{return put(this,"projects/"+n+"/push_rule",o)}catch(t){if(t.message.includes("exist"))return this.create(e,o);throw t}},t.prototype.remove=function(e,t){return del(this,"projects/"+encodeURIComponent(e)+"/push_rule",t)},t.prototype.show=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/push_rule",t)},t}(BaseService),ApplicationSettings=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"application/settings",e)},t.prototype.edit=function(e){return put(this,"application/settings",e)},t}(BaseService),BroadcastMessages=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"broadcast_messages",e)},t.prototype.create=function(e){return post(this,"broadcast_messages",e)},t.prototype.edit=function(e,t){return put(this,"broadcast_messages/"+encodeURIComponent(e),t)},t.prototype.remove=function(e){return del(this,"broadcast_messages/"+encodeURIComponent(e))},t.prototype.show=function(e,t){return get(this,"broadcast_messages/"+encodeURIComponent(e),t)},t}(BaseService),Events=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"events",e)},t}(BaseService),FeatureFlags=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"features",e)},t.prototype.set=function(e,t){return post(this,"features/"+encodeURIComponent(e),t)},t}(BaseService),GeoNodes=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"geo_nodes",e)},t.prototype.create=function(e,t){return post(this,"geo_nodes/"+encodeURIComponent(e),t)},t.prototype.edit=function(e,t){return put(this,"geo_nodes/"+encodeURIComponent(e),t)},t.prototype.failures=function(e){return post(this,"geo_nodes/current/failures",e)},t.prototype.repair=function(e,t){return del(this,"geo_nodes/"+encodeURIComponent(e),t)},t.prototype.show=function(e,t){return get(this,"geo_nodes/"+encodeURIComponent(e),t)},t.prototype.status=function(e,t){return get(this,"geo_nodes/"+encodeURIComponent(e)+"/status",t)},t.prototype.statuses=function(e){return get(this,"geo_nodes/statuses",e)},t}(BaseService),GitignoreTemplates=function(e){function t(t){return e.call(this,"gitignores",t)||this}return __extends(t,e),t}(ResourceTemplates),GitLabCIYMLTemplates=function(e){function t(t){return e.call(this,"gitlab_ci_ymls",t)||this}return __extends(t,e),t}(ResourceTemplates),Keys=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.show=function(e,t){return get(this,"keys/"+encodeURIComponent(e),t)},t}(BaseService),Licence=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"licence",e)},t.prototype.create=function(e){return post(this,"licence",e)},t}(BaseService),LicenceTemplates=function(e){function t(t){return e.call(this,"licences",t)||this}return __extends(t,e),t}(ResourceTemplates),Lint=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.lint=function(e,t){return post(this,"lint",__assign({content:e},t))},t}(BaseService),Namespaces=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"namespaces",e)},t.prototype.show=function(e,t){return get(this,"namespaces/"+encodeURIComponent(e),t)},t}(BaseService),NotificationSettings=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.projectId,o=e.groupId,n=__rest(e,["projectId","groupId"]),r="";return t?r+="projects/"+encodeURIComponent(t)+"/":o&&(r+="groups/"+encodeURIComponent(o)+"/"),get(this,r+"notification_settings",n)},t.prototype.edit=function(e){void 0===e&&(e={});var t=e.projectId,o=e.groupId,n=__rest(e,["projectId","groupId"]),r="";return t?r+="projects/"+encodeURIComponent(t)+"/":o&&(r+="groups/"+encodeURIComponent(o)+"/"),put(this,r+"notification_settings",n)},t}(BaseService),Markdown=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(e,t){return post(this,"markdown",__assign({text:e},t))},t}(BaseService),PagesDomains=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.projectId,o=__rest(e,["projectId"]);return get(this,(t?"projects/"+encodeURIComponent(t)+"/":"")+"pages/domains",o)},t.prototype.create=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/pages/domains",__assign({domain:t},o))},t.prototype.edit=function(e,t,o){return put(this,"projects/"+encodeURIComponent(e)+"/pages/domains/"+t,o)},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/pages/domains/"+t,o)},t.prototype.remove=function(e,t,o){return del(this,"projects/"+encodeURIComponent(e)+"/pages/domains/"+t,o)},t}(BaseService),Search=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t,o){var n=o.projectId,r=o.groupId,s=__rest(o,["projectId","groupId"]),i="";return n?i+="projects/"+encodeURIComponent(n)+"/":r&&(i+="groups/"+encodeURIComponent(r)+"/"),get(this,i+"search",__assign({scope:e,search:t},s))},t}(BaseService),SidekiqMetrics=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.queueMetrics=function(){return get(this,"sidekiq/queue_metrics")},t.prototype.processMetrics=function(){return get(this,"sidekiq/process_metrics")},t.prototype.jobStats=function(){return get(this,"sidekiq/job_stats")},t.prototype.compoundMetrics=function(){return get(this,"sidekiq/compound_metrics")},t}(BaseService),Snippets=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,e.public?"snippets/public":"snippets",__rest(e,["public"]))},t.prototype.content=function(e,t){return get(this,"snippets/"+encodeURIComponent(e)+"/raw",t)},t.prototype.create=function(e,t,o,n,r){return post(this,"snippets",__assign({title:e,fileName:t,content:o,visibility:n},r))},t.prototype.edit=function(e,t){return put(this,"snippets/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){return del(this,"snippets/"+encodeURIComponent(e),t)},t.prototype.show=function(e,t){return get(this,"snippets/"+encodeURIComponent(e),t)},t.prototype.userAgentDetails=function(e,t){return get(this,"snippets/"+encodeURIComponent(e)+"/user_agent_detail",t)},t}(BaseService),SystemHooks=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.add=function(e,t){return post(this,"hooks",__assign({url:e},t))},t.prototype.all=function(e){return get(this,"hooks",e)},t.prototype.edit=function(e,t,o){return put(this,"hooks/"+encodeURIComponent(e),__assign({url:t},o))},t.prototype.remove=function(e,t){return del(this,"hooks/"+encodeURIComponent(e),t)},t}(BaseService),Version=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.show=function(e){return get(this,"version",e)},t}(BaseService),Wikis=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/wikis",t)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/wikis",t)},t.prototype.edit=function(e,t,o){return put(this,"projects/"+encodeURIComponent(e)+"/wikis/"+t,o)},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/wikis/"+t,o)},t.prototype.remove=function(e,t,o){return del(this,"projects/"+encodeURIComponent(e)+"/wikis/"+t,o)},t}(BaseService),APIServices=Object.freeze({Groups:Groups,GroupAccessRequests:GroupAccessRequests,GroupBadges:GroupBadges,GroupCustomAttributes:GroupCustomAttributes,GroupIssueBoards:GroupIssueBoards,GroupMembers:GroupMembers,GroupMilestones:GroupMilestones,GroupProjects:GroupProjects,GroupVariables:GroupVariables,Epics:Epics,EpicIssues:EpicIssues,EpicNotes:EpicNotes,EpicDiscussions:EpicDiscussions,Users:Users,UserCustomAttributes:UserCustomAttributes,UserEmails:UserEmails,UserImpersonationTokens:UserImpersonationTokens,UserKeys:UserKeys,UserGPGKeys:UserGPGKeys,Branches:Branches,Commits:Commits,CommitDiscussions:CommitDiscussions,Deployments:Deployments,DeployKeys:DeployKeys,Environments:Environments,Issues:Issues,IssueNotes:IssueNotes,IssueDiscussions:IssueDiscussions,IssueAwardEmojis:IssueAwardEmojis,Jobs:Jobs,Labels:Labels,MergeRequests:MergeRequests,MergeRequestAwardEmojis:MergeRequestAwardEmojis,MergeRequestDiscussions:MergeRequestDiscussions,MergeRequestNotes:MergeRequestNotes,Pipelines:Pipelines,PipelineSchedules:PipelineSchedules,PipelineScheduleVariables:PipelineScheduleVariables,Projects:Projects,ProjectAccessRequests:ProjectAccessRequests,ProjectBadges:ProjectBadges,ProjectCustomAttributes:ProjectCustomAttributes,ProjectImportExport:ProjectImportExport,ProjectIssueBoards:ProjectIssueBoards,ProjectHooks:ProjectHooks,ProjectMembers:ProjectMembers,ProjectMilestones:ProjectMilestones,ProjectSnippets:ProjectSnippets,ProjectSnippetNotes:ProjectSnippetNotes,ProjectSnippetDiscussions:ProjectSnippetDiscussions,ProjectSnippetAwardEmojis:ProjectSnippetAwardEmojis,ProtectedBranches:ProtectedBranches,ProtectedTags:ProtectedTags,ProjectVariables:ProjectVariables,Repositories:Repositories,RepositoryFiles:RepositoryFiles,Runners:Runners,Services:Services,Tags:Tags,Todos:Todos,Triggers:Triggers,PushRule:PushRule,ApplicationSettings:ApplicationSettings,BroadcastMessages:BroadcastMessages,Events:Events,FeatureFlags:FeatureFlags,GeoNodes:GeoNodes,GitignoreTemplates:GitignoreTemplates,GitLabCIYMLTemplates:GitLabCIYMLTemplates,Keys:Keys,Licence:Licence,LicenceTemplates:LicenceTemplates,Lint:Lint,Namespaces:Namespaces,NotificationSettings:NotificationSettings,Markdown:Markdown,PagesDomains:PagesDomains,Search:Search,SidekiqMetrics:SidekiqMetrics,Snippets:Snippets,SystemHooks:SystemHooks,Version:Version,Wikis:Wikis}),GroupsBundle=bundler({Groups:Groups,GroupAccessRequests:GroupAccessRequests,GroupBadges:GroupBadges,GroupCustomAttributes:GroupCustomAttributes,GroupIssueBoards:GroupIssueBoards,GroupMembers:GroupMembers,GroupMilestones:GroupMilestones,GroupProjects:GroupProjects,GroupVariables:GroupVariables,Epics:Epics,EpicIssues:EpicIssues,EpicNotes:EpicNotes,EpicDiscussions:EpicDiscussions}),UsersBundle=bundler({Users:Users,UserCustomAttributes:UserCustomAttributes,UserEmails:UserEmails,UserImpersonationTokens:UserImpersonationTokens,UserKeys:UserKeys,UserGPGKeys:UserGPGKeys}),ProjectsBundle=bundler({Branches:Branches,Commits:Commits,CommitDiscussions:CommitDiscussions,DeployKeys:DeployKeys,Deployments:Deployments,Environments:Environments,Issues:Issues,IssueAwardEmojis:IssueAwardEmojis,IssueNotes:IssueNotes,IssueDiscussions:IssueDiscussions,Jobs:Jobs,Labels:Labels,MergeRequests:MergeRequests,MergeRequestAwardEmojis:MergeRequestAwardEmojis,MergeRequestDiscussions:MergeRequestDiscussions,MergeRequestNotes:MergeRequestNotes,Pipelines:Pipelines,PipelineSchedules:PipelineSchedules,PipelineScheduleVariables:PipelineScheduleVariables,Projects:Projects,ProjectAccessRequests:ProjectAccessRequests,ProjectBadges:ProjectBadges,ProjectCustomAttributes:ProjectCustomAttributes,ProjectImportExport:ProjectImportExport,ProjectIssueBoards:ProjectIssueBoards,ProjectHooks:ProjectHooks,ProjectMembers:ProjectMembers,ProjectMilestones:ProjectMilestones,ProjectSnippets:ProjectSnippets,ProjectSnippetNotes:ProjectSnippetNotes,ProjectSnippetDiscussions:ProjectSnippetDiscussions,ProjectSnippetAwardEmojis:ProjectSnippetAwardEmojis,ProtectedBranches:ProtectedBranches,ProtectedTags:ProtectedTags,ProjectVariables:ProjectVariables,Repositories:Repositories,RepositoryFiles:RepositoryFiles,Runners:Runners,Services:Services,Tags:Tags,Triggers:Triggers}),Gitlab=bundler(APIServices);export{GroupsBundle,UsersBundle,ProjectsBundle,Gitlab,Groups,GroupAccessRequests,GroupBadges,GroupCustomAttributes,GroupIssueBoards,GroupMembers,GroupMilestones,GroupProjects,GroupVariables,Epics,EpicIssues,EpicNotes,EpicDiscussions,Users,UserCustomAttributes,UserEmails,UserImpersonationTokens,UserKeys,UserGPGKeys,Branches,Commits,CommitDiscussions,Deployments,DeployKeys,Environments,Issues,IssueNotes,IssueDiscussions,IssueAwardEmojis,Jobs,Labels,MergeRequests,MergeRequestAwardEmojis,MergeRequestDiscussions,MergeRequestNotes,Pipelines,PipelineSchedules,PipelineScheduleVariables,Projects,ProjectAccessRequests,ProjectBadges,ProjectCustomAttributes,ProjectImportExport,ProjectIssueBoards,ProjectHooks,ProjectMembers,ProjectMilestones,ProjectSnippets,ProjectSnippetNotes,ProjectSnippetDiscussions,ProjectSnippetAwardEmojis,ProtectedBranches,ProtectedTags,ProjectVariables,Repositories,RepositoryFiles,Runners,Services,Tags,Todos,Triggers,PushRule,ApplicationSettings,BroadcastMessages,Events,FeatureFlags,GeoNodes,GitignoreTemplates,GitLabCIYMLTemplates,Keys,Licence,LicenceTemplates,Lint,Namespaces,NotificationSettings,Markdown,PagesDomains,Search,SidekiqMetrics,Snippets,SystemHooks,Version,Wikis};
+import Request from 'ky';
+import { decamelizeKeys, camelizeKeys } from 'humps';
+import { stringify } from 'query-string';
+import FormData from 'form-data';
+import randomstring from 'randomstring';
+
+/*! *****************************************************************************
+Copyright (c) Microsoft Corporation. All rights reserved.
+Licensed under the Apache License, Version 2.0 (the "License"); you may not use
+this file except in compliance with the License. You may obtain a copy of the
+License at http://www.apache.org/licenses/LICENSE-2.0
+
+THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+MERCHANTABLITY OR NON-INFRINGEMENT.
+
+See the Apache Version 2.0 License for specific language governing permissions
+and limitations under the License.
+***************************************************************************** */
+
+function __rest(s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+}
+
+function defaultRequest(service, endpoint, { body, query, sudo }) {
+    let urlStr = `${service.url}${endpoint}`;
+    if (query) {
+        urlStr += `?${stringify(decamelizeKeys(query), { arrayFormat: 'bracket' })}`;
+    }
+    const headers = Object.assign({}, service.headers);
+    if (sudo) {
+        headers.sudo = sudo;
+    }
+    return [
+        urlStr,
+        {
+            headers,
+            body: body && typeof body !== 'object' ? body : undefined,
+            // TODO
+            // rejectUnauthorized: service.rejectUnauthorized,
+            json: typeof body === 'object' ? decamelizeKeys(body) : undefined,
+        },
+    ];
+}
+async function handleResponse(response) {
+    const { headers, status, statusText } = await response;
+    const rawBody = await response.json();
+    let body;
+    if (Array.isArray(body)) {
+        body = rawBody;
+    }
+    else if (typeof rawBody === 'object' && rawBody !== null) {
+        body = camelizeKeys(rawBody);
+    }
+    else {
+        body = {};
+    }
+    return {
+        body,
+        headers,
+        status,
+        statusText,
+    };
+}
+async function get(service, endpoint, options = {}) {
+    const { showPagination, maxPages, sudo } = options, query = __rest(options, ["showPagination", "maxPages", "sudo"]);
+    const requestOptions = defaultRequest(service, endpoint, {
+        query,
+        sudo,
+    });
+    const { headers, body } = await handleResponse(Request.get(...requestOptions));
+    const pagination = {
+        total: headers['x-total'],
+        next: headers['x-next-page'] || null,
+        current: headers['x-page'] || null,
+        previous: headers['x-prev-page'] || null,
+        perPage: headers['x-per-page'],
+        totalPages: headers['x-total-pages'],
+    };
+    const underLimit = maxPages ? pagination.current < maxPages : true;
+    // If not looking for a singular page and still under the max pages limit
+    // AND their is a next page, paginate
+    if (!query.page && underLimit && pagination.next) {
+        const more = await get(service, endpoint, Object.assign({ page: pagination.next }, options));
+        return [...(Array.isArray(body) ? body : []), ...(Array.isArray(more) ? more : [])];
+    }
+    return (query.page || maxPages) && showPagination ? { data: body, pagination } : body;
+}
+function stream(service, endpoint, options = ({} = {})) {
+    const Req = Request;
+    if (typeof Req.stream !== 'function') {
+        throw new Error('Not implementated! Arg!');
+    }
+    return Req.stream(...defaultRequest(service, endpoint, {
+        query: options,
+    }));
+}
+async function post(service, endpoint, options = {}) {
+    const { sudo } = options, body = __rest(options, ["sudo"]);
+    const response = await handleResponse(Request.post(...defaultRequest(service, endpoint, {
+        body,
+        sudo,
+    })));
+    return response.body;
+}
+async function put(service, endpoint, options = {}) {
+    const body = __rest(options, ["sudo"]);
+    const response = await handleResponse(Request.put(...defaultRequest(service, endpoint, {
+        body,
+    })));
+    return response.body;
+}
+async function del(service, endpoint, options = {}) {
+    const query = __rest(options, ["sudo"]);
+    const response = await handleResponse(Request.delete(...defaultRequest(service, endpoint, {
+        query,
+    })));
+    return response.body;
+}
+
+class BaseService {
+    constructor({ token, oauthToken, sudo, host = 'https://gitlab.com', url = '', version = 'v4', rejectUnauthorized = true, requester = Request, }) {
+        this.url = [host, 'api', version, url].join('/');
+        this.headers = {};
+        this.rejectUnauthorized = rejectUnauthorized;
+        this.requester = requester;
+        // Handle auth tokens
+        if (oauthToken)
+            this.headers.authorization = `Bearer ${oauthToken}`;
+        else if (token)
+            this.headers['private-token'] = token;
+        // Set sudo
+        if (sudo)
+            this.headers['Sudo'] = sudo;
+    }
+}
+
+function bundler(services) {
+    return function Bundle(options) {
+        Object.entries(services || {}).forEach(([name, ser]) => {
+            this[name] = new ser(options);
+        });
+    };
+}
+
+class Groups extends BaseService {
+    all(options) {
+        return get(this, 'groups', options);
+    }
+    create(options) {
+        return post(this, 'groups', options);
+    }
+    createLDAPLink(groupId, cn, groupAccess, provider, options) {
+        const gId = encodeURIComponent(groupId);
+        return post(this, `groups/${gId}/ldap_group_links`, Object.assign({ cn,
+            groupAccess,
+            provider }, options));
+    }
+    edit(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return put(this, `groups/${gId}`, options);
+    }
+    remove(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return del(this, `groups/${gId}`, options);
+    }
+    removeLDAPLink(groupId, cn, _a = {}) {
+        var { provider } = _a, options = __rest(_a, ["provider"]);
+        const gId = encodeURIComponent(groupId);
+        const url = provider ? `${provider}/${cn}` : `${cn}`;
+        return del(this, `groups/${gId}/ldap_group_links/${url}`, options);
+    }
+    search(nameOrPath, options) {
+        return get(this, 'groups', Object.assign({ search: nameOrPath }, options));
+    }
+    show(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return get(this, `groups/${gId}`, options);
+    }
+    subgroups(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return get(this, `groups/${gId}/subgroups`, options);
+    }
+    syncLDAP(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return post(this, `groups/${gId}/ldap_sync`, options);
+    }
+}
+
+class ResourceAccessRequests extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/access_requests`);
+    }
+    request(resourceId) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/access_requests`);
+    }
+    approve(resourceId, userId, { accessLevel }) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return post(this, `${rId}/access_requests/${uId}/approve`, {
+            accessLevel,
+        });
+    }
+    deny(resourceId, userId) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return del(this, `${rId}/access_requests/${uId}`);
+    }
+}
+
+function url(projectId, resourceType, resourceId, awardId, noteId) {
+    const [pId, rId] = [projectId, resourceId].map(encodeURIComponent);
+    const output = [pId, resourceType, rId];
+    if (noteId)
+        output.push('notes', encodeURIComponent(noteId));
+    output.push(encodeURIComponent('award_emoji'));
+    if (awardId)
+        output.push(encodeURIComponent(awardId));
+    return output.join('/');
+}
+class ResourceAwardsEmojis extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: 'projects' }, options));
+        this.resourceType = resourceType;
+    }
+    all(projectId, resourceId, noteId, options) {
+        return get(this, url(projectId, this.resourceType, resourceId, null, noteId), options);
+    }
+    award(projectId, resourceId, name, noteId, options) {
+        return post(this, url(projectId, this.resourceType, resourceId, null, noteId), Object.assign({ name }, options));
+    }
+    remove(projectId, resourceId, awardId, noteId, options) {
+        return del(this, url(projectId, this.resourceType, resourceId, awardId, noteId), options);
+    }
+    show(projectId, resourceId, awardId, noteId, options) {
+        return get(this, url(projectId, this.resourceType, resourceId, awardId, noteId), options);
+    }
+}
+
+class ResourceBadges extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    add(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/badges`, options);
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/badges`, options);
+    }
+    edit(resourceId, badgeId, options) {
+        const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+        return put(this, `${rId}/badges/${bId}`, options);
+    }
+    preview(resourceId, linkUrl, imageUrl, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/badges/render`, Object.assign({ linkUrl, imageUrl }, options));
+    }
+    remove(resourceId, badgeId, options) {
+        const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+        return del(this, `${rId}/badges/${bId}`, options);
+    }
+    show(resourceId, badgeId, options) {
+        const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+        return get(this, `${rId}/badges/${bId}`, options);
+    }
+}
+
+class ResourceCustomAttributes extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/custom_attributes`, options);
+    }
+    set(resourceId, customAttributeId, value, options) {
+        const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+        return put(this, `${rId}/custom_attributes/${cId}`, Object.assign({ value }, options));
+    }
+    remove(resourceId, customAttributeId, options) {
+        const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+        return del(this, `${rId}/custom_attributes/${cId}`, options);
+    }
+    show(resourceId, customAttributeId, options) {
+        const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+        return get(this, `${rId}/custom_attributes/${cId}`, options);
+    }
+}
+
+class ResourceDiscussions extends BaseService {
+    constructor(resourceType, resource2Type, options) {
+        super(Object.assign({ url: resourceType }, options));
+        this.resource2Type = resource2Type;
+    }
+    addNote(resourceId, resource2Id, discussionId, noteId, content, options) {
+        if (!content)
+            throw new Error('Missing required content argument');
+        const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+        return put(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, Object.assign({ body: content }, options));
+    }
+    all(resourceId, resource2Id, options) {
+        const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+        return get(this, `${rId}/${this.resource2Type}/${r2Id}/discussions`, options);
+    }
+    create(resourceId, resource2Id, content, options) {
+        if (!content)
+            throw new Error('Missing required content argument');
+        const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+        return post(this, `${rId}/${this.resource2Type}/${r2Id}/discussions`, Object.assign({ body: content }, options));
+    }
+    editNote(resourceId, resource2Id, discussionId, noteId, options) {
+        const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+        return put(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, { body: options });
+    }
+    removeNote(resourceId, resource2Id, discussionId, noteId, options) {
+        const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+        return del(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, options);
+    }
+    show(resourceId, resource2Id, discussionId, options) {
+        const [rId, r2Id, dId] = [resourceId, resource2Id, discussionId].map(encodeURIComponent);
+        return get(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}`, options);
+    }
+}
+
+class ResourceIssueBoards extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/boards`, options);
+    }
+    create(resourceId, name, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/boards`, Object.assign({ name }, options));
+    }
+    createList(resourceId, boardId, labelId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return post(this, `${rId}/boards/${bId}/lists`, Object.assign({ labelId }, options));
+    }
+    edit(resourceId, boardId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return put(this, `${rId}/boards/${bId}`, options);
+    }
+    editList(resourceId, boardId, listId, position, options) {
+        const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+        return put(this, `${rId}/boards/${bId}/lists/${lId}`, Object.assign({ position }, options));
+    }
+    lists(resourceId, boardId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return get(this, `${rId}/boards/${bId}/lists`, options);
+    }
+    remove(resourceId, boardId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return del(this, `${rId}/boards/${bId}`, options);
+    }
+    removeList(resourceId, boardId, listId, options) {
+        const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+        return del(this, `${rId}/boards/${bId}/lists/${lId}`, options);
+    }
+    show(resourceId, boardId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return get(this, `${rId}/boards/${bId}`, options);
+    }
+    showList(resourceId, boardId, listId, options) {
+        const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+        return get(this, `${rId}/boards/${bId}/lists/${lId}`, options);
+    }
+}
+
+class ResourceMembers extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, includeInherited = false, options) {
+        const rId = encodeURIComponent(resourceId);
+        const url = [rId, 'members'];
+        if (includeInherited)
+            url.push('all');
+        return get(this, url.join('/'), { options });
+    }
+    add(resourceId, userId, accessLevel, options) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return post(this, `${rId}/members`, Object.assign({ userId: uId, accessLevel }, options));
+    }
+    edit(resourceId, userId, accessLevel, options) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return put(this, `${rId}/members/${uId}`, Object.assign({ accessLevel }, options));
+    }
+    show(resourceId, userId, options) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return get(this, `${rId}/members/${uId}`, options);
+    }
+    remove(resourceId, userId, options) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return del(this, `${rId}/members/${uId}`, options);
+    }
+}
+
+class ResourceMilestones extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/milestones`, options);
+    }
+    create(resourceId, title, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/milestones`, Object.assign({ title }, options));
+    }
+    edit(resourceId, milestoneId, options) {
+        const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+        return put(this, `${rId}/milestones/${mId}`, options);
+    }
+    issues(resourceId, milestoneId, options) {
+        const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+        return get(this, `${rId}/milestones/${mId}/issues`, options);
+    }
+    mergeRequests(resourceId, milestoneId, options) {
+        const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+        return get(this, `${rId}/milestones/${mId}/merge_requests`, options);
+    }
+    show(resourceId, milestoneId, options) {
+        const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+        return get(this, `${rId}/milestones/${mId}`, options);
+    }
+}
+
+class ResourceNotes extends BaseService {
+    constructor(resourceType, resource2Type, options) {
+        super(Object.assign({ url: resourceType }, options));
+        this.resource2Type = resource2Type;
+    }
+    all(resourceId, resource2Id, options) {
+        const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+        return get(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, options);
+    }
+    create(resourceId, resource2Id, body, options) {
+        const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+        return post(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, Object.assign({ body }, options));
+    }
+    edit(resourceId, resource2Id, noteId, body, options) {
+        const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+        return put(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, Object.assign({ body }, options));
+    }
+    remove(resourceId, resource2Id, noteId, options) {
+        const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+        return del(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);
+    }
+    show(resourceId, resource2Id, noteId, options) {
+        const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+        return get(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);
+    }
+}
+
+class ResourceTemplates extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: ['templates', resourceType].join('/') }, options));
+    }
+    all(options) {
+        return get(this, '', options);
+    }
+    show(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}`, options);
+    }
+}
+
+class ResourceVariables extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/variables`, options);
+    }
+    create(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/variables`, options);
+    }
+    edit(resourceId, keyId, options) {
+        const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+        return put(this, `${rId}/variables/${kId}`, options);
+    }
+    show(resourceId, keyId, options) {
+        const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+        return get(this, `${rId}/variables/${kId}`, options);
+    }
+    remove(resourceId, keyId, options) {
+        const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+        return del(this, `${rId}/variables/${kId}`, options);
+    }
+}
+
+class GroupAccessRequests extends ResourceAccessRequests {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupBadges extends ResourceBadges {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupCustomAttributes extends ResourceCustomAttributes {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupIssueBoards extends ResourceIssueBoards {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupMembers extends ResourceMembers {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupMilestones extends ResourceMilestones {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupProjects extends BaseService {
+    all(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return get(this, `groups/${gId}/projects`, options);
+    }
+    add(groupId, projectId, options) {
+        const [gId, pId] = [groupId, projectId].map(encodeURIComponent);
+        return post(this, `groups/${gId}/projects/${pId}`, options);
+    }
+}
+
+class GroupVariables extends ResourceVariables {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class Epics extends BaseService {
+    all(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return get(this, `groups/${gId}/epics`, options);
+    }
+    create(groupId, title, options) {
+        const gId = encodeURIComponent(groupId);
+        return post(this, `groups/${gId}/epics`, Object.assign({ title }, options));
+    }
+    edit(groupId, epicId, options) {
+        const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+        return put(this, `groups/${gId}/epics/${eId}`, options);
+    }
+    remove(groupId, epicId, options) {
+        const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+        return del(this, `groups/${gId}/epics/${eId}`, options);
+    }
+    show(groupId, epicId, options) {
+        const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+        return get(this, `groups/${gId}/epics/${eId}`, options);
+    }
+}
+
+class EpicIssues extends BaseService {
+    all(groupId, epicId, options) {
+        const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+        return get(this, `groups/${gId}/epics/${eId}/issues`, options);
+    }
+    assign(groupId, epicId, issueId, options) {
+        const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+        return put(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+    }
+    edit(groupId, epicId, issueId, options) {
+        const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+        return del(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+    }
+    remove(groupId, epicId, issueId, options) {
+        const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+        return del(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+    }
+}
+
+class EpicNotes extends ResourceNotes {
+    constructor(options) {
+        super('groups', 'epics', options);
+    }
+}
+
+class EpicDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('groups', 'epics', options);
+    }
+}
+
+class Users extends BaseService {
+    all(options) {
+        return get(this, 'users', options);
+    }
+    activities(options) {
+        return get(this, 'users/activities', options);
+    }
+    projects(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return get(this, `users/${uId}/projects`, options);
+    }
+    block(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return post(this, `users/${uId}/block`, options);
+    }
+    create(options) {
+        return post(this, 'users', options);
+    }
+    current(options) {
+        return get(this, 'user', options);
+    }
+    edit(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return put(this, `users/${uId}`, options);
+    }
+    events(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return get(this, `users/${uId}/events`, options);
+    }
+    session(email, password, options) {
+        return post(this, 'session', Object.assign({ email,
+            password }, options));
+    }
+    search(emailOrUsername, options) {
+        return get(this, 'users', Object.assign({ search: emailOrUsername }, options));
+    }
+    show(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return get(this, `users/${uId}`, options);
+    }
+    remove(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return del(this, `users/${uId}`, options);
+    }
+    unblock(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return post(this, `users/${uId}/unblock`, options);
+    }
+}
+
+class UserCustomAttributes extends ResourceCustomAttributes {
+    constructor(options) {
+        super('users', options);
+    }
+}
+
+const url$1 = userId => (userId ? `users/${encodeURIComponent(userId)}/emails` : 'user/emails');
+class UserEmails extends BaseService {
+    all(_a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return get(this, url$1(userId), options);
+    }
+    add(email, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return post(this, url$1(userId), Object.assign({ email }, options));
+    }
+    show(emailId, options) {
+        const eId = encodeURIComponent(emailId);
+        return get(this, `user/emails/${eId}`, options);
+    }
+    remove(emailId, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const eId = encodeURIComponent(emailId);
+        return del(this, `${url$1(userId)}/${eId}`, options);
+    }
+}
+
+class UserImpersonationTokens extends BaseService {
+    all(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return get(this, `users/${uId}/impersonation_tokens`, options);
+    }
+    add(userId, name, scopes, expiresAt, options) {
+        const uId = encodeURIComponent(userId);
+        return post(this, `users/${uId}/impersonation_tokens`, Object.assign({ name,
+            expiresAt,
+            scopes }, options));
+    }
+    show(userId, tokenId, options) {
+        const [uId, tId] = [userId, tokenId].map(encodeURIComponent);
+        return get(this, `users/${uId}/impersonation_tokens/${tId}`, options);
+    }
+    revoke(userId, tokenId, options) {
+        const [uId, tId] = [userId, tokenId].map(encodeURIComponent);
+        return del(this, `users/${uId}/impersonation_tokens/${tId}`, options);
+    }
+}
+
+const url$2 = (userId) => (userId ? `users/${encodeURIComponent(userId)}/keys` : 'user/keys');
+class UserKeys extends BaseService {
+    all(_a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return get(this, url$2(userId), options);
+    }
+    create(title, key, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return post(this, url$2(userId), Object.assign({ title,
+            key }, options));
+    }
+    show(keyId, options) {
+        const kId = encodeURIComponent(keyId);
+        return get(this, `user/keys/${kId}`, options);
+    }
+    remove(keyId, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const kId = encodeURIComponent(keyId);
+        return del(this, `${url$2(userId)}/${kId}`, options);
+    }
+}
+
+const url$3 = userId => (userId ? `users/${encodeURIComponent(userId)}/gpg_keys` : 'users/gpg_keys');
+class UserGPGKeys extends BaseService {
+    all(_a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return get(this, url$3(userId), options);
+    }
+    add(title, key, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return post(this, url$3(userId), Object.assign({ title,
+            key }, options));
+    }
+    show(keyId, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const kId = encodeURIComponent(keyId);
+        return get(this, `${url$3(userId)}/${kId}`, options);
+    }
+    remove(keyId, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const kId = encodeURIComponent(keyId);
+        return del(this, `${url$3(userId)}/${kId}`, options);
+    }
+}
+
+class Branches extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/branches`, options);
+    }
+    create(projectId, branchName, ref, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/branches`, Object.assign({ branch: branchName, ref }, options));
+    }
+    protect(projectId, branchName, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/protected_branches`, Object.assign({ name: branchName }, options));
+    }
+    remove(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return del(this, `projects/${pId}/repository/branches/${bName}`, options);
+    }
+    show(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return get(this, `projects/${pId}/repository/branches/${bName}`, options);
+    }
+    unprotect(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return put(this, `projects/${pId}/repository/branches/${bName}/unprotect`, options);
+    }
+}
+
+class Commits extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits`, options);
+    }
+    cherryPick(projectId, sha, branch, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/commits/${sha}/cherry_pick`, Object.assign({ branch }, options));
+    }
+    comments(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}/comments`, options);
+    }
+    create(projectId, branch, message, actions = [], options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/commits`, Object.assign({ branch, commitMessage: message, actions }, options));
+    }
+    createComment(projectId, sha, note, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/commits/${sha}/comments`, Object.assign({ note }, options));
+    }
+    diff(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}/diff`, options);
+    }
+    editStatus(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/statuses/${sha}`, options);
+    }
+    references(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}/refs`, options);
+    }
+    show(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}`, options);
+    }
+    status(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}/statuses`, options);
+    }
+}
+
+class CommitDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('projects', 'commits', options);
+    }
+}
+
+class Deployments extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/deployments`, options);
+    }
+    show(projectId, deploymentId, options) {
+        const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/deployments/${dId}`, options);
+    }
+}
+
+class DeployKeys extends BaseService {
+    add(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/deploy_keys`, options);
+    }
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/deploy_keys`, options);
+    }
+    show(projectId, keyId, options) {
+        const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/deploy_keys/${kId}`, options);
+    }
+    enable(projectId, keyId, options) {
+        const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/deploy_keys/${kId}/enable`, options);
+    }
+}
+
+class Environments extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/environments`, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/environments`, options);
+    }
+    edit(projectId, environmentId, options) {
+        const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/environments/${eId}`, options);
+    }
+    remove(projectId, environmentId, options) {
+        const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/environments/${eId}`, options);
+    }
+    stop(projectId, environmentId, options) {
+        const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/environments/${eId}/stop`, options);
+    }
+}
+
+class Issues extends BaseService {
+    addSpentTime(projectId, issueId, duration, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/add_spent_time`, Object.assign({ duration }, options));
+    }
+    addTimeEstimate(projectId, issueId, duration, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/time_estimate`, Object.assign({ duration }, options));
+    }
+    all(_a) {
+        var { projectId } = _a, options = __rest(_a, ["projectId"]);
+        const url = projectId ? `projects/${encodeURIComponent(projectId)}/issues` : 'issues';
+        return get(this, url, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/issues`, options);
+    }
+    edit(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/issues/${iId}`, options);
+    }
+    link(projectId, issueIId, targetProjectId, targetIssueId, options) {
+        const [pId, iId] = [projectId, issueIId].map(encodeURIComponent);
+        const [targetpId, targetIId] = [targetProjectId, targetIssueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/links`, Object.assign({ targetProjectId: targetpId, targetIssueId: targetIId }, options));
+    }
+    participants(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/issues/${iId}/participants`, options);
+    }
+    remove(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/issues/${iId}`, options);
+    }
+    resetSpentTime(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/reset_spent_time`, options);
+    }
+    resetTimeEstimate(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/reset_time_estimate`, options);
+    }
+    show(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/issues/${iId}`, options);
+    }
+    subscribe(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/subscribe`, options);
+    }
+    timeStats(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/issues/${iId}/time_stats`, options);
+    }
+    unsubscribe(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/issues/${iId}/unsubscribe`, options);
+    }
+}
+
+class IssueNotes extends ResourceNotes {
+    constructor(options) {
+        super('projects', 'issues', options);
+    }
+}
+
+class IssueDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('projects', 'issues', options);
+    }
+}
+
+class IssueAwardEmojis extends ResourceAwardsEmojis {
+    constructor(options) {
+        super('issues', options);
+    }
+}
+
+class Jobs extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/jobs`, options);
+    }
+    cancel(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/cancel`, options);
+    }
+    downloadSingleArtifactFile(projectId, jobId, artifactPath, _a) {
+        var { stream: stream$$1 = false } = _a, options = __rest(_a, ["stream"]);
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        if (stream$$1) {
+            return stream(this, `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`, options);
+        }
+        return get(this, `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`, options);
+    }
+    downloadLatestArtifactFile(projectId, ref, name, _a) {
+        var { stream: stream$$1 = false } = _a, options = __rest(_a, ["stream"]);
+        const [pId, rId, jobName] = [projectId, ref, name].map(encodeURIComponent);
+        if (stream$$1) {
+            return stream(this, `projects/${pId}/jobs/artifacts/${rId}/download?job=${jobName}`, options);
+        }
+        return get(this, `projects/${pId}/jobs/artifacts/${rId}/download?job=${jobName}`, options);
+    }
+    downloadTraceFile(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/jobs/${jId}/trace`, options);
+    }
+    erase(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/erase`, options);
+    }
+    keepArtifacts(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/artifacts/keep`, options);
+    }
+    play(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/play`, options);
+    }
+    retry(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/retry`, options);
+    }
+    show(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/jobs/${jId}`, options);
+    }
+    showPipelineJobs(projectId, pipelineId, options) {
+        const [pId, ppId] = [projectId, pipelineId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/pipelines/${ppId}/jobs`, options);
+    }
+}
+
+class Labels extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/labels`, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/labels`, options);
+    }
+    edit(projectId, labelName, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/labels`, Object.assign({ name: labelName }, options));
+    }
+    remove(projectId, labelName, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/labels`, Object.assign({ name: labelName }, options));
+    }
+    subscribe(projectId, labelId, options) {
+        const [pId, lId] = [projectId, labelId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${lId}/subscribe`, options);
+    }
+    unsubscribe(projectId, labelId, options) {
+        const [pId, lId] = [projectId, labelId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/issues/${lId}/unsubscribe`, options);
+    }
+}
+
+class MergeRequests extends BaseService {
+    accept(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/merge_requests/${mIId}/merge`, options);
+    }
+    addSpentTime(projectId, mergerequestIId, duration, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${mIId}/add_spent_time`, Object.assign({ duration }, options));
+    }
+    addTimeEstimate(projectId, mergerequestIId, duration, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${mIId}/time_estimate`, Object.assign({ duration }, options));
+    }
+    all(_a) {
+        var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+        let url;
+        if (projectId) {
+            url = `projects/${encodeURIComponent(projectId)}/merge_requests`;
+        }
+        else if (groupId) {
+            url = `groups/${encodeURIComponent(groupId)}/merge_requests`;
+        }
+        else {
+            url = 'merge_requests';
+        }
+        return get(this, url, options);
+    }
+    approve(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/merge_requests/${mIId}/approve`, options);
+    }
+    approvals(projectId, _a) {
+        var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        let url;
+        if (mergerequestIId) {
+            url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+        }
+        else {
+            url = `projects/${pId}/approvals`;
+        }
+        return get(this, url, options);
+    }
+    approvers(projectId, approverIds, approverGroupIds, _a) {
+        var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        let url;
+        if (mergerequestIId) {
+            url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+        }
+        else {
+            url = `projects/${pId}/approvals`;
+        }
+        return post(this, url, Object.assign({ approverIds, approverGroupIds }, options));
+    }
+    cancelOnPipelineSucess(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/merge_requests/${mIId}/cancel_merge_when_pipeline_succeeds`, options);
+    }
+    changes(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/changes`, options);
+    }
+    closesIssues(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/closes_issues`, options);
+    }
+    commits(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/commits`, options);
+    }
+    create(projectId, sourceBranch, targetBranch, title, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/merge_requests`, Object.assign({ id: pId, sourceBranch,
+            targetBranch,
+            title }, options));
+    }
+    edit(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/merge_requests/${mIId}`, options);
+    }
+    editApprovals(projectId, _a) {
+        var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        let url;
+        if (mergerequestIId) {
+            url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+        }
+        else {
+            url = `projects/${pId}/approvals`;
+        }
+        return post(this, url, options);
+    }
+    pipelines(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/pipelines`, options);
+    }
+    remove(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/merge_requests/${mIId}`, options);
+    }
+    resetSpentTime(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/merge_requests/${mIId}/reset_spent_time`, options);
+    }
+    resetTimeEstimate(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/merge_requests/${mIId}/reset_time_estimate`, options);
+    }
+    show(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}`, options);
+    }
+    timeStats(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/time_stats`, options);
+    }
+    version(projectId, mergerequestIId, versionId, options) {
+        const [pId, mIId, vId] = [projectId, mergerequestIId, versionId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/versions/${vId}`, options);
+    }
+    versions(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/versions`, options);
+    }
+    unapprove(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/merge_requests/${mIId}/approve`, options);
+    }
+    unsubscribe(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/merge_requests/${mIId}/unsubscribe`, options);
+    }
+}
+
+class MergeRequestAwardEmojis extends ResourceAwardsEmojis {
+    constructor(options) {
+        super('merge_requests', options);
+    }
+}
+
+class MergeRequestDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('projects', 'merge_requests', options);
+    }
+}
+
+class MergeRequestNotes extends ResourceNotes {
+    constructor(options) {
+        super('projects', 'merge_requests', options);
+    }
+}
+
+class Pipelines extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pipelines`, options);
+    }
+    create(projectId, ref, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pipeline`, Object.assign({ ref }, options));
+    }
+    show(projectId, pipelineId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pipelines/${pipelineId}`, options);
+    }
+    retry(projectId, pipelineId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pipelines/${pipelineId}/retry`, options);
+    }
+    cancel(projectId, pipelineId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pipelines/${pipelineId}/cancel`, options);
+    }
+    showJobs(projectId, pipelineId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pipelines/${pipelineId}/jobs`, options);
+    }
+}
+
+class PipelineSchedules extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pipeline_schedules`, options);
+    }
+    create(projectId, description, ref, cron, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pipeline_schedules`, Object.assign({ description,
+            ref,
+            cron }, options));
+    }
+    edit(projectId, scheduleId, options) {
+        const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+    }
+    remove(projectId, scheduleId, options) {
+        const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+    }
+    show(projectId, scheduleId, options) {
+        const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+    }
+    takeOwnership(projectId, scheduleId, options) {
+        const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/pipeline_schedules/${sId}/take_ownership`, options);
+    }
+}
+
+class PipelineScheduleVariables extends BaseService {
+    all(projectId, pipelineScheduleId, options) {
+        const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/pipeline_schedules/${psId}/variables`, options);
+    }
+    create(projectId, pipelineScheduleId, options) {
+        const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/pipeline_schedules/${psId}/variables`, options);
+    }
+    edit(projectId, pipelineScheduleId, keyId, options) {
+        const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+    }
+    show(projectId, pipelineScheduleId, keyId, options) {
+        const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+    }
+    remove(projectId, pipelineScheduleId, keyId, options) {
+        const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+    }
+}
+
+class Projects extends BaseService {
+    all(options) {
+        return get(this, 'projects', options);
+    }
+    archive(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/archive`, options);
+    }
+    create(_a) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const url = userId ? `projects/user/${encodeURIComponent(userId)}` : 'projects';
+        return post(this, url, options);
+    }
+    edit(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}`, options);
+    }
+    events(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/events`, options);
+    }
+    fork(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/fork`, options);
+    }
+    forks(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/forks`, options);
+    }
+    languages(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/languages`, options);
+    }
+    mirrorPull(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/mirror/pull`, options);
+    }
+    remove(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}`, options);
+    }
+    search(projectName) {
+        return get(this, 'projects', { search: projectName });
+    }
+    share(projectId, groupId, groupAccess, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/share`, Object.assign({ groupId, groupAccess }, options));
+    }
+    show(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}`, options);
+    }
+    star(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/star`, options);
+    }
+    statuses(projectId, sha, state, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/statuses/${sha}`, Object.assign({ state }, options));
+    }
+    transfer(projectId, namespaceId) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/transfer`, { namespace: namespaceId });
+    }
+    unarchive(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/unarchive`, options);
+    }
+    unshare(projectId, groupId, options) {
+        const [pId, gId] = [projectId, groupId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/share${gId}`, options);
+    }
+    unstar(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/unstar`, options);
+    }
+    updatePushRule(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/push_rule`, options);
+    }
+    upload(projectId, content, { fileName = randomstring(8) }) {
+        const pId = encodeURIComponent(projectId);
+        const form = new FormData();
+        form.append(fileName, {
+            file: {
+                value: content,
+                options: {
+                    filename: fileName,
+                    contentType: 'application/octet-stream',
+                },
+            },
+        });
+        return post(this, `projects/${pId}/uploads`, form);
+    }
+}
+
+class ProjectAccessRequests extends ResourceAccessRequests {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectBadges extends ResourceBadges {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectCustomAttributes extends ResourceCustomAttributes {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectImportExport extends BaseService {
+    download(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/export/download`, options);
+    }
+    exportStatus(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/export`, options);
+    }
+    import(content, path, options) {
+        const form = new FormData();
+        form.append(path, {
+            file: {
+                value: content,
+                options: {
+                    filename: path,
+                    contentType: 'application/octet-stream',
+                },
+            },
+        });
+        return post(this, 'projects/import', Object.assign({}, form, options));
+    }
+    importStatus(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/import`, options);
+    }
+    schedule(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/export`, options);
+    }
+}
+
+class ProjectIssueBoards extends ResourceIssueBoards {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectHooks extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/hooks`, options);
+    }
+    show(projectId, hookId, options) {
+        const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/hooks/${hId}`, options);
+    }
+    add(projectId, url, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/hooks`, Object.assign({ url }, options));
+    }
+    edit(projectId, hookId, url, options) {
+        const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/hooks/${hId}`, Object.assign({ url }, options));
+    }
+    remove(projectId, hookId, options) {
+        const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/hooks/${hId}`, options);
+    }
+}
+
+class ProjectMembers extends ResourceMembers {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectMilestones extends ResourceMilestones {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectSnippets extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/snippets`, options);
+    }
+    content(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/snippets/${sId}/raw`, options);
+    }
+    create(projectId, title, fileName, code, visibility, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/snippets`, Object.assign({ title,
+            fileName,
+            code,
+            visibility }, options));
+    }
+    edit(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/snippets/${sId}`, options);
+    }
+    remove(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/snippets/${sId}`, options);
+    }
+    show(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/snippets/${sId}`, options);
+    }
+    userAgentDetails(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/snippets/${sId}/user_agent_detail`, options);
+    }
+}
+
+class ProjectSnippetNotes extends ResourceNotes {
+    constructor(options) {
+        super('projects', 'snippets', options);
+    }
+}
+
+class ProjectSnippetDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('projects', 'snippets', options);
+    }
+}
+
+class ProjectSnippetAwardEmojis extends ResourceAwardsEmojis {
+    constructor(options) {
+        super('issues', options);
+    }
+}
+
+class ProtectedBranches extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/protected_branches`, options);
+    }
+    protect(projectId, branchName, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/protected_branches`, Object.assign({ name: branchName }, options));
+    }
+    show(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return get(this, `projects/${pId}/protected_branches/${bName}`, options);
+    }
+    unprotect(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return del(this, `projects/${pId}/protected_branches/${bName}`, options);
+    }
+}
+
+class ProtectedTags extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/protected_tags`, options);
+    }
+    protect(projectId, tagName, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/protected_tags`, Object.assign({ name: tagName }, options));
+    }
+    show(projectId, tagName, options) {
+        const [pId, tName] = [projectId, tagName].map(encodeURIComponent);
+        return get(this, `projects/${pId}/protected_tags/${tName}`, options);
+    }
+    unprotect(projectId, tagName, options) {
+        const [pId, tName] = [projectId, tagName].map(encodeURIComponent);
+        return del(this, `projects/${pId}/protected_tags/${tName}`, options);
+    }
+}
+
+class ProjectVariables extends ResourceVariables {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class Repositories extends BaseService {
+    compare(projectId, from, to, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/compare`, Object.assign({ from,
+            to }, options));
+    }
+    contributors(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/contributors`, options);
+    }
+    showArchive(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/archive`, options);
+    }
+    showBlob(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/blobs/${sha}`, options);
+    }
+    showBlobRaw(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/blobs/${sha}/raw`, options);
+    }
+    tree(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/tree`, options);
+    }
+}
+
+class RepositoryFiles extends BaseService {
+    create(projectId, filePath, branch, content, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return post(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch,
+            content }, options));
+    }
+    edit(projectId, filePath, branch, content, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return put(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch,
+            content }, options));
+    }
+    remove(projectId, filePath, branch, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return del(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch }, options));
+    }
+    show(projectId, filePath, ref, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return get(this, `projects/${pId}/repository/files/${path}`, Object.assign({ ref }, options));
+    }
+    showRaw(projectId, filePath, ref, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return get(this, `projects/${pId}/repository/files/${path}/raw`, Object.assign({ ref }, options));
+    }
+}
+
+class Runners extends BaseService {
+    all(_a) {
+        var { projectId } = _a, options = __rest(_a, ["projectId"]);
+        const url = projectId ? `projects/${encodeURIComponent(projectId)}/runners` : 'runners/all';
+        return get(this, url, options);
+    }
+    allOwned(options) {
+        return get(this, 'runners', options);
+    }
+    edit(runnerId, options) {
+        const rId = encodeURIComponent(runnerId);
+        return put(this, `runners/${rId}`, options);
+    }
+    enable(projectId, runnerId, options) {
+        const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/runners`, Object.assign({ runnerId: rId }, options));
+    }
+    disable(projectId, runnerId, options) {
+        const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/runners/${rId}`, options);
+    }
+    jobs(runnerId, options) {
+        const rId = encodeURIComponent(runnerId);
+        return get(this, `runners/${rId}/jobs`, options);
+    }
+    remove(runnerId, options) {
+        const rId = encodeURIComponent(runnerId);
+        return del(this, `runners/${rId}`, options);
+    }
+    show(runnerId, options) {
+        const rId = encodeURIComponent(runnerId);
+        return get(this, `runners/${rId}`, options);
+    }
+}
+
+class Services extends BaseService {
+    edit(projectId, serviceName, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/services/${serviceName}`, options);
+    }
+    remove(projectId, serviceName, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/services/${serviceName}`, options);
+    }
+    show(projectId, serviceName, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/services/${serviceName}`, options);
+    }
+}
+
+class Tags extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/tags`, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/tags`, options);
+    }
+    remove(projectId, tagName, options) {
+        const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
+        return del(this, `projects/${pId}/repository/tags/${tId}`, options);
+    }
+    show(projectId, tagName, options) {
+        const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
+        return get(this, `projects/${pId}/repository/tags/${tId}`, options);
+    }
+}
+
+class Todos extends BaseService {
+    all(options) {
+        return get(this, 'todos', options);
+    }
+    create(projectId, mergerequestId, options) {
+        return post(this, `projects/${projectId}/merge_requests/${mergerequestId}/todo`, options);
+    }
+    done(_a) {
+        var { todoId } = _a, options = __rest(_a, ["todoId"]);
+        let url = 'mark_as_done';
+        if (todoId)
+            url = `${todoId}/${url}`;
+        return del(this, `todos/${url}`, options);
+    }
+}
+
+class Triggers extends BaseService {
+    add(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/triggers`, options);
+    }
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/triggers`, options);
+    }
+    edit(projectId, triggerId, options) {
+        const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/triggers/${tId}`, options);
+    }
+    remove(projectId, triggerId, options) {
+        const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/triggers/${tId}`, options);
+    }
+    show(projectId, triggerId, options) {
+        const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/triggers/${tId}`, options);
+    }
+}
+
+class PushRule extends BaseService {
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/push_rule`, options);
+    }
+    edit(projectId, _a) {
+        var options = __rest(_a, ["upsert"]);
+        const pId = encodeURIComponent(projectId);
+        try {
+            return put(this, `projects/${pId}/push_rule`, options);
+        }
+        catch (e) {
+            if (e.message.includes('exist'))
+                return this.create(projectId, options);
+            throw e;
+        }
+    }
+    remove(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/push_rule`, options);
+    }
+    show(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/push_rule`, options);
+    }
+}
+
+class ApplicationSettings extends BaseService {
+    all(options) {
+        return get(this, 'application/settings', options);
+    }
+    edit(options) {
+        return put(this, 'application/settings', options);
+    }
+}
+
+class BroadcastMessages extends BaseService {
+    all(options) {
+        return get(this, 'broadcast_messages', options);
+    }
+    create(options) {
+        return post(this, 'broadcast_messages', options);
+    }
+    edit(broadcastMessageId, options) {
+        const bId = encodeURIComponent(broadcastMessageId);
+        return put(this, `broadcast_messages/${bId}`, options);
+    }
+    remove(broadcastMessageId) {
+        const bId = encodeURIComponent(broadcastMessageId);
+        return del(this, `broadcast_messages/${bId}`);
+    }
+    show(broadcastMessageId, options) {
+        const bId = encodeURIComponent(broadcastMessageId);
+        return get(this, `broadcast_messages/${bId}`, options);
+    }
+}
+
+class Events extends BaseService {
+    all(options) {
+        return get(this, 'events', options);
+    }
+}
+
+class FeatureFlags extends BaseService {
+    all(options) {
+        return get(this, 'features', options);
+    }
+    set(name, options) {
+        const encodedName = encodeURIComponent(name);
+        return post(this, `features/${encodedName}`, options);
+    }
+}
+
+class GeoNodes extends BaseService {
+    all(options) {
+        return get(this, 'geo_nodes', options);
+    }
+    create(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return post(this, `geo_nodes/${gId}`, options);
+    }
+    edit(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return put(this, `geo_nodes/${gId}`, options);
+    }
+    failures(options) {
+        return post(this, 'geo_nodes/current/failures', options);
+    }
+    repair(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return del(this, `geo_nodes/${gId}`, options);
+    }
+    show(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return get(this, `geo_nodes/${gId}`, options);
+    }
+    status(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return get(this, `geo_nodes/${gId}/status`, options);
+    }
+    statuses(options) {
+        return get(this, 'geo_nodes/statuses', options);
+    }
+}
+
+class GitignoreTemplates extends ResourceTemplates {
+    constructor(options) {
+        super('gitignores', options);
+    }
+}
+
+class GitLabCIYMLTemplates extends ResourceTemplates {
+    constructor(options) {
+        super('gitlab_ci_ymls', options);
+    }
+}
+
+class Keys extends BaseService {
+    show(keyId, options) {
+        const kId = encodeURIComponent(keyId);
+        return get(this, `keys/${kId}`, options);
+    }
+}
+
+class Licence extends BaseService {
+    all(options) {
+        return get(this, 'licence', options);
+    }
+    create(options) {
+        return post(this, 'licence', options);
+    }
+}
+
+class LicenceTemplates extends ResourceTemplates {
+    constructor(options) {
+        super('licences', options);
+    }
+}
+
+class Lint extends BaseService {
+    lint(content, options) {
+        return post(this, 'lint', Object.assign({ content }, options));
+    }
+}
+
+class Namespaces extends BaseService {
+    all(options) {
+        return get(this, 'namespaces', options);
+    }
+    show(namespaceId, options) {
+        const nId = encodeURIComponent(namespaceId);
+        return get(this, `namespaces/${nId}`, options);
+    }
+}
+
+class NotificationSettings extends BaseService {
+    all(_a = {}) {
+        var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+        let url = '';
+        if (projectId) {
+            url += `projects/${encodeURIComponent(projectId)}/`;
+        }
+        else if (groupId) {
+            url += `groups/${encodeURIComponent(groupId)}/`;
+        }
+        return get(this, `${url}notification_settings`, options);
+    }
+    edit(_a = {}) {
+        var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+        let url = '';
+        if (projectId) {
+            url += `projects/${encodeURIComponent(projectId)}/`;
+        }
+        else if (groupId) {
+            url += `groups/${encodeURIComponent(groupId)}/`;
+        }
+        return put(this, `${url}notification_settings`, options);
+    }
+}
+
+class Markdown extends BaseService {
+    render(text, options) {
+        return post(this, 'markdown', Object.assign({ text }, options));
+    }
+}
+
+class PagesDomains extends BaseService {
+    all(_a = {}) {
+        var { projectId } = _a, options = __rest(_a, ["projectId"]);
+        const url = projectId ? `projects/${encodeURIComponent(projectId)}/` : '';
+        return get(this, `${url}pages/domains`, options);
+    }
+    create(projectId, domain, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pages/domains`, Object.assign({ domain }, options));
+    }
+    edit(projectId, domain, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/pages/domains/${domain}`, options);
+    }
+    show(projectId, domain, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pages/domains/${domain}`, options);
+    }
+    remove(projectId, domain, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/pages/domains/${domain}`, options);
+    }
+}
+
+class Search extends BaseService {
+    all(scope, search, _a) {
+        var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+        let url = '';
+        if (projectId) {
+            url += `projects/${encodeURIComponent(projectId)}/`;
+        }
+        else if (groupId) {
+            url += `groups/${encodeURIComponent(groupId)}/`;
+        }
+        return get(this, `${url}search`, Object.assign({ scope, search }, options));
+    }
+}
+
+class SidekiqMetrics extends BaseService {
+    queueMetrics() {
+        return get(this, 'sidekiq/queue_metrics');
+    }
+    processMetrics() {
+        return get(this, 'sidekiq/process_metrics');
+    }
+    jobStats() {
+        return get(this, 'sidekiq/job_stats');
+    }
+    compoundMetrics() {
+        return get(this, 'sidekiq/compound_metrics');
+    }
+}
+
+class Snippets extends BaseService {
+    all(_a) {
+        var { public: p } = _a, options = __rest(_a, ["public"]);
+        const url = p ? 'snippets/public' : 'snippets';
+        return get(this, url, options);
+    }
+    content(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return get(this, `snippets/${sId}/raw`, options);
+    }
+    create(title, fileName, content, visibility, options) {
+        return post(this, 'snippets', Object.assign({ title,
+            fileName,
+            content,
+            visibility }, options));
+    }
+    edit(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return put(this, `snippets/${sId}`, options);
+    }
+    remove(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return del(this, `snippets/${sId}`, options);
+    }
+    show(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return get(this, `snippets/${sId}`, options);
+    }
+    userAgentDetails(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return get(this, `snippets/${sId}/user_agent_detail`, options);
+    }
+}
+
+class SystemHooks extends BaseService {
+    add(url, options) {
+        return post(this, 'hooks', Object.assign({ url }, options));
+    }
+    all(options) {
+        return get(this, 'hooks', options);
+    }
+    edit(hookId, url, options) {
+        const hId = encodeURIComponent(hookId);
+        return put(this, `hooks/${hId}`, Object.assign({ url }, options));
+    }
+    remove(hookId, options) {
+        const hId = encodeURIComponent(hookId);
+        return del(this, `hooks/${hId}`, options);
+    }
+}
+
+class Version extends BaseService {
+    show(options) {
+        return get(this, 'version', options);
+    }
+}
+
+class Wikis extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/wikis`, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/wikis`, options);
+    }
+    edit(projectId, slug, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/wikis/${slug}`, options);
+    }
+    show(projectId, slug, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/wikis/${slug}`, options);
+    }
+    remove(projectId, slug, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/wikis/${slug}`, options);
+    }
+}
+
+// Groups
+
+var APIServices = /*#__PURE__*/Object.freeze({
+    Groups: Groups,
+    GroupAccessRequests: GroupAccessRequests,
+    GroupBadges: GroupBadges,
+    GroupCustomAttributes: GroupCustomAttributes,
+    GroupIssueBoards: GroupIssueBoards,
+    GroupMembers: GroupMembers,
+    GroupMilestones: GroupMilestones,
+    GroupProjects: GroupProjects,
+    GroupVariables: GroupVariables,
+    Epics: Epics,
+    EpicIssues: EpicIssues,
+    EpicNotes: EpicNotes,
+    EpicDiscussions: EpicDiscussions,
+    Users: Users,
+    UserCustomAttributes: UserCustomAttributes,
+    UserEmails: UserEmails,
+    UserImpersonationTokens: UserImpersonationTokens,
+    UserKeys: UserKeys,
+    UserGPGKeys: UserGPGKeys,
+    Branches: Branches,
+    Commits: Commits,
+    CommitDiscussions: CommitDiscussions,
+    Deployments: Deployments,
+    DeployKeys: DeployKeys,
+    Environments: Environments,
+    Issues: Issues,
+    IssueNotes: IssueNotes,
+    IssueDiscussions: IssueDiscussions,
+    IssueAwardEmojis: IssueAwardEmojis,
+    Jobs: Jobs,
+    Labels: Labels,
+    MergeRequests: MergeRequests,
+    MergeRequestAwardEmojis: MergeRequestAwardEmojis,
+    MergeRequestDiscussions: MergeRequestDiscussions,
+    MergeRequestNotes: MergeRequestNotes,
+    Pipelines: Pipelines,
+    PipelineSchedules: PipelineSchedules,
+    PipelineScheduleVariables: PipelineScheduleVariables,
+    Projects: Projects,
+    ProjectAccessRequests: ProjectAccessRequests,
+    ProjectBadges: ProjectBadges,
+    ProjectCustomAttributes: ProjectCustomAttributes,
+    ProjectImportExport: ProjectImportExport,
+    ProjectIssueBoards: ProjectIssueBoards,
+    ProjectHooks: ProjectHooks,
+    ProjectMembers: ProjectMembers,
+    ProjectMilestones: ProjectMilestones,
+    ProjectSnippets: ProjectSnippets,
+    ProjectSnippetNotes: ProjectSnippetNotes,
+    ProjectSnippetDiscussions: ProjectSnippetDiscussions,
+    ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis,
+    ProtectedBranches: ProtectedBranches,
+    ProtectedTags: ProtectedTags,
+    ProjectVariables: ProjectVariables,
+    Repositories: Repositories,
+    RepositoryFiles: RepositoryFiles,
+    Runners: Runners,
+    Services: Services,
+    Tags: Tags,
+    Todos: Todos,
+    Triggers: Triggers,
+    PushRule: PushRule,
+    ApplicationSettings: ApplicationSettings,
+    BroadcastMessages: BroadcastMessages,
+    Events: Events,
+    FeatureFlags: FeatureFlags,
+    GeoNodes: GeoNodes,
+    GitignoreTemplates: GitignoreTemplates,
+    GitLabCIYMLTemplates: GitLabCIYMLTemplates,
+    Keys: Keys,
+    Licence: Licence,
+    LicenceTemplates: LicenceTemplates,
+    Lint: Lint,
+    Namespaces: Namespaces,
+    NotificationSettings: NotificationSettings,
+    Markdown: Markdown,
+    PagesDomains: PagesDomains,
+    Search: Search,
+    SidekiqMetrics: SidekiqMetrics,
+    Snippets: Snippets,
+    SystemHooks: SystemHooks,
+    Version: Version,
+    Wikis: Wikis
+});
+
+// Groups
+const GroupsBundle = bundler({
+    Groups: Groups,
+    GroupAccessRequests: GroupAccessRequests,
+    GroupBadges: GroupBadges,
+    GroupCustomAttributes: GroupCustomAttributes,
+    GroupIssueBoards: GroupIssueBoards,
+    GroupMembers: GroupMembers,
+    GroupMilestones: GroupMilestones,
+    GroupProjects: GroupProjects,
+    GroupVariables: GroupVariables,
+    Epics: Epics,
+    EpicIssues: EpicIssues,
+    EpicNotes: EpicNotes,
+    EpicDiscussions: EpicDiscussions,
+});
+// Users
+const UsersBundle = bundler({
+    Users: Users,
+    UserCustomAttributes: UserCustomAttributes,
+    UserEmails: UserEmails,
+    UserImpersonationTokens: UserImpersonationTokens,
+    UserKeys: UserKeys,
+    UserGPGKeys: UserGPGKeys,
+});
+// Projects
+const ProjectsBundle = bundler({
+    Branches: Branches,
+    Commits: Commits,
+    CommitDiscussions: CommitDiscussions,
+    DeployKeys: DeployKeys,
+    Deployments: Deployments,
+    Environments: Environments,
+    Issues: Issues,
+    IssueAwardEmojis: IssueAwardEmojis,
+    IssueNotes: IssueNotes,
+    IssueDiscussions: IssueDiscussions,
+    Jobs: Jobs,
+    Labels: Labels,
+    MergeRequests: MergeRequests,
+    MergeRequestAwardEmojis: MergeRequestAwardEmojis,
+    MergeRequestDiscussions: MergeRequestDiscussions,
+    MergeRequestNotes: MergeRequestNotes,
+    Pipelines: Pipelines,
+    PipelineSchedules: PipelineSchedules,
+    PipelineScheduleVariables: PipelineScheduleVariables,
+    Projects: Projects,
+    ProjectAccessRequests: ProjectAccessRequests,
+    ProjectBadges: ProjectBadges,
+    ProjectCustomAttributes: ProjectCustomAttributes,
+    ProjectImportExport: ProjectImportExport,
+    ProjectIssueBoards: ProjectIssueBoards,
+    ProjectHooks: ProjectHooks,
+    ProjectMembers: ProjectMembers,
+    ProjectMilestones: ProjectMilestones,
+    ProjectSnippets: ProjectSnippets,
+    ProjectSnippetNotes: ProjectSnippetNotes,
+    ProjectSnippetDiscussions: ProjectSnippetDiscussions,
+    ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis,
+    ProtectedBranches: ProtectedBranches,
+    ProtectedTags: ProtectedTags,
+    ProjectVariables: ProjectVariables,
+    Repositories: Repositories,
+    RepositoryFiles: RepositoryFiles,
+    Runners: Runners,
+    Services: Services,
+    Tags: Tags,
+    Triggers: Triggers,
+});
+// All initialized
+const Gitlab = bundler(APIServices);
+
+export { GroupsBundle, UsersBundle, ProjectsBundle, Gitlab, Groups, GroupAccessRequests, GroupBadges, GroupCustomAttributes, GroupIssueBoards, GroupMembers, GroupMilestones, GroupProjects, GroupVariables, Epics, EpicIssues, EpicNotes, EpicDiscussions, Users, UserCustomAttributes, UserEmails, UserImpersonationTokens, UserKeys, UserGPGKeys, Branches, Commits, CommitDiscussions, Deployments, DeployKeys, Environments, Issues, IssueNotes, IssueDiscussions, IssueAwardEmojis, Jobs, Labels, MergeRequests, MergeRequestAwardEmojis, MergeRequestDiscussions, MergeRequestNotes, Pipelines, PipelineSchedules, PipelineScheduleVariables, Projects, ProjectAccessRequests, ProjectBadges, ProjectCustomAttributes, ProjectImportExport, ProjectIssueBoards, ProjectHooks, ProjectMembers, ProjectMilestones, ProjectSnippets, ProjectSnippetNotes, ProjectSnippetDiscussions, ProjectSnippetAwardEmojis, ProtectedBranches, ProtectedTags, ProjectVariables, Repositories, RepositoryFiles, Runners, Services, Tags, Todos, Triggers, PushRule, ApplicationSettings, BroadcastMessages, Events, FeatureFlags, GeoNodes, GitignoreTemplates, GitLabCIYMLTemplates, Keys, Licence, LicenceTemplates, Lint, Namespaces, NotificationSettings, Markdown, PagesDomains, Search, SidekiqMetrics, Snippets, SystemHooks, Version, Wikis };
--- a/node_modules/gitlab/dist/index.js
+++ b/node_modules/gitlab/dist/index.js
@@ -1 +1,2295 @@
-"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var Request=_interopDefault(require("got")),humps=require("humps"),queryString=require("query-string"),FormData=_interopDefault(require("form-data")),randomstring=_interopDefault(require("randomstring")),extendStatics=function(e,t){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)};function __extends(e,t){function o(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}var __assign=function(){return(__assign=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};function __rest(e,t){var o={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(o[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(e);n<r.length;n++)t.indexOf(r[n])<0&&(o[r[n]]=e[r[n]])}return o}function __awaiter(e,t,o,r){return new(o||(o=Promise))(function(n,s){function p(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){e.done?n(e.value):new o(function(t){t(e.value)}).then(p,i)}u((r=r.apply(e,t||[])).next())})}function __generator(e,t){var o,r,n,s,p={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(o)throw new TypeError("Generator is already executing.");for(;p;)try{if(o=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return p.label++,{value:s[1],done:!1};case 5:p.label++,r=s[1],s=[0];continue;case 7:s=p.ops.pop(),p.trys.pop();continue;default:if(!(n=(n=p.trys).length>0&&n[n.length-1])&&(6===s[0]||2===s[0])){p=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){p.label=s[1];break}if(6===s[0]&&p.label<n[1]){p.label=n[1],n=s;break}if(n&&p.label<n[2]){p.label=n[2],p.ops.push(s);break}n[2]&&p.ops.pop(),p.trys.pop();continue}s=t.call(e,p)}catch(e){s=[6,e],r=0}finally{o=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}function __read(e,t){var o="function"==typeof Symbol&&e[Symbol.iterator];if(!o)return e;var r,n,s=o.call(e),p=[];try{for(;(void 0===t||t-- >0)&&!(r=s.next()).done;)p.push(r.value)}catch(e){n={error:e}}finally{try{r&&!r.done&&(o=s.return)&&o.call(s)}finally{if(n)throw n.error}}return p}function __spread(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(__read(arguments[t]));return e}function defaultRequest(e,t,o){var r=o.body,n=o.query,s=o.sudo;return[t,{baseUrl:e.url,headers:__assign({sudo:s},e.headers),query:n&&queryString.stringify(humps.decamelizeKeys(n),{arrayFormat:"bracket"}),body:r&&humps.decamelizeKeys(r),rejectUnauthorized:e.rejectUnauthorized,json:!0}]}function get(e,t,o){return void 0===o&&(o={}),__awaiter(this,void 0,void 0,function(){var r,n,s,p,i,u,c,a,d,l,m;return __generator(this,function(_){switch(_.label){case 0:return r=o.showPagination,n=o.maxPages,s=o.sudo,p=__rest(o,["showPagination","maxPages","sudo"]),i=defaultRequest(e,t,{query:p,sudo:s}),[4,Request.get.apply(Request,__spread(i))];case 1:return u=_.sent(),c=u.headers,a=u.body,d={total:c["x-total"],next:c["x-next-page"]||null,current:c["x-page"]||null,previous:c["x-prev-page"]||null,perPage:c["x-per-page"],totalPages:c["x-total-pages"]},l=!n||d.current<n,!p.page&&l&&d.next?[4,get(e,t,__assign({page:d.next},o))]:[3,3];case 2:return m=_.sent(),[2,__spread(a,m)];case 3:return[2,(p.page||n)&&r?{data:a,pagination:d}:a]}})})}function stream(e,t,o){return void 0===o&&(o={}),Request.stream.apply(Request,__spread(defaultRequest(e,t,{query:o})))}function post(e,t,o){return void 0===o&&(o={}),__awaiter(this,void 0,void 0,function(){var r,n;return __generator(this,function(s){switch(s.label){case 0:return r=o.sudo,n=__rest(o,["sudo"]),[4,Request.post.apply(Request,__spread(defaultRequest(e,t,{body:n,sudo:r})))];case 1:return[2,s.sent().body]}})})}function put(e,t,o){return void 0===o&&(o={}),__awaiter(this,void 0,void 0,function(){var r;return __generator(this,function(n){switch(n.label){case 0:return o.sudo,r=__rest(o,["sudo"]),[4,Request.put.apply(Request,__spread(defaultRequest(e,t,{body:r})))];case 1:return[2,n.sent().body]}})})}function del(e,t,o){return void 0===o&&(o={}),__awaiter(this,void 0,void 0,function(){var r;return __generator(this,function(n){switch(n.label){case 0:return o.sudo,r=__rest(o,["sudo"]),[4,Request.delete.apply(Request,__spread(defaultRequest(e,t,{query:r})))];case 1:return[2,n.sent().body]}})})}var BaseService=function(){return function(e){var t=e.token,o=e.oauthToken,r=e.sudo,n=e.host,s=void 0===n?"https://gitlab.com":n,p=e.url,i=void 0===p?"":p,u=e.version,c=void 0===u?"v4":u,a=e.rejectUnauthorized,d=void 0===a||a,l=e.requester,m=void 0===l?Request:l;this.url=[s,"api",c,i].join("/"),this.headers={},this.rejectUnauthorized=d,this.requester=m,o?this.headers.authorization="Bearer "+o:t&&(this.headers["private-token"]=t),r&&(this.headers.Sudo=r)}}();function bundler(e){return function(t){var o=this;Object.entries(e||{}).forEach(function(e){var r=__read(e,2),n=r[0],s=r[1];o[n]=new s(t)})}}var Groups=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"groups",e)},t.prototype.create=function(e){return post(this,"groups",e)},t.prototype.createLDAPLink=function(e,t,o,r,n){return post(this,"groups/"+encodeURIComponent(e)+"/ldap_group_links",__assign({cn:t,groupAccess:o,provider:r},n))},t.prototype.edit=function(e,t){return put(this,"groups/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){return del(this,"groups/"+encodeURIComponent(e),t)},t.prototype.removeLDAPLink=function(e,t,o){void 0===o&&(o={});var r=o.provider,n=__rest(o,["provider"]);return del(this,"groups/"+encodeURIComponent(e)+"/ldap_group_links/"+(r?r+"/"+t:""+t),n)},t.prototype.search=function(e,t){return get(this,"groups",__assign({search:e},t))},t.prototype.show=function(e,t){return get(this,"groups/"+encodeURIComponent(e),t)},t.prototype.subgroups=function(e,t){return get(this,"groups/"+encodeURIComponent(e)+"/subgroups",t)},t.prototype.syncLDAP=function(e,t){return post(this,"groups/"+encodeURIComponent(e)+"/ldap_sync",t)},t}(BaseService),ResourceAccessRequests=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e){return get(this,encodeURIComponent(e)+"/access_requests")},t.prototype.request=function(e){return post(this,encodeURIComponent(e)+"/access_requests")},t.prototype.approve=function(e,t,o){var r=o.accessLevel,n=__read([e,t].map(encodeURIComponent),2);return post(this,n[0]+"/access_requests/"+n[1]+"/approve",{accessLevel:r})},t.prototype.deny=function(e,t){var o=__read([e,t].map(encodeURIComponent),2);return del(this,o[0]+"/access_requests/"+o[1])},t}(BaseService);function url(e,t,o,r,n){var s=__read([e,o].map(encodeURIComponent),2),p=[s[0],t,s[1]];return n&&p.push("notes",encodeURIComponent(n)),p.push(encodeURIComponent("award_emoji")),r&&p.push(encodeURIComponent(r)),p.join("/")}var ResourceAwardsEmojis=function(e){function t(t,o){var r=e.call(this,__assign({url:"projects"},o))||this;return r.resourceType=t,r}return __extends(t,e),t.prototype.all=function(e,t,o,r){return get(this,url(e,this.resourceType,t,null,o),r)},t.prototype.award=function(e,t,o,r,n){return post(this,url(e,this.resourceType,t,null,r),__assign({name:o},n))},t.prototype.remove=function(e,t,o,r,n){return del(this,url(e,this.resourceType,t,o,r),n)},t.prototype.show=function(e,t,o,r,n){return get(this,url(e,this.resourceType,t,o,r),n)},t}(BaseService),ResourceBadges=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.add=function(e,t){return post(this,encodeURIComponent(e)+"/badges",t)},t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/badges",t)},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,r[0]+"/badges/"+r[1],o)},t.prototype.preview=function(e,t,o,r){return get(this,encodeURIComponent(e)+"/badges/render",__assign({linkUrl:t,imageUrl:o},r))},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,r[0]+"/badges/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/badges/"+r[1],o)},t}(BaseService),ResourceCustomAttributes=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/custom_attributes",t)},t.prototype.set=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return put(this,n[0]+"/custom_attributes/"+n[1],__assign({value:o},r))},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,r[0]+"/custom_attributes/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/custom_attributes/"+r[1],o)},t}(BaseService),ResourceDiscussions=function(e){function t(t,o,r){var n=e.call(this,__assign({url:t},r))||this;return n.resource2Type=o,n}return __extends(t,e),t.prototype.addNote=function(e,t,o,r,n,s){if(!n)throw new Error("Missing required content argument");var p=__read([e,t,o,r].map(encodeURIComponent),4),i=p[0],u=p[1],c=p[2],a=p[3];return put(this,i+"/"+this.resource2Type+"/"+u+"/discussions/"+c+"/notes/"+a,__assign({body:n},s))},t.prototype.all=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2),n=r[0],s=r[1];return get(this,n+"/"+this.resource2Type+"/"+s+"/discussions",o)},t.prototype.create=function(e,t,o,r){if(!o)throw new Error("Missing required content argument");var n=__read([e,t].map(encodeURIComponent),2),s=n[0],p=n[1];return post(this,s+"/"+this.resource2Type+"/"+p+"/discussions",__assign({body:o},r))},t.prototype.editNote=function(e,t,o,r,n){var s=__read([e,t,o,r].map(encodeURIComponent),4),p=s[0],i=s[1],u=s[2],c=s[3];return put(this,p+"/"+this.resource2Type+"/"+i+"/discussions/"+u+"/notes/"+c,{body:n})},t.prototype.removeNote=function(e,t,o,r,n){var s=__read([e,t,o,r].map(encodeURIComponent),4),p=s[0],i=s[1],u=s[2],c=s[3];return del(this,p+"/"+this.resource2Type+"/"+i+"/discussions/"+u+"/notes/"+c,n)},t.prototype.show=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3),s=n[0],p=n[1],i=n[2];return get(this,s+"/"+this.resource2Type+"/"+p+"/discussions/"+i,r)},t}(BaseService),ResourceIssueBoards=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/boards",t)},t.prototype.create=function(e,t,o){return post(this,encodeURIComponent(e)+"/boards",__assign({name:t},o))},t.prototype.createList=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return post(this,n[0]+"/boards/"+n[1]+"/lists",__assign({labelId:o},r))},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,r[0]+"/boards/"+r[1],o)},t.prototype.editList=function(e,t,o,r,n){var s=__read([e,t,o].map(encodeURIComponent),3);return put(this,s[0]+"/boards/"+s[1]+"/lists/"+s[2],__assign({position:r},n))},t.prototype.lists=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/boards/"+r[1]+"/lists",o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,r[0]+"/boards/"+r[1],o)},t.prototype.removeList=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return del(this,n[0]+"/boards/"+n[1]+"/lists/"+n[2],r)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/boards/"+r[1],o)},t.prototype.showList=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return get(this,n[0]+"/boards/"+n[1]+"/lists/"+n[2],r)},t}(BaseService),ResourceMembers=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t,o){void 0===t&&(t=!1);var r=[encodeURIComponent(e),"members"];return t&&r.push("all"),get(this,r.join("/"),{options:o})},t.prototype.add=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2),s=n[0],p=n[1];return post(this,s+"/members",__assign({userId:p,accessLevel:o},r))},t.prototype.edit=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return put(this,n[0]+"/members/"+n[1],__assign({accessLevel:o},r))},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/members/"+r[1],o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,r[0]+"/members/"+r[1],o)},t}(BaseService),ResourceMilestones=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/milestones",t)},t.prototype.create=function(e,t,o){return post(this,encodeURIComponent(e)+"/milestones",__assign({title:t},o))},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,r[0]+"/milestones/"+r[1],o)},t.prototype.issues=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/milestones/"+r[1]+"/issues",o)},t.prototype.mergeRequests=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/milestones/"+r[1]+"/merge_requests",o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/milestones/"+r[1],o)},t}(BaseService),ResourceNotes=function(e){function t(t,o,r){var n=e.call(this,__assign({url:t},r))||this;return n.resource2Type=o,n}return __extends(t,e),t.prototype.all=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2),n=r[0],s=r[1];return get(this,n+"/"+this.resource2Type+"/"+s+"/notes",o)},t.prototype.create=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2),s=n[0],p=n[1];return post(this,s+"/"+this.resource2Type+"/"+p+"/notes",__assign({body:o},r))},t.prototype.edit=function(e,t,o,r,n){var s=__read([e,t,o].map(encodeURIComponent),3),p=s[0],i=s[1],u=s[2];return put(this,p+"/"+this.resource2Type+"/"+i+"/notes/"+u,__assign({body:r},n))},t.prototype.remove=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3),s=n[0],p=n[1],i=n[2];return del(this,s+"/"+this.resource2Type+"/"+p+"/notes/"+i,r)},t.prototype.show=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3),s=n[0],p=n[1],i=n[2];return get(this,s+"/"+this.resource2Type+"/"+p+"/notes/"+i,r)},t}(BaseService),ResourceTemplates=function(e){function t(t,o){return e.call(this,__assign({url:["templates",t].join("/")},o))||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"",e)},t.prototype.show=function(e,t){return post(this,""+encodeURIComponent(e),t)},t}(BaseService),ResourceVariables=function(e){function t(t,o){return e.call(this,__assign({url:t},o))||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,encodeURIComponent(e)+"/variables",t)},t.prototype.create=function(e,t){return post(this,encodeURIComponent(e)+"/variables",t)},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,r[0]+"/variables/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,r[0]+"/variables/"+r[1],o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,r[0]+"/variables/"+r[1],o)},t}(BaseService),GroupAccessRequests=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceAccessRequests),GroupBadges=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceBadges),GroupCustomAttributes=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceCustomAttributes),GroupIssueBoards=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceIssueBoards),GroupMembers=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceMembers),GroupMilestones=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceMilestones),GroupProjects=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"groups/"+encodeURIComponent(e)+"/projects",t)},t.prototype.add=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"groups/"+r[0]+"/projects/"+r[1],o)},t}(BaseService),GroupVariables=function(e){function t(t){return e.call(this,"groups",t)||this}return __extends(t,e),t}(ResourceVariables),Epics=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"groups/"+encodeURIComponent(e)+"/epics",t)},t.prototype.create=function(e,t,o){return post(this,"groups/"+encodeURIComponent(e)+"/epics",__assign({title:t},o))},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"groups/"+r[0]+"/epics/"+r[1],o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"groups/"+r[0]+"/epics/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"groups/"+r[0]+"/epics/"+r[1],o)},t}(BaseService),EpicIssues=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"groups/"+r[0]+"/epics/"+r[1]+"/issues",o)},t.prototype.assign=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return put(this,"groups/"+n[0]+"/epics/"+n[1]+"/issues/"+n[2],r)},t.prototype.edit=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return del(this,"groups/"+n[0]+"/epics/"+n[1]+"/issues/"+n[2],r)},t.prototype.remove=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return del(this,"groups/"+n[0]+"/epics/"+n[1]+"/issues/"+n[2],r)},t}(BaseService),EpicNotes=function(e){function t(t){return e.call(this,"groups","epics",t)||this}return __extends(t,e),t}(ResourceNotes),EpicDiscussions=function(e){function t(t){return e.call(this,"groups","epics",t)||this}return __extends(t,e),t}(ResourceDiscussions),Users=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"users",e)},t.prototype.activities=function(e){return get(this,"users/activities",e)},t.prototype.projects=function(e,t){return get(this,"users/"+encodeURIComponent(e)+"/projects",t)},t.prototype.block=function(e,t){return post(this,"users/"+encodeURIComponent(e)+"/block",t)},t.prototype.create=function(e){return post(this,"users",e)},t.prototype.current=function(e){return get(this,"user",e)},t.prototype.edit=function(e,t){return put(this,"users/"+encodeURIComponent(e),t)},t.prototype.events=function(e,t){return get(this,"users/"+encodeURIComponent(e)+"/events",t)},t.prototype.session=function(e,t,o){return post(this,"session",__assign({email:e,password:t},o))},t.prototype.search=function(e,t){return get(this,"users",__assign({search:e},t))},t.prototype.show=function(e,t){return get(this,"users/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){return del(this,"users/"+encodeURIComponent(e),t)},t.prototype.unblock=function(e,t){return post(this,"users/"+encodeURIComponent(e)+"/unblock",t)},t}(BaseService),UserCustomAttributes=function(e){function t(t){return e.call(this,"users",t)||this}return __extends(t,e),t}(ResourceCustomAttributes),url$1=function(e){return e?"users/"+encodeURIComponent(e)+"/emails":"user/emails"},UserEmails=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.userId,o=__rest(e,["userId"]);return get(this,url$1(t),o)},t.prototype.add=function(e,t){void 0===t&&(t={});var o=t.userId,r=__rest(t,["userId"]);return post(this,url$1(o),__assign({email:e},r))},t.prototype.show=function(e,t){return get(this,"user/emails/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){void 0===t&&(t={});var o=t.userId,r=__rest(t,["userId"]),n=encodeURIComponent(e);return del(this,url$1(o)+"/"+n,r)},t}(BaseService),UserImpersonationTokens=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"users/"+encodeURIComponent(e)+"/impersonation_tokens",t)},t.prototype.add=function(e,t,o,r,n){return post(this,"users/"+encodeURIComponent(e)+"/impersonation_tokens",__assign({name:t,expiresAt:r,scopes:o},n))},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"users/"+r[0]+"/impersonation_tokens/"+r[1],o)},t.prototype.revoke=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"users/"+r[0]+"/impersonation_tokens/"+r[1],o)},t}(BaseService),url$2=function(e){return e?"users/"+encodeURIComponent(e)+"/keys":"user/keys"},UserKeys=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.userId,o=__rest(e,["userId"]);return get(this,url$2(t),o)},t.prototype.create=function(e,t,o){void 0===o&&(o={});var r=o.userId,n=__rest(o,["userId"]);return post(this,url$2(r),__assign({title:e,key:t},n))},t.prototype.show=function(e,t){return get(this,"user/keys/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){void 0===t&&(t={});var o=t.userId,r=__rest(t,["userId"]),n=encodeURIComponent(e);return del(this,url$2(o)+"/"+n,r)},t}(BaseService),url$3=function(e){return e?"users/"+encodeURIComponent(e)+"/gpg_keys":"users/gpg_keys"},UserGPGKeys=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.userId,o=__rest(e,["userId"]);return get(this,url$3(t),o)},t.prototype.add=function(e,t,o){void 0===o&&(o={});var r=o.userId,n=__rest(o,["userId"]);return post(this,url$3(r),__assign({title:e,key:t},n))},t.prototype.show=function(e,t){void 0===t&&(t={});var o=t.userId,r=__rest(t,["userId"]),n=encodeURIComponent(e);return get(this,url$3(o)+"/"+n,r)},t.prototype.remove=function(e,t){void 0===t&&(t={});var o=t.userId,r=__rest(t,["userId"]),n=encodeURIComponent(e);return del(this,url$3(o)+"/"+n,r)},t}(BaseService),Branches=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/branches",t)},t.prototype.create=function(e,t,o,r){return post(this,"projects/"+encodeURIComponent(e)+"/repository/branches",__assign({branch:t,ref:o},r))},t.prototype.protect=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/protected_branches",__assign({name:t},o))},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/repository/branches/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/repository/branches/"+r[1],o)},t.prototype.unprotect=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/repository/branches/"+r[1]+"/unprotect",o)},t}(BaseService),Commits=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits",t)},t.prototype.cherryPick=function(e,t,o,r){return post(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/cherry_pick",__assign({branch:o},r))},t.prototype.comments=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/comments",o)},t.prototype.create=function(e,t,o,r,n){return void 0===r&&(r=[]),post(this,"projects/"+encodeURIComponent(e)+"/repository/commits",__assign({branch:t,commitMessage:o,actions:r},n))},t.prototype.createComment=function(e,t,o,r){return post(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/comments",__assign({note:o},r))},t.prototype.diff=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/diff",o)},t.prototype.editStatus=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/statuses/"+t,o)},t.prototype.references=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/refs",o)},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t,o)},t.prototype.status=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/commits/"+t+"/statuses",o)},t}(BaseService),CommitDiscussions=function(e){function t(t){return e.call(this,"projects","commits",t)||this}return __extends(t,e),t}(ResourceDiscussions),Deployments=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/deployments",t)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/deployments/"+r[1],o)},t}(BaseService),DeployKeys=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.add=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/deploy_keys",t)},t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/deploy_keys",t)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/deploy_keys/"+r[1],o)},t.prototype.enable=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/deploy_keys/"+r[1]+"/enable",o)},t}(BaseService),Environments=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/environments",t)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/environments",t)},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/environments/"+r[1],o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/environments/"+r[1],o)},t.prototype.stop=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/environments/"+r[1]+"/stop",o)},t}(BaseService),Issues=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.addSpentTime=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/issues/"+n[1]+"/add_spent_time",__assign({duration:o},r))},t.prototype.addTimeEstimate=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/issues/"+n[1]+"/time_estimate",__assign({duration:o},r))},t.prototype.all=function(e){var t=e.projectId,o=__rest(e,["projectId"]);return get(this,t?"projects/"+encodeURIComponent(t)+"/issues":"issues",o)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/issues",t)},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/issues/"+r[1],o)},t.prototype.link=function(e,t,o,r,n){var s=__read([e,t].map(encodeURIComponent),2),p=s[0],i=s[1],u=__read([o,r].map(encodeURIComponent),2),c=u[0],a=u[1];return post(this,"projects/"+p+"/issues/"+i+"/links",__assign({targetProjectId:c,targetIssueId:a},n))},t.prototype.participants=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/issues/"+r[1]+"/participants",o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/issues/"+r[1],o)},t.prototype.resetSpentTime=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/issues/"+r[1]+"/reset_spent_time",o)},t.prototype.resetTimeEstimate=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/issues/"+r[1]+"/reset_time_estimate",o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/issues/"+r[1],o)},t.prototype.subscribe=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/issues/"+r[1]+"/subscribe",o)},t.prototype.timeStats=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/issues/"+r[1]+"/time_stats",o)},t.prototype.unsubscribe=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/issues/"+r[1]+"/unsubscribe",o)},t}(BaseService),IssueNotes=function(e){function t(t){return e.call(this,"projects","issues",t)||this}return __extends(t,e),t}(ResourceNotes),IssueDiscussions=function(e){function t(t){return e.call(this,"projects","issues",t)||this}return __extends(t,e),t}(ResourceDiscussions),IssueAwardEmojis=function(e){function t(t){return e.call(this,"issues",t)||this}return __extends(t,e),t}(ResourceAwardsEmojis),Jobs=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/jobs",t)},t.prototype.cancel=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/jobs/"+r[1]+"/cancel",o)},t.prototype.downloadSingleArtifactFile=function(e,t,o,r){var n=r.stream,s=void 0!==n&&n,p=__rest(r,["stream"]),i=__read([e,t].map(encodeURIComponent),2),u=i[0],c=i[1];return s?stream(this,"projects/"+u+"/jobs/"+c+"/artifacts/"+o,p):get(this,"projects/"+u+"/jobs/"+c+"/artifacts/"+o,p)},t.prototype.downloadLatestArtifactFile=function(e,t,o,r){var n=r.stream,s=void 0!==n&&n,p=__rest(r,["stream"]),i=__read([e,t,o].map(encodeURIComponent),3),u=i[0],c=i[1],a=i[2];return s?stream(this,"projects/"+u+"/jobs/artifacts/"+c+"/download?job="+a,p):get(this,"projects/"+u+"/jobs/artifacts/"+c+"/download?job="+a,p)},t.prototype.downloadTraceFile=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/jobs/"+r[1]+"/trace",o)},t.prototype.erase=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/jobs/"+r[1]+"/erase",o)},t.prototype.keepArtifacts=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/jobs/"+r[1]+"/artifacts/keep",o)},t.prototype.play=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/jobs/"+r[1]+"/play",o)},t.prototype.retry=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/jobs/"+r[1]+"/retry",o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/jobs/"+r[1],o)},t.prototype.showPipelineJobs=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/pipelines/"+r[1]+"/jobs",o)},t}(BaseService),Labels=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/labels",t)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/labels",t)},t.prototype.edit=function(e,t,o){return put(this,"projects/"+encodeURIComponent(e)+"/labels",__assign({name:t},o))},t.prototype.remove=function(e,t,o){return del(this,"projects/"+encodeURIComponent(e)+"/labels",__assign({name:t},o))},t.prototype.subscribe=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/issues/"+r[1]+"/subscribe",o)},t.prototype.unsubscribe=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/issues/"+r[1]+"/unsubscribe",o)},t}(BaseService),MergeRequests=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.accept=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/merge",o)},t.prototype.addSpentTime=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/issues/"+n[1]+"/add_spent_time",__assign({duration:o},r))},t.prototype.addTimeEstimate=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+n[0]+"/issues/"+n[1]+"/time_estimate",__assign({duration:o},r))},t.prototype.all=function(e){var t=e.projectId,o=e.groupId,r=__rest(e,["projectId","groupId"]);return get(this,t?"projects/"+encodeURIComponent(t)+"/merge_requests":o?"groups/"+encodeURIComponent(o)+"/merge_requests":"merge_requests",r)},t.prototype.approve=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/approve",o)},t.prototype.approvals=function(e,t){var o=t.mergerequestIId,r=__rest(t,["mergerequestIId"]),n=__read([e,o].map(encodeURIComponent),2),s=n[0],p=n[1];return get(this,o?"projects/"+s+"/merge_requests/"+p+"/approvals":"projects/"+s+"/approvals",r)},t.prototype.approvers=function(e,t,o,r){var n=r.mergerequestIId,s=__rest(r,["mergerequestIId"]),p=__read([e,n].map(encodeURIComponent),2),i=p[0],u=p[1];return post(this,n?"projects/"+i+"/merge_requests/"+u+"/approvals":"projects/"+i+"/approvals",__assign({approverIds:t,approverGroupIds:o},s))},t.prototype.cancelOnPipelineSucess=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/cancel_merge_when_pipeline_succeeds",o)},t.prototype.changes=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/changes",o)},t.prototype.closesIssues=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/closes_issues",o)},t.prototype.commits=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/commits",o)},t.prototype.create=function(e,t,o,r,n){var s=encodeURIComponent(e);return post(this,"projects/"+s+"/merge_requests",__assign({id:s,sourceBranch:t,targetBranch:o,title:r},n))},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/merge_requests/"+r[1],o)},t.prototype.editApprovals=function(e,t){var o=t.mergerequestIId,r=__rest(t,["mergerequestIId"]),n=__read([e,o].map(encodeURIComponent),2),s=n[0],p=n[1];return post(this,o?"projects/"+s+"/merge_requests/"+p+"/approvals":"projects/"+s+"/approvals",r)},t.prototype.pipelines=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/pipelines",o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/merge_requests/"+r[1],o)},t.prototype.resetSpentTime=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/reset_spent_time",o)},t.prototype.resetTimeEstimate=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/reset_time_estimate",o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/merge_requests/"+r[1],o)},t.prototype.timeStats=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/time_stats",o)},t.prototype.version=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return get(this,"projects/"+n[0]+"/merge_requests/"+n[1]+"/versions/"+n[2],r)},t.prototype.versions=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/versions",o)},t.prototype.unapprove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/approve",o)},t.prototype.unsubscribe=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/merge_requests/"+r[1]+"/unsubscribe",o)},t}(BaseService),MergeRequestAwardEmojis=function(e){function t(t){return e.call(this,"merge_requests",t)||this}return __extends(t,e),t}(ResourceAwardsEmojis),MergeRequestDiscussions=function(e){function t(t){return e.call(this,"projects","merge_requests",t)||this}return __extends(t,e),t}(ResourceDiscussions),MergeRequestNotes=function(e){function t(t){return e.call(this,"projects","merge_requests",t)||this}return __extends(t,e),t}(ResourceNotes),Pipelines=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/pipelines",t)},t.prototype.create=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/pipeline",__assign({ref:t},o))},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/pipelines/"+t,o)},t.prototype.retry=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/pipelines/"+t+"/retry",o)},t.prototype.cancel=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/pipelines/"+t+"/cancel",o)},t.prototype.showJobs=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/pipelines/"+t+"/jobs",o)},t}(BaseService),PipelineSchedules=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/pipeline_schedules",t)},t.prototype.create=function(e,t,o,r,n){return post(this,"projects/"+encodeURIComponent(e)+"/pipeline_schedules",__assign({description:t,ref:o,cron:r},n))},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1],o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1],o)},t.prototype.takeOwnership=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/take_ownership",o)},t}(BaseService),PipelineScheduleVariables=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/variables",o)},t.prototype.create=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+r[0]+"/pipeline_schedules/"+r[1]+"/variables",o)},t.prototype.edit=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return put(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/variables/"+n[2],r)},t.prototype.show=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return get(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/variables/"+n[2],r)},t.prototype.remove=function(e,t,o,r){var n=__read([e,t,o].map(encodeURIComponent),3);return del(this,"projects/"+n[0]+"/pipeline_schedules/"+n[1]+"/variables/"+n[2],r)},t}(BaseService),Projects=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"projects",e)},t.prototype.archive=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/archive",t)},t.prototype.create=function(e){var t=e.userId,o=__rest(e,["userId"]);return post(this,t?"projects/user/"+encodeURIComponent(t):"projects",o)},t.prototype.edit=function(e,t){return put(this,"projects/"+encodeURIComponent(e),t)},t.prototype.events=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/events",t)},t.prototype.fork=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/fork",t)},t.prototype.forks=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/forks",t)},t.prototype.languages=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/languages",t)},t.prototype.mirrorPull=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/mirror/pull",t)},t.prototype.remove=function(e,t){return del(this,"projects/"+encodeURIComponent(e),t)},t.prototype.search=function(e){return get(this,"projects",{search:e})},t.prototype.share=function(e,t,o,r){return post(this,"projects/"+encodeURIComponent(e)+"/share",__assign({groupId:t,groupAccess:o},r))},t.prototype.show=function(e,t){return get(this,"projects/"+encodeURIComponent(e),t)},t.prototype.star=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/star",t)},t.prototype.statuses=function(e,t,o,r){return post(this,"projects/"+encodeURIComponent(e)+"/statuses/"+t,__assign({state:o},r))},t.prototype.transfer=function(e,t){return put(this,"projects/"+encodeURIComponent(e)+"/transfer",{namespace:t})},t.prototype.unarchive=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/unarchive",t)},t.prototype.unshare=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/share"+r[1],o)},t.prototype.unstar=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/unstar",t)},t.prototype.updatePushRule=function(e,t){return put(this,"projects/"+encodeURIComponent(e)+"/push_rule",t)},t.prototype.upload=function(e,t,o){var r=o.fileName,n=void 0===r?randomstring(8):r,s=encodeURIComponent(e),p=new FormData;return p.append(n,{file:{value:t,options:{filename:n,contentType:"application/octet-stream"}}}),post(this,"projects/"+s+"/uploads",p)},t}(BaseService),ProjectAccessRequests=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceAccessRequests),ProjectBadges=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceBadges),ProjectCustomAttributes=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceCustomAttributes),ProjectImportExport=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.download=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/export/download",t)},t.prototype.exportStatus=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/export",t)},t.prototype.import=function(e,t,o){var r=new FormData;return r.append(t,{file:{value:e,options:{filename:t,contentType:"application/octet-stream"}}}),post(this,"projects/import",__assign({},r,o))},t.prototype.importStatus=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/import",t)},t.prototype.schedule=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/export",t)},t}(BaseService),ProjectIssueBoards=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceIssueBoards),ProjectHooks=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/hooks",t)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/hooks/"+r[1],o)},t.prototype.add=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/hooks",__assign({url:t},o))},t.prototype.edit=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+n[0]+"/hooks/"+n[1],__assign({url:o},r))},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/hooks/"+r[1],o)},t}(BaseService),ProjectMembers=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceMembers),ProjectMilestones=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceMilestones),ProjectSnippets=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/snippets",t)},t.prototype.content=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/snippets/"+r[1]+"/raw",o)},t.prototype.create=function(e,t,o,r,n,s){return post(this,"projects/"+encodeURIComponent(e)+"/snippets",__assign({title:t,fileName:o,code:r,visibility:n},s))},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/snippets/"+r[1],o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/snippets/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/snippets/"+r[1],o)},t.prototype.userAgentDetails=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/snippets/"+r[1]+"/user_agent_detail",o)},t}(BaseService),ProjectSnippetNotes=function(e){function t(t){return e.call(this,"projects","snippets",t)||this}return __extends(t,e),t}(ResourceNotes),ProjectSnippetDiscussions=function(e){function t(t){return e.call(this,"projects","snippets",t)||this}return __extends(t,e),t}(ResourceDiscussions),ProjectSnippetAwardEmojis=function(e){function t(t){return e.call(this,"issues",t)||this}return __extends(t,e),t}(ResourceAwardsEmojis),ProtectedBranches=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/protected_branches",t)},t.prototype.protect=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/protected_branches",__assign({name:t},o))},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/protected_branches/"+r[1],o)},t.prototype.unprotect=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/protected_branches/"+r[1],o)},t}(BaseService),ProtectedTags=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/protected_tags",t)},t.prototype.protect=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/protected_tags",__assign({name:t},o))},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/protected_tags/"+r[1],o)},t.prototype.unprotect=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/protected_tags/"+r[1],o)},t}(BaseService),ProjectVariables=function(e){function t(t){return e.call(this,"projects",t)||this}return __extends(t,e),t}(ResourceVariables),Repositories=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.compare=function(e,t,o,r){return get(this,"projects/"+encodeURIComponent(e)+"/repository/compare",__assign({from:t,to:o},r))},t.prototype.contributors=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/contributors",t)},t.prototype.showArchive=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/archive",t)},t.prototype.showBlob=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/blobs/"+t,o)},t.prototype.showBlobRaw=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/repository/blobs/"+t+"/raw",o)},t.prototype.tree=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/tree",t)},t}(BaseService),RepositoryFiles=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.create=function(e,t,o,r,n){var s=__read([e,t].map(encodeURIComponent),2);return post(this,"projects/"+s[0]+"/repository/files/"+s[1],__assign({branch:o,content:r},n))},t.prototype.edit=function(e,t,o,r,n){var s=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+s[0]+"/repository/files/"+s[1],__assign({branch:o,content:r},n))},t.prototype.remove=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+n[0]+"/repository/files/"+n[1],__assign({branch:o},r))},t.prototype.show=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/repository/files/"+n[1],__assign({ref:o},r))},t.prototype.showRaw=function(e,t,o,r){var n=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+n[0]+"/repository/files/"+n[1]+"/raw",__assign({ref:o},r))},t}(BaseService),Runners=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){var t=e.projectId,o=__rest(e,["projectId"]);return get(this,t?"projects/"+encodeURIComponent(t)+"/runners":"runners/all",o)},t.prototype.allOwned=function(e){return get(this,"runners",e)},t.prototype.edit=function(e,t){return put(this,"runners/"+encodeURIComponent(e),t)},t.prototype.enable=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2),n=r[0],s=r[1];return post(this,"projects/"+n+"/runners",__assign({runnerId:s},o))},t.prototype.disable=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/runners/"+r[1],o)},t.prototype.jobs=function(e,t){return get(this,"runners/"+encodeURIComponent(e)+"/jobs",t)},t.prototype.remove=function(e,t){return del(this,"runners/"+encodeURIComponent(e),t)},t.prototype.show=function(e,t){return get(this,"runners/"+encodeURIComponent(e),t)},t}(BaseService),Services=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.edit=function(e,t,o){return put(this,"projects/"+encodeURIComponent(e)+"/services/"+t,o)},t.prototype.remove=function(e,t,o){return del(this,"projects/"+encodeURIComponent(e)+"/services/"+t,o)},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/services/"+t,o)},t}(BaseService),Tags=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/repository/tags",t)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/repository/tags",t)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/repository/tags/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/repository/tags/"+r[1],o)},t}(BaseService),Todos=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"todos",e)},t.prototype.create=function(e,t,o){return post(this,"projects/"+e+"/merge_requests/"+t+"/todo",o)},t.prototype.done=function(e){var t=e.todoId,o="mark_as_done";return t&&(o=t+"/"+o),del(this,"todos/"+o,__rest(e,["todoId"]))},t}(BaseService),Triggers=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.add=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/triggers",t)},t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/triggers",t)},t.prototype.edit=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return put(this,"projects/"+r[0]+"/triggers/"+r[1],o)},t.prototype.remove=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return del(this,"projects/"+r[0]+"/triggers/"+r[1],o)},t.prototype.show=function(e,t,o){var r=__read([e,t].map(encodeURIComponent),2);return get(this,"projects/"+r[0]+"/triggers/"+r[1],o)},t}(BaseService),PushRule=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/push_rule",t)},t.prototype.edit=function(e,t){t.upsert;var o=__rest(t,["upsert"]),r=encodeURIComponent(e);try{return put(this,"projects/"+r+"/push_rule",o)}catch(t){if(t.message.includes("exist"))return this.create(e,o);throw t}},t.prototype.remove=function(e,t){return del(this,"projects/"+encodeURIComponent(e)+"/push_rule",t)},t.prototype.show=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/push_rule",t)},t}(BaseService),ApplicationSettings=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"application/settings",e)},t.prototype.edit=function(e){return put(this,"application/settings",e)},t}(BaseService),BroadcastMessages=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"broadcast_messages",e)},t.prototype.create=function(e){return post(this,"broadcast_messages",e)},t.prototype.edit=function(e,t){return put(this,"broadcast_messages/"+encodeURIComponent(e),t)},t.prototype.remove=function(e){return del(this,"broadcast_messages/"+encodeURIComponent(e))},t.prototype.show=function(e,t){return get(this,"broadcast_messages/"+encodeURIComponent(e),t)},t}(BaseService),Events=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"events",e)},t}(BaseService),FeatureFlags=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"features",e)},t.prototype.set=function(e,t){return post(this,"features/"+encodeURIComponent(e),t)},t}(BaseService),GeoNodes=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"geo_nodes",e)},t.prototype.create=function(e,t){return post(this,"geo_nodes/"+encodeURIComponent(e),t)},t.prototype.edit=function(e,t){return put(this,"geo_nodes/"+encodeURIComponent(e),t)},t.prototype.failures=function(e){return post(this,"geo_nodes/current/failures",e)},t.prototype.repair=function(e,t){return del(this,"geo_nodes/"+encodeURIComponent(e),t)},t.prototype.show=function(e,t){return get(this,"geo_nodes/"+encodeURIComponent(e),t)},t.prototype.status=function(e,t){return get(this,"geo_nodes/"+encodeURIComponent(e)+"/status",t)},t.prototype.statuses=function(e){return get(this,"geo_nodes/statuses",e)},t}(BaseService),GitignoreTemplates=function(e){function t(t){return e.call(this,"gitignores",t)||this}return __extends(t,e),t}(ResourceTemplates),GitLabCIYMLTemplates=function(e){function t(t){return e.call(this,"gitlab_ci_ymls",t)||this}return __extends(t,e),t}(ResourceTemplates),Keys=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.show=function(e,t){return get(this,"keys/"+encodeURIComponent(e),t)},t}(BaseService),Licence=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"licence",e)},t.prototype.create=function(e){return post(this,"licence",e)},t}(BaseService),LicenceTemplates=function(e){function t(t){return e.call(this,"licences",t)||this}return __extends(t,e),t}(ResourceTemplates),Lint=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.lint=function(e,t){return post(this,"lint",__assign({content:e},t))},t}(BaseService),Namespaces=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,"namespaces",e)},t.prototype.show=function(e,t){return get(this,"namespaces/"+encodeURIComponent(e),t)},t}(BaseService),NotificationSettings=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.projectId,o=e.groupId,r=__rest(e,["projectId","groupId"]),n="";return t?n+="projects/"+encodeURIComponent(t)+"/":o&&(n+="groups/"+encodeURIComponent(o)+"/"),get(this,n+"notification_settings",r)},t.prototype.edit=function(e){void 0===e&&(e={});var t=e.projectId,o=e.groupId,r=__rest(e,["projectId","groupId"]),n="";return t?n+="projects/"+encodeURIComponent(t)+"/":o&&(n+="groups/"+encodeURIComponent(o)+"/"),put(this,n+"notification_settings",r)},t}(BaseService),Markdown=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.render=function(e,t){return post(this,"markdown",__assign({text:e},t))},t}(BaseService),PagesDomains=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){void 0===e&&(e={});var t=e.projectId,o=__rest(e,["projectId"]);return get(this,(t?"projects/"+encodeURIComponent(t)+"/":"")+"pages/domains",o)},t.prototype.create=function(e,t,o){return post(this,"projects/"+encodeURIComponent(e)+"/pages/domains",__assign({domain:t},o))},t.prototype.edit=function(e,t,o){return put(this,"projects/"+encodeURIComponent(e)+"/pages/domains/"+t,o)},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/pages/domains/"+t,o)},t.prototype.remove=function(e,t,o){return del(this,"projects/"+encodeURIComponent(e)+"/pages/domains/"+t,o)},t}(BaseService),Search=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t,o){var r=o.projectId,n=o.groupId,s=__rest(o,["projectId","groupId"]),p="";return r?p+="projects/"+encodeURIComponent(r)+"/":n&&(p+="groups/"+encodeURIComponent(n)+"/"),get(this,p+"search",__assign({scope:e,search:t},s))},t}(BaseService),SidekiqMetrics=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.queueMetrics=function(){return get(this,"sidekiq/queue_metrics")},t.prototype.processMetrics=function(){return get(this,"sidekiq/process_metrics")},t.prototype.jobStats=function(){return get(this,"sidekiq/job_stats")},t.prototype.compoundMetrics=function(){return get(this,"sidekiq/compound_metrics")},t}(BaseService),Snippets=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e){return get(this,e.public?"snippets/public":"snippets",__rest(e,["public"]))},t.prototype.content=function(e,t){return get(this,"snippets/"+encodeURIComponent(e)+"/raw",t)},t.prototype.create=function(e,t,o,r,n){return post(this,"snippets",__assign({title:e,fileName:t,content:o,visibility:r},n))},t.prototype.edit=function(e,t){return put(this,"snippets/"+encodeURIComponent(e),t)},t.prototype.remove=function(e,t){return del(this,"snippets/"+encodeURIComponent(e),t)},t.prototype.show=function(e,t){return get(this,"snippets/"+encodeURIComponent(e),t)},t.prototype.userAgentDetails=function(e,t){return get(this,"snippets/"+encodeURIComponent(e)+"/user_agent_detail",t)},t}(BaseService),SystemHooks=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.add=function(e,t){return post(this,"hooks",__assign({url:e},t))},t.prototype.all=function(e){return get(this,"hooks",e)},t.prototype.edit=function(e,t,o){return put(this,"hooks/"+encodeURIComponent(e),__assign({url:t},o))},t.prototype.remove=function(e,t){return del(this,"hooks/"+encodeURIComponent(e),t)},t}(BaseService),Version=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.show=function(e){return get(this,"version",e)},t}(BaseService),Wikis=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.all=function(e,t){return get(this,"projects/"+encodeURIComponent(e)+"/wikis",t)},t.prototype.create=function(e,t){return post(this,"projects/"+encodeURIComponent(e)+"/wikis",t)},t.prototype.edit=function(e,t,o){return put(this,"projects/"+encodeURIComponent(e)+"/wikis/"+t,o)},t.prototype.show=function(e,t,o){return get(this,"projects/"+encodeURIComponent(e)+"/wikis/"+t,o)},t.prototype.remove=function(e,t,o){return del(this,"projects/"+encodeURIComponent(e)+"/wikis/"+t,o)},t}(BaseService),APIServices=Object.freeze({Groups:Groups,GroupAccessRequests:GroupAccessRequests,GroupBadges:GroupBadges,GroupCustomAttributes:GroupCustomAttributes,GroupIssueBoards:GroupIssueBoards,GroupMembers:GroupMembers,GroupMilestones:GroupMilestones,GroupProjects:GroupProjects,GroupVariables:GroupVariables,Epics:Epics,EpicIssues:EpicIssues,EpicNotes:EpicNotes,EpicDiscussions:EpicDiscussions,Users:Users,UserCustomAttributes:UserCustomAttributes,UserEmails:UserEmails,UserImpersonationTokens:UserImpersonationTokens,UserKeys:UserKeys,UserGPGKeys:UserGPGKeys,Branches:Branches,Commits:Commits,CommitDiscussions:CommitDiscussions,Deployments:Deployments,DeployKeys:DeployKeys,Environments:Environments,Issues:Issues,IssueNotes:IssueNotes,IssueDiscussions:IssueDiscussions,IssueAwardEmojis:IssueAwardEmojis,Jobs:Jobs,Labels:Labels,MergeRequests:MergeRequests,MergeRequestAwardEmojis:MergeRequestAwardEmojis,MergeRequestDiscussions:MergeRequestDiscussions,MergeRequestNotes:MergeRequestNotes,Pipelines:Pipelines,PipelineSchedules:PipelineSchedules,PipelineScheduleVariables:PipelineScheduleVariables,Projects:Projects,ProjectAccessRequests:ProjectAccessRequests,ProjectBadges:ProjectBadges,ProjectCustomAttributes:ProjectCustomAttributes,ProjectImportExport:ProjectImportExport,ProjectIssueBoards:ProjectIssueBoards,ProjectHooks:ProjectHooks,ProjectMembers:ProjectMembers,ProjectMilestones:ProjectMilestones,ProjectSnippets:ProjectSnippets,ProjectSnippetNotes:ProjectSnippetNotes,ProjectSnippetDiscussions:ProjectSnippetDiscussions,ProjectSnippetAwardEmojis:ProjectSnippetAwardEmojis,ProtectedBranches:ProtectedBranches,ProtectedTags:ProtectedTags,ProjectVariables:ProjectVariables,Repositories:Repositories,RepositoryFiles:RepositoryFiles,Runners:Runners,Services:Services,Tags:Tags,Todos:Todos,Triggers:Triggers,PushRule:PushRule,ApplicationSettings:ApplicationSettings,BroadcastMessages:BroadcastMessages,Events:Events,FeatureFlags:FeatureFlags,GeoNodes:GeoNodes,GitignoreTemplates:GitignoreTemplates,GitLabCIYMLTemplates:GitLabCIYMLTemplates,Keys:Keys,Licence:Licence,LicenceTemplates:LicenceTemplates,Lint:Lint,Namespaces:Namespaces,NotificationSettings:NotificationSettings,Markdown:Markdown,PagesDomains:PagesDomains,Search:Search,SidekiqMetrics:SidekiqMetrics,Snippets:Snippets,SystemHooks:SystemHooks,Version:Version,Wikis:Wikis}),GroupsBundle=bundler({Groups:Groups,GroupAccessRequests:GroupAccessRequests,GroupBadges:GroupBadges,GroupCustomAttributes:GroupCustomAttributes,GroupIssueBoards:GroupIssueBoards,GroupMembers:GroupMembers,GroupMilestones:GroupMilestones,GroupProjects:GroupProjects,GroupVariables:GroupVariables,Epics:Epics,EpicIssues:EpicIssues,EpicNotes:EpicNotes,EpicDiscussions:EpicDiscussions}),UsersBundle=bundler({Users:Users,UserCustomAttributes:UserCustomAttributes,UserEmails:UserEmails,UserImpersonationTokens:UserImpersonationTokens,UserKeys:UserKeys,UserGPGKeys:UserGPGKeys}),ProjectsBundle=bundler({Branches:Branches,Commits:Commits,CommitDiscussions:CommitDiscussions,DeployKeys:DeployKeys,Deployments:Deployments,Environments:Environments,Issues:Issues,IssueAwardEmojis:IssueAwardEmojis,IssueNotes:IssueNotes,IssueDiscussions:IssueDiscussions,Jobs:Jobs,Labels:Labels,MergeRequests:MergeRequests,MergeRequestAwardEmojis:MergeRequestAwardEmojis,MergeRequestDiscussions:MergeRequestDiscussions,MergeRequestNotes:MergeRequestNotes,Pipelines:Pipelines,PipelineSchedules:PipelineSchedules,PipelineScheduleVariables:PipelineScheduleVariables,Projects:Projects,ProjectAccessRequests:ProjectAccessRequests,ProjectBadges:ProjectBadges,ProjectCustomAttributes:ProjectCustomAttributes,ProjectImportExport:ProjectImportExport,ProjectIssueBoards:ProjectIssueBoards,ProjectHooks:ProjectHooks,ProjectMembers:ProjectMembers,ProjectMilestones:ProjectMilestones,ProjectSnippets:ProjectSnippets,ProjectSnippetNotes:ProjectSnippetNotes,ProjectSnippetDiscussions:ProjectSnippetDiscussions,ProjectSnippetAwardEmojis:ProjectSnippetAwardEmojis,ProtectedBranches:ProtectedBranches,ProtectedTags:ProtectedTags,ProjectVariables:ProjectVariables,Repositories:Repositories,RepositoryFiles:RepositoryFiles,Runners:Runners,Services:Services,Tags:Tags,Triggers:Triggers}),Gitlab=bundler(APIServices);exports.GroupsBundle=GroupsBundle,exports.UsersBundle=UsersBundle,exports.ProjectsBundle=ProjectsBundle,exports.Gitlab=Gitlab,exports.Groups=Groups,exports.GroupAccessRequests=GroupAccessRequests,exports.GroupBadges=GroupBadges,exports.GroupCustomAttributes=GroupCustomAttributes,exports.GroupIssueBoards=GroupIssueBoards,exports.GroupMembers=GroupMembers,exports.GroupMilestones=GroupMilestones,exports.GroupProjects=GroupProjects,exports.GroupVariables=GroupVariables,exports.Epics=Epics,exports.EpicIssues=EpicIssues,exports.EpicNotes=EpicNotes,exports.EpicDiscussions=EpicDiscussions,exports.Users=Users,exports.UserCustomAttributes=UserCustomAttributes,exports.UserEmails=UserEmails,exports.UserImpersonationTokens=UserImpersonationTokens,exports.UserKeys=UserKeys,exports.UserGPGKeys=UserGPGKeys,exports.Branches=Branches,exports.Commits=Commits,exports.CommitDiscussions=CommitDiscussions,exports.Deployments=Deployments,exports.DeployKeys=DeployKeys,exports.Environments=Environments,exports.Issues=Issues,exports.IssueNotes=IssueNotes,exports.IssueDiscussions=IssueDiscussions,exports.IssueAwardEmojis=IssueAwardEmojis,exports.Jobs=Jobs,exports.Labels=Labels,exports.MergeRequests=MergeRequests,exports.MergeRequestAwardEmojis=MergeRequestAwardEmojis,exports.MergeRequestDiscussions=MergeRequestDiscussions,exports.MergeRequestNotes=MergeRequestNotes,exports.Pipelines=Pipelines,exports.PipelineSchedules=PipelineSchedules,exports.PipelineScheduleVariables=PipelineScheduleVariables,exports.Projects=Projects,exports.ProjectAccessRequests=ProjectAccessRequests,exports.ProjectBadges=ProjectBadges,exports.ProjectCustomAttributes=ProjectCustomAttributes,exports.ProjectImportExport=ProjectImportExport,exports.ProjectIssueBoards=ProjectIssueBoards,exports.ProjectHooks=ProjectHooks,exports.ProjectMembers=ProjectMembers,exports.ProjectMilestones=ProjectMilestones,exports.ProjectSnippets=ProjectSnippets,exports.ProjectSnippetNotes=ProjectSnippetNotes,exports.ProjectSnippetDiscussions=ProjectSnippetDiscussions,exports.ProjectSnippetAwardEmojis=ProjectSnippetAwardEmojis,exports.ProtectedBranches=ProtectedBranches,exports.ProtectedTags=ProtectedTags,exports.ProjectVariables=ProjectVariables,exports.Repositories=Repositories,exports.RepositoryFiles=RepositoryFiles,exports.Runners=Runners,exports.Services=Services,exports.Tags=Tags,exports.Todos=Todos,exports.Triggers=Triggers,exports.PushRule=PushRule,exports.ApplicationSettings=ApplicationSettings,exports.BroadcastMessages=BroadcastMessages,exports.Events=Events,exports.FeatureFlags=FeatureFlags,exports.GeoNodes=GeoNodes,exports.GitignoreTemplates=GitignoreTemplates,exports.GitLabCIYMLTemplates=GitLabCIYMLTemplates,exports.Keys=Keys,exports.Licence=Licence,exports.LicenceTemplates=LicenceTemplates,exports.Lint=Lint,exports.Namespaces=Namespaces,exports.NotificationSettings=NotificationSettings,exports.Markdown=Markdown,exports.PagesDomains=PagesDomains,exports.Search=Search,exports.SidekiqMetrics=SidekiqMetrics,exports.Snippets=Snippets,exports.SystemHooks=SystemHooks,exports.Version=Version,exports.Wikis=Wikis;
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
+
+var Request = _interopDefault(require('ky'));
+var humps = require('humps');
+var queryString = require('query-string');
+var FormData = _interopDefault(require('form-data'));
+var randomstring = _interopDefault(require('randomstring'));
+
+/*! *****************************************************************************
+Copyright (c) Microsoft Corporation. All rights reserved.
+Licensed under the Apache License, Version 2.0 (the "License"); you may not use
+this file except in compliance with the License. You may obtain a copy of the
+License at http://www.apache.org/licenses/LICENSE-2.0
+
+THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
+WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
+MERCHANTABLITY OR NON-INFRINGEMENT.
+
+See the Apache Version 2.0 License for specific language governing permissions
+and limitations under the License.
+***************************************************************************** */
+
+function __rest(s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+}
+
+function defaultRequest(service, endpoint, { body, query, sudo }) {
+    let urlStr = `${service.url}${endpoint}`;
+    if (query) {
+        urlStr += `?${queryString.stringify(humps.decamelizeKeys(query), { arrayFormat: 'bracket' })}`;
+    }
+    const headers = Object.assign({}, service.headers);
+    if (sudo) {
+        headers.sudo = sudo;
+    }
+    return [
+        urlStr,
+        {
+            headers,
+            body: body && typeof body !== 'object' ? body : undefined,
+            // TODO
+            // rejectUnauthorized: service.rejectUnauthorized,
+            json: typeof body === 'object' ? humps.decamelizeKeys(body) : undefined,
+        },
+    ];
+}
+async function handleResponse(response) {
+    const { headers, status, statusText } = await response;
+    const rawBody = await response.json();
+    let body;
+    if (Array.isArray(body)) {
+        body = rawBody;
+    }
+    else if (typeof rawBody === 'object' && rawBody !== null) {
+        body = humps.camelizeKeys(rawBody);
+    }
+    else {
+        body = {};
+    }
+    return {
+        body,
+        headers,
+        status,
+        statusText,
+    };
+}
+async function get(service, endpoint, options = {}) {
+    const { showPagination, maxPages, sudo } = options, query = __rest(options, ["showPagination", "maxPages", "sudo"]);
+    const requestOptions = defaultRequest(service, endpoint, {
+        query,
+        sudo,
+    });
+    const { headers, body } = await handleResponse(Request.get(...requestOptions));
+    const pagination = {
+        total: headers['x-total'],
+        next: headers['x-next-page'] || null,
+        current: headers['x-page'] || null,
+        previous: headers['x-prev-page'] || null,
+        perPage: headers['x-per-page'],
+        totalPages: headers['x-total-pages'],
+    };
+    const underLimit = maxPages ? pagination.current < maxPages : true;
+    // If not looking for a singular page and still under the max pages limit
+    // AND their is a next page, paginate
+    if (!query.page && underLimit && pagination.next) {
+        const more = await get(service, endpoint, Object.assign({ page: pagination.next }, options));
+        return [...(Array.isArray(body) ? body : []), ...(Array.isArray(more) ? more : [])];
+    }
+    return (query.page || maxPages) && showPagination ? { data: body, pagination } : body;
+}
+function stream(service, endpoint, options = ({} = {})) {
+    const Req = Request;
+    if (typeof Req.stream !== 'function') {
+        throw new Error('Not implementated! Arg!');
+    }
+    return Req.stream(...defaultRequest(service, endpoint, {
+        query: options,
+    }));
+}
+async function post(service, endpoint, options = {}) {
+    const { sudo } = options, body = __rest(options, ["sudo"]);
+    const response = await handleResponse(Request.post(...defaultRequest(service, endpoint, {
+        body,
+        sudo,
+    })));
+    return response.body;
+}
+async function put(service, endpoint, options = {}) {
+    const body = __rest(options, ["sudo"]);
+    const response = await handleResponse(Request.put(...defaultRequest(service, endpoint, {
+        body,
+    })));
+    return response.body;
+}
+async function del(service, endpoint, options = {}) {
+    const query = __rest(options, ["sudo"]);
+    const response = await handleResponse(Request.delete(...defaultRequest(service, endpoint, {
+        query,
+    })));
+    return response.body;
+}
+
+class BaseService {
+    constructor({ token, oauthToken, sudo, host = 'https://gitlab.com', url = '', version = 'v4', rejectUnauthorized = true, requester = Request, }) {
+        this.url = [host, 'api', version, url].join('/');
+        this.headers = {};
+        this.rejectUnauthorized = rejectUnauthorized;
+        this.requester = requester;
+        // Handle auth tokens
+        if (oauthToken)
+            this.headers.authorization = `Bearer ${oauthToken}`;
+        else if (token)
+            this.headers['private-token'] = token;
+        // Set sudo
+        if (sudo)
+            this.headers['Sudo'] = sudo;
+    }
+}
+
+function bundler(services) {
+    return function Bundle(options) {
+        Object.entries(services || {}).forEach(([name, ser]) => {
+            this[name] = new ser(options);
+        });
+    };
+}
+
+class Groups extends BaseService {
+    all(options) {
+        return get(this, 'groups', options);
+    }
+    create(options) {
+        return post(this, 'groups', options);
+    }
+    createLDAPLink(groupId, cn, groupAccess, provider, options) {
+        const gId = encodeURIComponent(groupId);
+        return post(this, `groups/${gId}/ldap_group_links`, Object.assign({ cn,
+            groupAccess,
+            provider }, options));
+    }
+    edit(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return put(this, `groups/${gId}`, options);
+    }
+    remove(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return del(this, `groups/${gId}`, options);
+    }
+    removeLDAPLink(groupId, cn, _a = {}) {
+        var { provider } = _a, options = __rest(_a, ["provider"]);
+        const gId = encodeURIComponent(groupId);
+        const url = provider ? `${provider}/${cn}` : `${cn}`;
+        return del(this, `groups/${gId}/ldap_group_links/${url}`, options);
+    }
+    search(nameOrPath, options) {
+        return get(this, 'groups', Object.assign({ search: nameOrPath }, options));
+    }
+    show(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return get(this, `groups/${gId}`, options);
+    }
+    subgroups(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return get(this, `groups/${gId}/subgroups`, options);
+    }
+    syncLDAP(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return post(this, `groups/${gId}/ldap_sync`, options);
+    }
+}
+
+class ResourceAccessRequests extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/access_requests`);
+    }
+    request(resourceId) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/access_requests`);
+    }
+    approve(resourceId, userId, { accessLevel }) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return post(this, `${rId}/access_requests/${uId}/approve`, {
+            accessLevel,
+        });
+    }
+    deny(resourceId, userId) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return del(this, `${rId}/access_requests/${uId}`);
+    }
+}
+
+function url(projectId, resourceType, resourceId, awardId, noteId) {
+    const [pId, rId] = [projectId, resourceId].map(encodeURIComponent);
+    const output = [pId, resourceType, rId];
+    if (noteId)
+        output.push('notes', encodeURIComponent(noteId));
+    output.push(encodeURIComponent('award_emoji'));
+    if (awardId)
+        output.push(encodeURIComponent(awardId));
+    return output.join('/');
+}
+class ResourceAwardsEmojis extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: 'projects' }, options));
+        this.resourceType = resourceType;
+    }
+    all(projectId, resourceId, noteId, options) {
+        return get(this, url(projectId, this.resourceType, resourceId, null, noteId), options);
+    }
+    award(projectId, resourceId, name, noteId, options) {
+        return post(this, url(projectId, this.resourceType, resourceId, null, noteId), Object.assign({ name }, options));
+    }
+    remove(projectId, resourceId, awardId, noteId, options) {
+        return del(this, url(projectId, this.resourceType, resourceId, awardId, noteId), options);
+    }
+    show(projectId, resourceId, awardId, noteId, options) {
+        return get(this, url(projectId, this.resourceType, resourceId, awardId, noteId), options);
+    }
+}
+
+class ResourceBadges extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    add(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/badges`, options);
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/badges`, options);
+    }
+    edit(resourceId, badgeId, options) {
+        const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+        return put(this, `${rId}/badges/${bId}`, options);
+    }
+    preview(resourceId, linkUrl, imageUrl, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/badges/render`, Object.assign({ linkUrl, imageUrl }, options));
+    }
+    remove(resourceId, badgeId, options) {
+        const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+        return del(this, `${rId}/badges/${bId}`, options);
+    }
+    show(resourceId, badgeId, options) {
+        const [rId, bId] = [resourceId, badgeId].map(encodeURIComponent);
+        return get(this, `${rId}/badges/${bId}`, options);
+    }
+}
+
+class ResourceCustomAttributes extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/custom_attributes`, options);
+    }
+    set(resourceId, customAttributeId, value, options) {
+        const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+        return put(this, `${rId}/custom_attributes/${cId}`, Object.assign({ value }, options));
+    }
+    remove(resourceId, customAttributeId, options) {
+        const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+        return del(this, `${rId}/custom_attributes/${cId}`, options);
+    }
+    show(resourceId, customAttributeId, options) {
+        const [rId, cId] = [resourceId, customAttributeId].map(encodeURIComponent);
+        return get(this, `${rId}/custom_attributes/${cId}`, options);
+    }
+}
+
+class ResourceDiscussions extends BaseService {
+    constructor(resourceType, resource2Type, options) {
+        super(Object.assign({ url: resourceType }, options));
+        this.resource2Type = resource2Type;
+    }
+    addNote(resourceId, resource2Id, discussionId, noteId, content, options) {
+        if (!content)
+            throw new Error('Missing required content argument');
+        const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+        return put(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, Object.assign({ body: content }, options));
+    }
+    all(resourceId, resource2Id, options) {
+        const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+        return get(this, `${rId}/${this.resource2Type}/${r2Id}/discussions`, options);
+    }
+    create(resourceId, resource2Id, content, options) {
+        if (!content)
+            throw new Error('Missing required content argument');
+        const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+        return post(this, `${rId}/${this.resource2Type}/${r2Id}/discussions`, Object.assign({ body: content }, options));
+    }
+    editNote(resourceId, resource2Id, discussionId, noteId, options) {
+        const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+        return put(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, { body: options });
+    }
+    removeNote(resourceId, resource2Id, discussionId, noteId, options) {
+        const [rId, r2Id, dId, nId] = [resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent);
+        return del(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}/notes/${nId}`, options);
+    }
+    show(resourceId, resource2Id, discussionId, options) {
+        const [rId, r2Id, dId] = [resourceId, resource2Id, discussionId].map(encodeURIComponent);
+        return get(this, `${rId}/${this.resource2Type}/${r2Id}/discussions/${dId}`, options);
+    }
+}
+
+class ResourceIssueBoards extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/boards`, options);
+    }
+    create(resourceId, name, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/boards`, Object.assign({ name }, options));
+    }
+    createList(resourceId, boardId, labelId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return post(this, `${rId}/boards/${bId}/lists`, Object.assign({ labelId }, options));
+    }
+    edit(resourceId, boardId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return put(this, `${rId}/boards/${bId}`, options);
+    }
+    editList(resourceId, boardId, listId, position, options) {
+        const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+        return put(this, `${rId}/boards/${bId}/lists/${lId}`, Object.assign({ position }, options));
+    }
+    lists(resourceId, boardId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return get(this, `${rId}/boards/${bId}/lists`, options);
+    }
+    remove(resourceId, boardId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return del(this, `${rId}/boards/${bId}`, options);
+    }
+    removeList(resourceId, boardId, listId, options) {
+        const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+        return del(this, `${rId}/boards/${bId}/lists/${lId}`, options);
+    }
+    show(resourceId, boardId, options) {
+        const [rId, bId] = [resourceId, boardId].map(encodeURIComponent);
+        return get(this, `${rId}/boards/${bId}`, options);
+    }
+    showList(resourceId, boardId, listId, options) {
+        const [rId, bId, lId] = [resourceId, boardId, listId].map(encodeURIComponent);
+        return get(this, `${rId}/boards/${bId}/lists/${lId}`, options);
+    }
+}
+
+class ResourceMembers extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, includeInherited = false, options) {
+        const rId = encodeURIComponent(resourceId);
+        const url = [rId, 'members'];
+        if (includeInherited)
+            url.push('all');
+        return get(this, url.join('/'), { options });
+    }
+    add(resourceId, userId, accessLevel, options) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return post(this, `${rId}/members`, Object.assign({ userId: uId, accessLevel }, options));
+    }
+    edit(resourceId, userId, accessLevel, options) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return put(this, `${rId}/members/${uId}`, Object.assign({ accessLevel }, options));
+    }
+    show(resourceId, userId, options) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return get(this, `${rId}/members/${uId}`, options);
+    }
+    remove(resourceId, userId, options) {
+        const [rId, uId] = [resourceId, userId].map(encodeURIComponent);
+        return del(this, `${rId}/members/${uId}`, options);
+    }
+}
+
+class ResourceMilestones extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/milestones`, options);
+    }
+    create(resourceId, title, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/milestones`, Object.assign({ title }, options));
+    }
+    edit(resourceId, milestoneId, options) {
+        const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+        return put(this, `${rId}/milestones/${mId}`, options);
+    }
+    issues(resourceId, milestoneId, options) {
+        const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+        return get(this, `${rId}/milestones/${mId}/issues`, options);
+    }
+    mergeRequests(resourceId, milestoneId, options) {
+        const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+        return get(this, `${rId}/milestones/${mId}/merge_requests`, options);
+    }
+    show(resourceId, milestoneId, options) {
+        const [rId, mId] = [resourceId, milestoneId].map(encodeURIComponent);
+        return get(this, `${rId}/milestones/${mId}`, options);
+    }
+}
+
+class ResourceNotes extends BaseService {
+    constructor(resourceType, resource2Type, options) {
+        super(Object.assign({ url: resourceType }, options));
+        this.resource2Type = resource2Type;
+    }
+    all(resourceId, resource2Id, options) {
+        const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+        return get(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, options);
+    }
+    create(resourceId, resource2Id, body, options) {
+        const [rId, r2Id] = [resourceId, resource2Id].map(encodeURIComponent);
+        return post(this, `${rId}/${this.resource2Type}/${r2Id}/notes`, Object.assign({ body }, options));
+    }
+    edit(resourceId, resource2Id, noteId, body, options) {
+        const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+        return put(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, Object.assign({ body }, options));
+    }
+    remove(resourceId, resource2Id, noteId, options) {
+        const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+        return del(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);
+    }
+    show(resourceId, resource2Id, noteId, options) {
+        const [rId, r2Id, nId] = [resourceId, resource2Id, noteId].map(encodeURIComponent);
+        return get(this, `${rId}/${this.resource2Type}/${r2Id}/notes/${nId}`, options);
+    }
+}
+
+class ResourceTemplates extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: ['templates', resourceType].join('/') }, options));
+    }
+    all(options) {
+        return get(this, '', options);
+    }
+    show(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}`, options);
+    }
+}
+
+class ResourceVariables extends BaseService {
+    constructor(resourceType, options) {
+        super(Object.assign({ url: resourceType }, options));
+    }
+    all(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return get(this, `${rId}/variables`, options);
+    }
+    create(resourceId, options) {
+        const rId = encodeURIComponent(resourceId);
+        return post(this, `${rId}/variables`, options);
+    }
+    edit(resourceId, keyId, options) {
+        const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+        return put(this, `${rId}/variables/${kId}`, options);
+    }
+    show(resourceId, keyId, options) {
+        const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+        return get(this, `${rId}/variables/${kId}`, options);
+    }
+    remove(resourceId, keyId, options) {
+        const [rId, kId] = [resourceId, keyId].map(encodeURIComponent);
+        return del(this, `${rId}/variables/${kId}`, options);
+    }
+}
+
+class GroupAccessRequests extends ResourceAccessRequests {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupBadges extends ResourceBadges {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupCustomAttributes extends ResourceCustomAttributes {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupIssueBoards extends ResourceIssueBoards {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupMembers extends ResourceMembers {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupMilestones extends ResourceMilestones {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class GroupProjects extends BaseService {
+    all(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return get(this, `groups/${gId}/projects`, options);
+    }
+    add(groupId, projectId, options) {
+        const [gId, pId] = [groupId, projectId].map(encodeURIComponent);
+        return post(this, `groups/${gId}/projects/${pId}`, options);
+    }
+}
+
+class GroupVariables extends ResourceVariables {
+    constructor(options) {
+        super('groups', options);
+    }
+}
+
+class Epics extends BaseService {
+    all(groupId, options) {
+        const gId = encodeURIComponent(groupId);
+        return get(this, `groups/${gId}/epics`, options);
+    }
+    create(groupId, title, options) {
+        const gId = encodeURIComponent(groupId);
+        return post(this, `groups/${gId}/epics`, Object.assign({ title }, options));
+    }
+    edit(groupId, epicId, options) {
+        const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+        return put(this, `groups/${gId}/epics/${eId}`, options);
+    }
+    remove(groupId, epicId, options) {
+        const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+        return del(this, `groups/${gId}/epics/${eId}`, options);
+    }
+    show(groupId, epicId, options) {
+        const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+        return get(this, `groups/${gId}/epics/${eId}`, options);
+    }
+}
+
+class EpicIssues extends BaseService {
+    all(groupId, epicId, options) {
+        const [gId, eId] = [groupId, epicId].map(encodeURIComponent);
+        return get(this, `groups/${gId}/epics/${eId}/issues`, options);
+    }
+    assign(groupId, epicId, issueId, options) {
+        const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+        return put(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+    }
+    edit(groupId, epicId, issueId, options) {
+        const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+        return del(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+    }
+    remove(groupId, epicId, issueId, options) {
+        const [gId, eId, iId] = [groupId, epicId, issueId].map(encodeURIComponent);
+        return del(this, `groups/${gId}/epics/${eId}/issues/${iId}`, options);
+    }
+}
+
+class EpicNotes extends ResourceNotes {
+    constructor(options) {
+        super('groups', 'epics', options);
+    }
+}
+
+class EpicDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('groups', 'epics', options);
+    }
+}
+
+class Users extends BaseService {
+    all(options) {
+        return get(this, 'users', options);
+    }
+    activities(options) {
+        return get(this, 'users/activities', options);
+    }
+    projects(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return get(this, `users/${uId}/projects`, options);
+    }
+    block(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return post(this, `users/${uId}/block`, options);
+    }
+    create(options) {
+        return post(this, 'users', options);
+    }
+    current(options) {
+        return get(this, 'user', options);
+    }
+    edit(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return put(this, `users/${uId}`, options);
+    }
+    events(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return get(this, `users/${uId}/events`, options);
+    }
+    session(email, password, options) {
+        return post(this, 'session', Object.assign({ email,
+            password }, options));
+    }
+    search(emailOrUsername, options) {
+        return get(this, 'users', Object.assign({ search: emailOrUsername }, options));
+    }
+    show(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return get(this, `users/${uId}`, options);
+    }
+    remove(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return del(this, `users/${uId}`, options);
+    }
+    unblock(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return post(this, `users/${uId}/unblock`, options);
+    }
+}
+
+class UserCustomAttributes extends ResourceCustomAttributes {
+    constructor(options) {
+        super('users', options);
+    }
+}
+
+const url$1 = userId => (userId ? `users/${encodeURIComponent(userId)}/emails` : 'user/emails');
+class UserEmails extends BaseService {
+    all(_a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return get(this, url$1(userId), options);
+    }
+    add(email, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return post(this, url$1(userId), Object.assign({ email }, options));
+    }
+    show(emailId, options) {
+        const eId = encodeURIComponent(emailId);
+        return get(this, `user/emails/${eId}`, options);
+    }
+    remove(emailId, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const eId = encodeURIComponent(emailId);
+        return del(this, `${url$1(userId)}/${eId}`, options);
+    }
+}
+
+class UserImpersonationTokens extends BaseService {
+    all(userId, options) {
+        const uId = encodeURIComponent(userId);
+        return get(this, `users/${uId}/impersonation_tokens`, options);
+    }
+    add(userId, name, scopes, expiresAt, options) {
+        const uId = encodeURIComponent(userId);
+        return post(this, `users/${uId}/impersonation_tokens`, Object.assign({ name,
+            expiresAt,
+            scopes }, options));
+    }
+    show(userId, tokenId, options) {
+        const [uId, tId] = [userId, tokenId].map(encodeURIComponent);
+        return get(this, `users/${uId}/impersonation_tokens/${tId}`, options);
+    }
+    revoke(userId, tokenId, options) {
+        const [uId, tId] = [userId, tokenId].map(encodeURIComponent);
+        return del(this, `users/${uId}/impersonation_tokens/${tId}`, options);
+    }
+}
+
+const url$2 = (userId) => (userId ? `users/${encodeURIComponent(userId)}/keys` : 'user/keys');
+class UserKeys extends BaseService {
+    all(_a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return get(this, url$2(userId), options);
+    }
+    create(title, key, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return post(this, url$2(userId), Object.assign({ title,
+            key }, options));
+    }
+    show(keyId, options) {
+        const kId = encodeURIComponent(keyId);
+        return get(this, `user/keys/${kId}`, options);
+    }
+    remove(keyId, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const kId = encodeURIComponent(keyId);
+        return del(this, `${url$2(userId)}/${kId}`, options);
+    }
+}
+
+const url$3 = userId => (userId ? `users/${encodeURIComponent(userId)}/gpg_keys` : 'users/gpg_keys');
+class UserGPGKeys extends BaseService {
+    all(_a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return get(this, url$3(userId), options);
+    }
+    add(title, key, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        return post(this, url$3(userId), Object.assign({ title,
+            key }, options));
+    }
+    show(keyId, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const kId = encodeURIComponent(keyId);
+        return get(this, `${url$3(userId)}/${kId}`, options);
+    }
+    remove(keyId, _a = {}) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const kId = encodeURIComponent(keyId);
+        return del(this, `${url$3(userId)}/${kId}`, options);
+    }
+}
+
+class Branches extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/branches`, options);
+    }
+    create(projectId, branchName, ref, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/branches`, Object.assign({ branch: branchName, ref }, options));
+    }
+    protect(projectId, branchName, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/protected_branches`, Object.assign({ name: branchName }, options));
+    }
+    remove(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return del(this, `projects/${pId}/repository/branches/${bName}`, options);
+    }
+    show(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return get(this, `projects/${pId}/repository/branches/${bName}`, options);
+    }
+    unprotect(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return put(this, `projects/${pId}/repository/branches/${bName}/unprotect`, options);
+    }
+}
+
+class Commits extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits`, options);
+    }
+    cherryPick(projectId, sha, branch, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/commits/${sha}/cherry_pick`, Object.assign({ branch }, options));
+    }
+    comments(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}/comments`, options);
+    }
+    create(projectId, branch, message, actions = [], options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/commits`, Object.assign({ branch, commitMessage: message, actions }, options));
+    }
+    createComment(projectId, sha, note, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/commits/${sha}/comments`, Object.assign({ note }, options));
+    }
+    diff(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}/diff`, options);
+    }
+    editStatus(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/statuses/${sha}`, options);
+    }
+    references(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}/refs`, options);
+    }
+    show(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}`, options);
+    }
+    status(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/commits/${sha}/statuses`, options);
+    }
+}
+
+class CommitDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('projects', 'commits', options);
+    }
+}
+
+class Deployments extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/deployments`, options);
+    }
+    show(projectId, deploymentId, options) {
+        const [pId, dId] = [projectId, deploymentId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/deployments/${dId}`, options);
+    }
+}
+
+class DeployKeys extends BaseService {
+    add(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/deploy_keys`, options);
+    }
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/deploy_keys`, options);
+    }
+    show(projectId, keyId, options) {
+        const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/deploy_keys/${kId}`, options);
+    }
+    enable(projectId, keyId, options) {
+        const [pId, kId] = [projectId, keyId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/deploy_keys/${kId}/enable`, options);
+    }
+}
+
+class Environments extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/environments`, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/environments`, options);
+    }
+    edit(projectId, environmentId, options) {
+        const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/environments/${eId}`, options);
+    }
+    remove(projectId, environmentId, options) {
+        const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/environments/${eId}`, options);
+    }
+    stop(projectId, environmentId, options) {
+        const [pId, eId] = [projectId, environmentId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/environments/${eId}/stop`, options);
+    }
+}
+
+class Issues extends BaseService {
+    addSpentTime(projectId, issueId, duration, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/add_spent_time`, Object.assign({ duration }, options));
+    }
+    addTimeEstimate(projectId, issueId, duration, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/time_estimate`, Object.assign({ duration }, options));
+    }
+    all(_a) {
+        var { projectId } = _a, options = __rest(_a, ["projectId"]);
+        const url = projectId ? `projects/${encodeURIComponent(projectId)}/issues` : 'issues';
+        return get(this, url, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/issues`, options);
+    }
+    edit(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/issues/${iId}`, options);
+    }
+    link(projectId, issueIId, targetProjectId, targetIssueId, options) {
+        const [pId, iId] = [projectId, issueIId].map(encodeURIComponent);
+        const [targetpId, targetIId] = [targetProjectId, targetIssueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/links`, Object.assign({ targetProjectId: targetpId, targetIssueId: targetIId }, options));
+    }
+    participants(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/issues/${iId}/participants`, options);
+    }
+    remove(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/issues/${iId}`, options);
+    }
+    resetSpentTime(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/reset_spent_time`, options);
+    }
+    resetTimeEstimate(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/reset_time_estimate`, options);
+    }
+    show(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/issues/${iId}`, options);
+    }
+    subscribe(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${iId}/subscribe`, options);
+    }
+    timeStats(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/issues/${iId}/time_stats`, options);
+    }
+    unsubscribe(projectId, issueId, options) {
+        const [pId, iId] = [projectId, issueId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/issues/${iId}/unsubscribe`, options);
+    }
+}
+
+class IssueNotes extends ResourceNotes {
+    constructor(options) {
+        super('projects', 'issues', options);
+    }
+}
+
+class IssueDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('projects', 'issues', options);
+    }
+}
+
+class IssueAwardEmojis extends ResourceAwardsEmojis {
+    constructor(options) {
+        super('issues', options);
+    }
+}
+
+class Jobs extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/jobs`, options);
+    }
+    cancel(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/cancel`, options);
+    }
+    downloadSingleArtifactFile(projectId, jobId, artifactPath, _a) {
+        var { stream: stream$$1 = false } = _a, options = __rest(_a, ["stream"]);
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        if (stream$$1) {
+            return stream(this, `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`, options);
+        }
+        return get(this, `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`, options);
+    }
+    downloadLatestArtifactFile(projectId, ref, name, _a) {
+        var { stream: stream$$1 = false } = _a, options = __rest(_a, ["stream"]);
+        const [pId, rId, jobName] = [projectId, ref, name].map(encodeURIComponent);
+        if (stream$$1) {
+            return stream(this, `projects/${pId}/jobs/artifacts/${rId}/download?job=${jobName}`, options);
+        }
+        return get(this, `projects/${pId}/jobs/artifacts/${rId}/download?job=${jobName}`, options);
+    }
+    downloadTraceFile(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/jobs/${jId}/trace`, options);
+    }
+    erase(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/erase`, options);
+    }
+    keepArtifacts(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/artifacts/keep`, options);
+    }
+    play(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/play`, options);
+    }
+    retry(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/jobs/${jId}/retry`, options);
+    }
+    show(projectId, jobId, options) {
+        const [pId, jId] = [projectId, jobId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/jobs/${jId}`, options);
+    }
+    showPipelineJobs(projectId, pipelineId, options) {
+        const [pId, ppId] = [projectId, pipelineId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/pipelines/${ppId}/jobs`, options);
+    }
+}
+
+class Labels extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/labels`, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/labels`, options);
+    }
+    edit(projectId, labelName, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/labels`, Object.assign({ name: labelName }, options));
+    }
+    remove(projectId, labelName, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/labels`, Object.assign({ name: labelName }, options));
+    }
+    subscribe(projectId, labelId, options) {
+        const [pId, lId] = [projectId, labelId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${lId}/subscribe`, options);
+    }
+    unsubscribe(projectId, labelId, options) {
+        const [pId, lId] = [projectId, labelId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/issues/${lId}/unsubscribe`, options);
+    }
+}
+
+class MergeRequests extends BaseService {
+    accept(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/merge_requests/${mIId}/merge`, options);
+    }
+    addSpentTime(projectId, mergerequestIId, duration, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${mIId}/add_spent_time`, Object.assign({ duration }, options));
+    }
+    addTimeEstimate(projectId, mergerequestIId, duration, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/issues/${mIId}/time_estimate`, Object.assign({ duration }, options));
+    }
+    all(_a) {
+        var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+        let url;
+        if (projectId) {
+            url = `projects/${encodeURIComponent(projectId)}/merge_requests`;
+        }
+        else if (groupId) {
+            url = `groups/${encodeURIComponent(groupId)}/merge_requests`;
+        }
+        else {
+            url = 'merge_requests';
+        }
+        return get(this, url, options);
+    }
+    approve(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/merge_requests/${mIId}/approve`, options);
+    }
+    approvals(projectId, _a) {
+        var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        let url;
+        if (mergerequestIId) {
+            url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+        }
+        else {
+            url = `projects/${pId}/approvals`;
+        }
+        return get(this, url, options);
+    }
+    approvers(projectId, approverIds, approverGroupIds, _a) {
+        var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        let url;
+        if (mergerequestIId) {
+            url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+        }
+        else {
+            url = `projects/${pId}/approvals`;
+        }
+        return post(this, url, Object.assign({ approverIds, approverGroupIds }, options));
+    }
+    cancelOnPipelineSucess(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/merge_requests/${mIId}/cancel_merge_when_pipeline_succeeds`, options);
+    }
+    changes(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/changes`, options);
+    }
+    closesIssues(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/closes_issues`, options);
+    }
+    commits(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/commits`, options);
+    }
+    create(projectId, sourceBranch, targetBranch, title, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/merge_requests`, Object.assign({ id: pId, sourceBranch,
+            targetBranch,
+            title }, options));
+    }
+    edit(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/merge_requests/${mIId}`, options);
+    }
+    editApprovals(projectId, _a) {
+        var { mergerequestIId } = _a, options = __rest(_a, ["mergerequestIId"]);
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        let url;
+        if (mergerequestIId) {
+            url = `projects/${pId}/merge_requests/${mIId}/approvals`;
+        }
+        else {
+            url = `projects/${pId}/approvals`;
+        }
+        return post(this, url, options);
+    }
+    pipelines(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/pipelines`, options);
+    }
+    remove(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/merge_requests/${mIId}`, options);
+    }
+    resetSpentTime(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/merge_requests/${mIId}/reset_spent_time`, options);
+    }
+    resetTimeEstimate(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/merge_requests/${mIId}/reset_time_estimate`, options);
+    }
+    show(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}`, options);
+    }
+    timeStats(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/time_stats`, options);
+    }
+    version(projectId, mergerequestIId, versionId, options) {
+        const [pId, mIId, vId] = [projectId, mergerequestIId, versionId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/versions/${vId}`, options);
+    }
+    versions(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/merge_requests/${mIId}/versions`, options);
+    }
+    unapprove(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/merge_requests/${mIId}/approve`, options);
+    }
+    unsubscribe(projectId, mergerequestIId, options) {
+        const [pId, mIId] = [projectId, mergerequestIId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/merge_requests/${mIId}/unsubscribe`, options);
+    }
+}
+
+class MergeRequestAwardEmojis extends ResourceAwardsEmojis {
+    constructor(options) {
+        super('merge_requests', options);
+    }
+}
+
+class MergeRequestDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('projects', 'merge_requests', options);
+    }
+}
+
+class MergeRequestNotes extends ResourceNotes {
+    constructor(options) {
+        super('projects', 'merge_requests', options);
+    }
+}
+
+class Pipelines extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pipelines`, options);
+    }
+    create(projectId, ref, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pipeline`, Object.assign({ ref }, options));
+    }
+    show(projectId, pipelineId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pipelines/${pipelineId}`, options);
+    }
+    retry(projectId, pipelineId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pipelines/${pipelineId}/retry`, options);
+    }
+    cancel(projectId, pipelineId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pipelines/${pipelineId}/cancel`, options);
+    }
+    showJobs(projectId, pipelineId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pipelines/${pipelineId}/jobs`, options);
+    }
+}
+
+class PipelineSchedules extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pipeline_schedules`, options);
+    }
+    create(projectId, description, ref, cron, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pipeline_schedules`, Object.assign({ description,
+            ref,
+            cron }, options));
+    }
+    edit(projectId, scheduleId, options) {
+        const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+    }
+    remove(projectId, scheduleId, options) {
+        const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+    }
+    show(projectId, scheduleId, options) {
+        const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/pipeline_schedules/${sId}`, options);
+    }
+    takeOwnership(projectId, scheduleId, options) {
+        const [pId, sId] = [projectId, scheduleId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/pipeline_schedules/${sId}/take_ownership`, options);
+    }
+}
+
+class PipelineScheduleVariables extends BaseService {
+    all(projectId, pipelineScheduleId, options) {
+        const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/pipeline_schedules/${psId}/variables`, options);
+    }
+    create(projectId, pipelineScheduleId, options) {
+        const [pId, psId] = [projectId, pipelineScheduleId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/pipeline_schedules/${psId}/variables`, options);
+    }
+    edit(projectId, pipelineScheduleId, keyId, options) {
+        const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+    }
+    show(projectId, pipelineScheduleId, keyId, options) {
+        const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+    }
+    remove(projectId, pipelineScheduleId, keyId, options) {
+        const [pId, psId, kId] = [projectId, pipelineScheduleId, keyId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/pipeline_schedules/${psId}/variables/${kId}`, options);
+    }
+}
+
+class Projects extends BaseService {
+    all(options) {
+        return get(this, 'projects', options);
+    }
+    archive(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/archive`, options);
+    }
+    create(_a) {
+        var { userId } = _a, options = __rest(_a, ["userId"]);
+        const url = userId ? `projects/user/${encodeURIComponent(userId)}` : 'projects';
+        return post(this, url, options);
+    }
+    edit(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}`, options);
+    }
+    events(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/events`, options);
+    }
+    fork(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/fork`, options);
+    }
+    forks(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/forks`, options);
+    }
+    languages(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/languages`, options);
+    }
+    mirrorPull(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/mirror/pull`, options);
+    }
+    remove(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}`, options);
+    }
+    search(projectName) {
+        return get(this, 'projects', { search: projectName });
+    }
+    share(projectId, groupId, groupAccess, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/share`, Object.assign({ groupId, groupAccess }, options));
+    }
+    show(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}`, options);
+    }
+    star(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/star`, options);
+    }
+    statuses(projectId, sha, state, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/statuses/${sha}`, Object.assign({ state }, options));
+    }
+    transfer(projectId, namespaceId) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/transfer`, { namespace: namespaceId });
+    }
+    unarchive(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/unarchive`, options);
+    }
+    unshare(projectId, groupId, options) {
+        const [pId, gId] = [projectId, groupId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/share${gId}`, options);
+    }
+    unstar(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/unstar`, options);
+    }
+    updatePushRule(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/push_rule`, options);
+    }
+    upload(projectId, content, { fileName = randomstring(8) }) {
+        const pId = encodeURIComponent(projectId);
+        const form = new FormData();
+        form.append(fileName, {
+            file: {
+                value: content,
+                options: {
+                    filename: fileName,
+                    contentType: 'application/octet-stream',
+                },
+            },
+        });
+        return post(this, `projects/${pId}/uploads`, form);
+    }
+}
+
+class ProjectAccessRequests extends ResourceAccessRequests {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectBadges extends ResourceBadges {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectCustomAttributes extends ResourceCustomAttributes {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectImportExport extends BaseService {
+    download(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/export/download`, options);
+    }
+    exportStatus(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/export`, options);
+    }
+    import(content, path, options) {
+        const form = new FormData();
+        form.append(path, {
+            file: {
+                value: content,
+                options: {
+                    filename: path,
+                    contentType: 'application/octet-stream',
+                },
+            },
+        });
+        return post(this, 'projects/import', Object.assign({}, form, options));
+    }
+    importStatus(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/import`, options);
+    }
+    schedule(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/export`, options);
+    }
+}
+
+class ProjectIssueBoards extends ResourceIssueBoards {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectHooks extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/hooks`, options);
+    }
+    show(projectId, hookId, options) {
+        const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/hooks/${hId}`, options);
+    }
+    add(projectId, url, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/hooks`, Object.assign({ url }, options));
+    }
+    edit(projectId, hookId, url, options) {
+        const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/hooks/${hId}`, Object.assign({ url }, options));
+    }
+    remove(projectId, hookId, options) {
+        const [pId, hId] = [projectId, hookId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/hooks/${hId}`, options);
+    }
+}
+
+class ProjectMembers extends ResourceMembers {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectMilestones extends ResourceMilestones {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class ProjectSnippets extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/snippets`, options);
+    }
+    content(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/snippets/${sId}/raw`, options);
+    }
+    create(projectId, title, fileName, code, visibility, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/snippets`, Object.assign({ title,
+            fileName,
+            code,
+            visibility }, options));
+    }
+    edit(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/snippets/${sId}`, options);
+    }
+    remove(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/snippets/${sId}`, options);
+    }
+    show(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/snippets/${sId}`, options);
+    }
+    userAgentDetails(projectId, snippetId, options) {
+        const [pId, sId] = [projectId, snippetId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/snippets/${sId}/user_agent_detail`, options);
+    }
+}
+
+class ProjectSnippetNotes extends ResourceNotes {
+    constructor(options) {
+        super('projects', 'snippets', options);
+    }
+}
+
+class ProjectSnippetDiscussions extends ResourceDiscussions {
+    constructor(options) {
+        super('projects', 'snippets', options);
+    }
+}
+
+class ProjectSnippetAwardEmojis extends ResourceAwardsEmojis {
+    constructor(options) {
+        super('issues', options);
+    }
+}
+
+class ProtectedBranches extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/protected_branches`, options);
+    }
+    protect(projectId, branchName, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/protected_branches`, Object.assign({ name: branchName }, options));
+    }
+    show(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return get(this, `projects/${pId}/protected_branches/${bName}`, options);
+    }
+    unprotect(projectId, branchName, options) {
+        const [pId, bName] = [projectId, branchName].map(encodeURIComponent);
+        return del(this, `projects/${pId}/protected_branches/${bName}`, options);
+    }
+}
+
+class ProtectedTags extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/protected_tags`, options);
+    }
+    protect(projectId, tagName, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/protected_tags`, Object.assign({ name: tagName }, options));
+    }
+    show(projectId, tagName, options) {
+        const [pId, tName] = [projectId, tagName].map(encodeURIComponent);
+        return get(this, `projects/${pId}/protected_tags/${tName}`, options);
+    }
+    unprotect(projectId, tagName, options) {
+        const [pId, tName] = [projectId, tagName].map(encodeURIComponent);
+        return del(this, `projects/${pId}/protected_tags/${tName}`, options);
+    }
+}
+
+class ProjectVariables extends ResourceVariables {
+    constructor(options) {
+        super('projects', options);
+    }
+}
+
+class Repositories extends BaseService {
+    compare(projectId, from, to, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/compare`, Object.assign({ from,
+            to }, options));
+    }
+    contributors(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/contributors`, options);
+    }
+    showArchive(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/archive`, options);
+    }
+    showBlob(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/blobs/${sha}`, options);
+    }
+    showBlobRaw(projectId, sha, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/blobs/${sha}/raw`, options);
+    }
+    tree(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/tree`, options);
+    }
+}
+
+class RepositoryFiles extends BaseService {
+    create(projectId, filePath, branch, content, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return post(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch,
+            content }, options));
+    }
+    edit(projectId, filePath, branch, content, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return put(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch,
+            content }, options));
+    }
+    remove(projectId, filePath, branch, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return del(this, `projects/${pId}/repository/files/${path}`, Object.assign({ branch }, options));
+    }
+    show(projectId, filePath, ref, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return get(this, `projects/${pId}/repository/files/${path}`, Object.assign({ ref }, options));
+    }
+    showRaw(projectId, filePath, ref, options) {
+        const [pId, path] = [projectId, filePath].map(encodeURIComponent);
+        return get(this, `projects/${pId}/repository/files/${path}/raw`, Object.assign({ ref }, options));
+    }
+}
+
+class Runners extends BaseService {
+    all(_a) {
+        var { projectId } = _a, options = __rest(_a, ["projectId"]);
+        const url = projectId ? `projects/${encodeURIComponent(projectId)}/runners` : 'runners/all';
+        return get(this, url, options);
+    }
+    allOwned(options) {
+        return get(this, 'runners', options);
+    }
+    edit(runnerId, options) {
+        const rId = encodeURIComponent(runnerId);
+        return put(this, `runners/${rId}`, options);
+    }
+    enable(projectId, runnerId, options) {
+        const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);
+        return post(this, `projects/${pId}/runners`, Object.assign({ runnerId: rId }, options));
+    }
+    disable(projectId, runnerId, options) {
+        const [pId, rId] = [projectId, runnerId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/runners/${rId}`, options);
+    }
+    jobs(runnerId, options) {
+        const rId = encodeURIComponent(runnerId);
+        return get(this, `runners/${rId}/jobs`, options);
+    }
+    remove(runnerId, options) {
+        const rId = encodeURIComponent(runnerId);
+        return del(this, `runners/${rId}`, options);
+    }
+    show(runnerId, options) {
+        const rId = encodeURIComponent(runnerId);
+        return get(this, `runners/${rId}`, options);
+    }
+}
+
+class Services extends BaseService {
+    edit(projectId, serviceName, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/services/${serviceName}`, options);
+    }
+    remove(projectId, serviceName, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/services/${serviceName}`, options);
+    }
+    show(projectId, serviceName, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/services/${serviceName}`, options);
+    }
+}
+
+class Tags extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/repository/tags`, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/repository/tags`, options);
+    }
+    remove(projectId, tagName, options) {
+        const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
+        return del(this, `projects/${pId}/repository/tags/${tId}`, options);
+    }
+    show(projectId, tagName, options) {
+        const [pId, tId] = [projectId, tagName].map(encodeURIComponent);
+        return get(this, `projects/${pId}/repository/tags/${tId}`, options);
+    }
+}
+
+class Todos extends BaseService {
+    all(options) {
+        return get(this, 'todos', options);
+    }
+    create(projectId, mergerequestId, options) {
+        return post(this, `projects/${projectId}/merge_requests/${mergerequestId}/todo`, options);
+    }
+    done(_a) {
+        var { todoId } = _a, options = __rest(_a, ["todoId"]);
+        let url = 'mark_as_done';
+        if (todoId)
+            url = `${todoId}/${url}`;
+        return del(this, `todos/${url}`, options);
+    }
+}
+
+class Triggers extends BaseService {
+    add(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/triggers`, options);
+    }
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/triggers`, options);
+    }
+    edit(projectId, triggerId, options) {
+        const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+        return put(this, `projects/${pId}/triggers/${tId}`, options);
+    }
+    remove(projectId, triggerId, options) {
+        const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+        return del(this, `projects/${pId}/triggers/${tId}`, options);
+    }
+    show(projectId, triggerId, options) {
+        const [pId, tId] = [projectId, triggerId].map(encodeURIComponent);
+        return get(this, `projects/${pId}/triggers/${tId}`, options);
+    }
+}
+
+class PushRule extends BaseService {
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/push_rule`, options);
+    }
+    edit(projectId, _a) {
+        var options = __rest(_a, ["upsert"]);
+        const pId = encodeURIComponent(projectId);
+        try {
+            return put(this, `projects/${pId}/push_rule`, options);
+        }
+        catch (e) {
+            if (e.message.includes('exist'))
+                return this.create(projectId, options);
+            throw e;
+        }
+    }
+    remove(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/push_rule`, options);
+    }
+    show(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/push_rule`, options);
+    }
+}
+
+class ApplicationSettings extends BaseService {
+    all(options) {
+        return get(this, 'application/settings', options);
+    }
+    edit(options) {
+        return put(this, 'application/settings', options);
+    }
+}
+
+class BroadcastMessages extends BaseService {
+    all(options) {
+        return get(this, 'broadcast_messages', options);
+    }
+    create(options) {
+        return post(this, 'broadcast_messages', options);
+    }
+    edit(broadcastMessageId, options) {
+        const bId = encodeURIComponent(broadcastMessageId);
+        return put(this, `broadcast_messages/${bId}`, options);
+    }
+    remove(broadcastMessageId) {
+        const bId = encodeURIComponent(broadcastMessageId);
+        return del(this, `broadcast_messages/${bId}`);
+    }
+    show(broadcastMessageId, options) {
+        const bId = encodeURIComponent(broadcastMessageId);
+        return get(this, `broadcast_messages/${bId}`, options);
+    }
+}
+
+class Events extends BaseService {
+    all(options) {
+        return get(this, 'events', options);
+    }
+}
+
+class FeatureFlags extends BaseService {
+    all(options) {
+        return get(this, 'features', options);
+    }
+    set(name, options) {
+        const encodedName = encodeURIComponent(name);
+        return post(this, `features/${encodedName}`, options);
+    }
+}
+
+class GeoNodes extends BaseService {
+    all(options) {
+        return get(this, 'geo_nodes', options);
+    }
+    create(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return post(this, `geo_nodes/${gId}`, options);
+    }
+    edit(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return put(this, `geo_nodes/${gId}`, options);
+    }
+    failures(options) {
+        return post(this, 'geo_nodes/current/failures', options);
+    }
+    repair(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return del(this, `geo_nodes/${gId}`, options);
+    }
+    show(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return get(this, `geo_nodes/${gId}`, options);
+    }
+    status(geonodeId, options) {
+        const gId = encodeURIComponent(geonodeId);
+        return get(this, `geo_nodes/${gId}/status`, options);
+    }
+    statuses(options) {
+        return get(this, 'geo_nodes/statuses', options);
+    }
+}
+
+class GitignoreTemplates extends ResourceTemplates {
+    constructor(options) {
+        super('gitignores', options);
+    }
+}
+
+class GitLabCIYMLTemplates extends ResourceTemplates {
+    constructor(options) {
+        super('gitlab_ci_ymls', options);
+    }
+}
+
+class Keys extends BaseService {
+    show(keyId, options) {
+        const kId = encodeURIComponent(keyId);
+        return get(this, `keys/${kId}`, options);
+    }
+}
+
+class Licence extends BaseService {
+    all(options) {
+        return get(this, 'licence', options);
+    }
+    create(options) {
+        return post(this, 'licence', options);
+    }
+}
+
+class LicenceTemplates extends ResourceTemplates {
+    constructor(options) {
+        super('licences', options);
+    }
+}
+
+class Lint extends BaseService {
+    lint(content, options) {
+        return post(this, 'lint', Object.assign({ content }, options));
+    }
+}
+
+class Namespaces extends BaseService {
+    all(options) {
+        return get(this, 'namespaces', options);
+    }
+    show(namespaceId, options) {
+        const nId = encodeURIComponent(namespaceId);
+        return get(this, `namespaces/${nId}`, options);
+    }
+}
+
+class NotificationSettings extends BaseService {
+    all(_a = {}) {
+        var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+        let url = '';
+        if (projectId) {
+            url += `projects/${encodeURIComponent(projectId)}/`;
+        }
+        else if (groupId) {
+            url += `groups/${encodeURIComponent(groupId)}/`;
+        }
+        return get(this, `${url}notification_settings`, options);
+    }
+    edit(_a = {}) {
+        var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+        let url = '';
+        if (projectId) {
+            url += `projects/${encodeURIComponent(projectId)}/`;
+        }
+        else if (groupId) {
+            url += `groups/${encodeURIComponent(groupId)}/`;
+        }
+        return put(this, `${url}notification_settings`, options);
+    }
+}
+
+class Markdown extends BaseService {
+    render(text, options) {
+        return post(this, 'markdown', Object.assign({ text }, options));
+    }
+}
+
+class PagesDomains extends BaseService {
+    all(_a = {}) {
+        var { projectId } = _a, options = __rest(_a, ["projectId"]);
+        const url = projectId ? `projects/${encodeURIComponent(projectId)}/` : '';
+        return get(this, `${url}pages/domains`, options);
+    }
+    create(projectId, domain, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/pages/domains`, Object.assign({ domain }, options));
+    }
+    edit(projectId, domain, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/pages/domains/${domain}`, options);
+    }
+    show(projectId, domain, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/pages/domains/${domain}`, options);
+    }
+    remove(projectId, domain, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/pages/domains/${domain}`, options);
+    }
+}
+
+class Search extends BaseService {
+    all(scope, search, _a) {
+        var { projectId, groupId } = _a, options = __rest(_a, ["projectId", "groupId"]);
+        let url = '';
+        if (projectId) {
+            url += `projects/${encodeURIComponent(projectId)}/`;
+        }
+        else if (groupId) {
+            url += `groups/${encodeURIComponent(groupId)}/`;
+        }
+        return get(this, `${url}search`, Object.assign({ scope, search }, options));
+    }
+}
+
+class SidekiqMetrics extends BaseService {
+    queueMetrics() {
+        return get(this, 'sidekiq/queue_metrics');
+    }
+    processMetrics() {
+        return get(this, 'sidekiq/process_metrics');
+    }
+    jobStats() {
+        return get(this, 'sidekiq/job_stats');
+    }
+    compoundMetrics() {
+        return get(this, 'sidekiq/compound_metrics');
+    }
+}
+
+class Snippets extends BaseService {
+    all(_a) {
+        var { public: p } = _a, options = __rest(_a, ["public"]);
+        const url = p ? 'snippets/public' : 'snippets';
+        return get(this, url, options);
+    }
+    content(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return get(this, `snippets/${sId}/raw`, options);
+    }
+    create(title, fileName, content, visibility, options) {
+        return post(this, 'snippets', Object.assign({ title,
+            fileName,
+            content,
+            visibility }, options));
+    }
+    edit(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return put(this, `snippets/${sId}`, options);
+    }
+    remove(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return del(this, `snippets/${sId}`, options);
+    }
+    show(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return get(this, `snippets/${sId}`, options);
+    }
+    userAgentDetails(snippetId, options) {
+        const sId = encodeURIComponent(snippetId);
+        return get(this, `snippets/${sId}/user_agent_detail`, options);
+    }
+}
+
+class SystemHooks extends BaseService {
+    add(url, options) {
+        return post(this, 'hooks', Object.assign({ url }, options));
+    }
+    all(options) {
+        return get(this, 'hooks', options);
+    }
+    edit(hookId, url, options) {
+        const hId = encodeURIComponent(hookId);
+        return put(this, `hooks/${hId}`, Object.assign({ url }, options));
+    }
+    remove(hookId, options) {
+        const hId = encodeURIComponent(hookId);
+        return del(this, `hooks/${hId}`, options);
+    }
+}
+
+class Version extends BaseService {
+    show(options) {
+        return get(this, 'version', options);
+    }
+}
+
+class Wikis extends BaseService {
+    all(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/wikis`, options);
+    }
+    create(projectId, options) {
+        const pId = encodeURIComponent(projectId);
+        return post(this, `projects/${pId}/wikis`, options);
+    }
+    edit(projectId, slug, options) {
+        const pId = encodeURIComponent(projectId);
+        return put(this, `projects/${pId}/wikis/${slug}`, options);
+    }
+    show(projectId, slug, options) {
+        const pId = encodeURIComponent(projectId);
+        return get(this, `projects/${pId}/wikis/${slug}`, options);
+    }
+    remove(projectId, slug, options) {
+        const pId = encodeURIComponent(projectId);
+        return del(this, `projects/${pId}/wikis/${slug}`, options);
+    }
+}
+
+// Groups
+
+var APIServices = /*#__PURE__*/Object.freeze({
+    Groups: Groups,
+    GroupAccessRequests: GroupAccessRequests,
+    GroupBadges: GroupBadges,
+    GroupCustomAttributes: GroupCustomAttributes,
+    GroupIssueBoards: GroupIssueBoards,
+    GroupMembers: GroupMembers,
+    GroupMilestones: GroupMilestones,
+    GroupProjects: GroupProjects,
+    GroupVariables: GroupVariables,
+    Epics: Epics,
+    EpicIssues: EpicIssues,
+    EpicNotes: EpicNotes,
+    EpicDiscussions: EpicDiscussions,
+    Users: Users,
+    UserCustomAttributes: UserCustomAttributes,
+    UserEmails: UserEmails,
+    UserImpersonationTokens: UserImpersonationTokens,
+    UserKeys: UserKeys,
+    UserGPGKeys: UserGPGKeys,
+    Branches: Branches,
+    Commits: Commits,
+    CommitDiscussions: CommitDiscussions,
+    Deployments: Deployments,
+    DeployKeys: DeployKeys,
+    Environments: Environments,
+    Issues: Issues,
+    IssueNotes: IssueNotes,
+    IssueDiscussions: IssueDiscussions,
+    IssueAwardEmojis: IssueAwardEmojis,
+    Jobs: Jobs,
+    Labels: Labels,
+    MergeRequests: MergeRequests,
+    MergeRequestAwardEmojis: MergeRequestAwardEmojis,
+    MergeRequestDiscussions: MergeRequestDiscussions,
+    MergeRequestNotes: MergeRequestNotes,
+    Pipelines: Pipelines,
+    PipelineSchedules: PipelineSchedules,
+    PipelineScheduleVariables: PipelineScheduleVariables,
+    Projects: Projects,
+    ProjectAccessRequests: ProjectAccessRequests,
+    ProjectBadges: ProjectBadges,
+    ProjectCustomAttributes: ProjectCustomAttributes,
+    ProjectImportExport: ProjectImportExport,
+    ProjectIssueBoards: ProjectIssueBoards,
+    ProjectHooks: ProjectHooks,
+    ProjectMembers: ProjectMembers,
+    ProjectMilestones: ProjectMilestones,
+    ProjectSnippets: ProjectSnippets,
+    ProjectSnippetNotes: ProjectSnippetNotes,
+    ProjectSnippetDiscussions: ProjectSnippetDiscussions,
+    ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis,
+    ProtectedBranches: ProtectedBranches,
+    ProtectedTags: ProtectedTags,
+    ProjectVariables: ProjectVariables,
+    Repositories: Repositories,
+    RepositoryFiles: RepositoryFiles,
+    Runners: Runners,
+    Services: Services,
+    Tags: Tags,
+    Todos: Todos,
+    Triggers: Triggers,
+    PushRule: PushRule,
+    ApplicationSettings: ApplicationSettings,
+    BroadcastMessages: BroadcastMessages,
+    Events: Events,
+    FeatureFlags: FeatureFlags,
+    GeoNodes: GeoNodes,
+    GitignoreTemplates: GitignoreTemplates,
+    GitLabCIYMLTemplates: GitLabCIYMLTemplates,
+    Keys: Keys,
+    Licence: Licence,
+    LicenceTemplates: LicenceTemplates,
+    Lint: Lint,
+    Namespaces: Namespaces,
+    NotificationSettings: NotificationSettings,
+    Markdown: Markdown,
+    PagesDomains: PagesDomains,
+    Search: Search,
+    SidekiqMetrics: SidekiqMetrics,
+    Snippets: Snippets,
+    SystemHooks: SystemHooks,
+    Version: Version,
+    Wikis: Wikis
+});
+
+// Groups
+const GroupsBundle = bundler({
+    Groups: Groups,
+    GroupAccessRequests: GroupAccessRequests,
+    GroupBadges: GroupBadges,
+    GroupCustomAttributes: GroupCustomAttributes,
+    GroupIssueBoards: GroupIssueBoards,
+    GroupMembers: GroupMembers,
+    GroupMilestones: GroupMilestones,
+    GroupProjects: GroupProjects,
+    GroupVariables: GroupVariables,
+    Epics: Epics,
+    EpicIssues: EpicIssues,
+    EpicNotes: EpicNotes,
+    EpicDiscussions: EpicDiscussions,
+});
+// Users
+const UsersBundle = bundler({
+    Users: Users,
+    UserCustomAttributes: UserCustomAttributes,
+    UserEmails: UserEmails,
+    UserImpersonationTokens: UserImpersonationTokens,
+    UserKeys: UserKeys,
+    UserGPGKeys: UserGPGKeys,
+});
+// Projects
+const ProjectsBundle = bundler({
+    Branches: Branches,
+    Commits: Commits,
+    CommitDiscussions: CommitDiscussions,
+    DeployKeys: DeployKeys,
+    Deployments: Deployments,
+    Environments: Environments,
+    Issues: Issues,
+    IssueAwardEmojis: IssueAwardEmojis,
+    IssueNotes: IssueNotes,
+    IssueDiscussions: IssueDiscussions,
+    Jobs: Jobs,
+    Labels: Labels,
+    MergeRequests: MergeRequests,
+    MergeRequestAwardEmojis: MergeRequestAwardEmojis,
+    MergeRequestDiscussions: MergeRequestDiscussions,
+    MergeRequestNotes: MergeRequestNotes,
+    Pipelines: Pipelines,
+    PipelineSchedules: PipelineSchedules,
+    PipelineScheduleVariables: PipelineScheduleVariables,
+    Projects: Projects,
+    ProjectAccessRequests: ProjectAccessRequests,
+    ProjectBadges: ProjectBadges,
+    ProjectCustomAttributes: ProjectCustomAttributes,
+    ProjectImportExport: ProjectImportExport,
+    ProjectIssueBoards: ProjectIssueBoards,
+    ProjectHooks: ProjectHooks,
+    ProjectMembers: ProjectMembers,
+    ProjectMilestones: ProjectMilestones,
+    ProjectSnippets: ProjectSnippets,
+    ProjectSnippetNotes: ProjectSnippetNotes,
+    ProjectSnippetDiscussions: ProjectSnippetDiscussions,
+    ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis,
+    ProtectedBranches: ProtectedBranches,
+    ProtectedTags: ProtectedTags,
+    ProjectVariables: ProjectVariables,
+    Repositories: Repositories,
+    RepositoryFiles: RepositoryFiles,
+    Runners: Runners,
+    Services: Services,
+    Tags: Tags,
+    Triggers: Triggers,
+});
+// All initialized
+const Gitlab = bundler(APIServices);
+
+exports.GroupsBundle = GroupsBundle;
+exports.UsersBundle = UsersBundle;
+exports.ProjectsBundle = ProjectsBundle;
+exports.Gitlab = Gitlab;
+exports.Groups = Groups;
+exports.GroupAccessRequests = GroupAccessRequests;
+exports.GroupBadges = GroupBadges;
+exports.GroupCustomAttributes = GroupCustomAttributes;
+exports.GroupIssueBoards = GroupIssueBoards;
+exports.GroupMembers = GroupMembers;
+exports.GroupMilestones = GroupMilestones;
+exports.GroupProjects = GroupProjects;
+exports.GroupVariables = GroupVariables;
+exports.Epics = Epics;
+exports.EpicIssues = EpicIssues;
+exports.EpicNotes = EpicNotes;
+exports.EpicDiscussions = EpicDiscussions;
+exports.Users = Users;
+exports.UserCustomAttributes = UserCustomAttributes;
+exports.UserEmails = UserEmails;
+exports.UserImpersonationTokens = UserImpersonationTokens;
+exports.UserKeys = UserKeys;
+exports.UserGPGKeys = UserGPGKeys;
+exports.Branches = Branches;
+exports.Commits = Commits;
+exports.CommitDiscussions = CommitDiscussions;
+exports.Deployments = Deployments;
+exports.DeployKeys = DeployKeys;
+exports.Environments = Environments;
+exports.Issues = Issues;
+exports.IssueNotes = IssueNotes;
+exports.IssueDiscussions = IssueDiscussions;
+exports.IssueAwardEmojis = IssueAwardEmojis;
+exports.Jobs = Jobs;
+exports.Labels = Labels;
+exports.MergeRequests = MergeRequests;
+exports.MergeRequestAwardEmojis = MergeRequestAwardEmojis;
+exports.MergeRequestDiscussions = MergeRequestDiscussions;
+exports.MergeRequestNotes = MergeRequestNotes;
+exports.Pipelines = Pipelines;
+exports.PipelineSchedules = PipelineSchedules;
+exports.PipelineScheduleVariables = PipelineScheduleVariables;
+exports.Projects = Projects;
+exports.ProjectAccessRequests = ProjectAccessRequests;
+exports.ProjectBadges = ProjectBadges;
+exports.ProjectCustomAttributes = ProjectCustomAttributes;
+exports.ProjectImportExport = ProjectImportExport;
+exports.ProjectIssueBoards = ProjectIssueBoards;
+exports.ProjectHooks = ProjectHooks;
+exports.ProjectMembers = ProjectMembers;
+exports.ProjectMilestones = ProjectMilestones;
+exports.ProjectSnippets = ProjectSnippets;
+exports.ProjectSnippetNotes = ProjectSnippetNotes;
+exports.ProjectSnippetDiscussions = ProjectSnippetDiscussions;
+exports.ProjectSnippetAwardEmojis = ProjectSnippetAwardEmojis;
+exports.ProtectedBranches = ProtectedBranches;
+exports.ProtectedTags = ProtectedTags;
+exports.ProjectVariables = ProjectVariables;
+exports.Repositories = Repositories;
+exports.RepositoryFiles = RepositoryFiles;
+exports.Runners = Runners;
+exports.Services = Services;
+exports.Tags = Tags;
+exports.Todos = Todos;
+exports.Triggers = Triggers;
+exports.PushRule = PushRule;
+exports.ApplicationSettings = ApplicationSettings;
+exports.BroadcastMessages = BroadcastMessages;
+exports.Events = Events;
+exports.FeatureFlags = FeatureFlags;
+exports.GeoNodes = GeoNodes;
+exports.GitignoreTemplates = GitignoreTemplates;
+exports.GitLabCIYMLTemplates = GitLabCIYMLTemplates;
+exports.Keys = Keys;
+exports.Licence = Licence;
+exports.LicenceTemplates = LicenceTemplates;
+exports.Lint = Lint;
+exports.Namespaces = Namespaces;
+exports.NotificationSettings = NotificationSettings;
+exports.Markdown = Markdown;
+exports.PagesDomains = PagesDomains;
+exports.Search = Search;
+exports.SidekiqMetrics = SidekiqMetrics;
+exports.Snippets = Snippets;
+exports.SystemHooks = SystemHooks;
+exports.Version = Version;
+exports.Wikis = Wikis;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/infrastructure/BaseService.js
@@ -0,0 +1,20 @@
+import Request from 'got';
+var BaseService = /** @class */ (function () {
+    function BaseService(_a) {
+        var token = _a.token, oauthToken = _a.oauthToken, sudo = _a.sudo, _b = _a.host, host = _b === void 0 ? 'https://gitlab.com' : _b, _c = _a.url, url = _c === void 0 ? '' : _c, _d = _a.version, version = _d === void 0 ? 'v4' : _d, _e = _a.rejectUnauthorized, rejectUnauthorized = _e === void 0 ? true : _e, _f = _a.requester, requester = _f === void 0 ? Request : _f;
+        this.url = [host, 'api', version, url].join('/');
+        this.headers = {};
+        this.rejectUnauthorized = rejectUnauthorized;
+        this.requester = requester;
+        // Handle auth tokens
+        if (oauthToken)
+            this.headers.authorization = "Bearer " + oauthToken;
+        else if (token)
+            this.headers['private-token'] = token;
+        // Set sudo
+        if (sudo)
+            this.headers['Sudo'] = sudo;
+    }
+    return BaseService;
+}());
+export { BaseService };
--- a/node_modules/gitlab/dist/infrastructure/RequestHelper.d.ts
+++ b/node_modules/gitlab/dist/infrastructure/RequestHelper.d.ts
@@ -1,6 +1,6 @@
 import { PaginatedRequestOptions, BaseRequestOptions, GetResponse, PostResponse, PutResponse, DelResponse } from '../../types/types';
 export declare function get(service: any, endpoint: string, options?: PaginatedRequestOptions): Promise<GetResponse>;
-export declare function stream(service: any, endpoint: string, options?: BaseRequestOptions): any;
+export declare function stream(service: any, endpoint: string, options?: BaseRequestOptions): ReadableStream<any>;
 export declare function post(service: any, endpoint: string, options?: BaseRequestOptions): Promise<PostResponse>;
 export declare function put(service: any, endpoint: string, options?: BaseRequestOptions): Promise<PutResponse>;
 export declare function del(service: any, endpoint: string, options?: BaseRequestOptions): Promise<DelResponse>;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/infrastructure/RequestHelper.js
@@ -0,0 +1,188 @@
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __generator = (this && this.__generator) || function (thisArg, body) {
+    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
+    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
+    function verb(n) { return function (v) { return step([n, v]); }; }
+    function step(op) {
+        if (f) throw new TypeError("Generator is already executing.");
+        while (_) try {
+            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
+            if (y = 0, t) op = [op[0] & 2, t.value];
+            switch (op[0]) {
+                case 0: case 1: t = op; break;
+                case 4: _.label++; return { value: op[1], done: false };
+                case 5: _.label++; y = op[1]; op = [0]; continue;
+                case 7: op = _.ops.pop(); _.trys.pop(); continue;
+                default:
+                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
+                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
+                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
+                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
+                    if (t[2]) _.ops.pop();
+                    _.trys.pop(); continue;
+            }
+            op = body.call(thisArg, _);
+        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
+        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
+    }
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+var __spread = (this && this.__spread) || function () {
+    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
+    return ar;
+};
+import Request from 'got';
+import { decamelizeKeys } from 'humps';
+import { stringify } from 'query-string';
+function defaultRequest(service, endpoint, _a) {
+    var body = _a.body, query = _a.query, sudo = _a.sudo;
+    console.log('foo');
+    return [
+        endpoint,
+        {
+            baseUrl: service.url,
+            headers: __assign({ sudo: sudo }, service.headers),
+            query: query && stringify(decamelizeKeys(query), { arrayFormat: 'bracket' }),
+            body: body && decamelizeKeys(body),
+            rejectUnauthorized: service.rejectUnauthorized,
+            json: typeof body !== 'undefined',
+        },
+    ];
+}
+export function get(service, endpoint, options) {
+    if (options === void 0) { options = {}; }
+    return __awaiter(this, void 0, void 0, function () {
+        var showPagination, maxPages, sudo, query, requestOptions, _a, headers, body, pagination, underLimit, more;
+        return __generator(this, function (_b) {
+            switch (_b.label) {
+                case 0:
+                    showPagination = options.showPagination, maxPages = options.maxPages, sudo = options.sudo, query = __rest(options, ["showPagination", "maxPages", "sudo"]);
+                    requestOptions = defaultRequest(service, endpoint, {
+                        query: query,
+                        sudo: sudo,
+                    });
+                    return [4 /*yield*/, Request.get.apply(Request, __spread(requestOptions))];
+                case 1:
+                    _a = _b.sent(), headers = _a.headers, body = _a.body;
+                    pagination = {
+                        total: headers['x-total'],
+                        next: headers['x-next-page'] || null,
+                        current: headers['x-page'] || null,
+                        previous: headers['x-prev-page'] || null,
+                        perPage: headers['x-per-page'],
+                        totalPages: headers['x-total-pages'],
+                    };
+                    underLimit = maxPages ? pagination.current < maxPages : true;
+                    if (!(!query.page && underLimit && pagination.next)) return [3 /*break*/, 3];
+                    return [4 /*yield*/, get(service, endpoint, __assign({ page: pagination.next }, options))];
+                case 2:
+                    more = _b.sent();
+                    return [2 /*return*/, __spread(body, more)];
+                case 3: return [2 /*return*/, (query.page || maxPages) && showPagination ? { data: body, pagination: pagination } : body];
+            }
+        });
+    });
+}
+export function stream(service, endpoint, options) {
+    if (options === void 0) { options = ({}); }
+    return Request.stream.apply(Request, __spread(defaultRequest(service, endpoint, {
+        query: options,
+    })));
+}
+export function post(service, endpoint, options) {
+    if (options === void 0) { options = {}; }
+    return __awaiter(this, void 0, void 0, function () {
+        var sudo, body, response;
+        return __generator(this, function (_a) {
+            switch (_a.label) {
+                case 0:
+                    sudo = options.sudo, body = __rest(options, ["sudo"]);
+                    return [4 /*yield*/, Request.post.apply(Request, __spread(defaultRequest(service, endpoint, {
+                            body: body,
+                            sudo: sudo,
+                        })))];
+                case 1:
+                    response = _a.sent();
+                    return [2 /*return*/, response.body];
+            }
+        });
+    });
+}
+export function put(service, endpoint, options) {
+    if (options === void 0) { options = {}; }
+    return __awaiter(this, void 0, void 0, function () {
+        var sudo, body, response;
+        return __generator(this, function (_a) {
+            switch (_a.label) {
+                case 0:
+                    sudo = options.sudo, body = __rest(options, ["sudo"]);
+                    return [4 /*yield*/, Request.put.apply(Request, __spread(defaultRequest(service, endpoint, {
+                            body: body,
+                        })))];
+                case 1:
+                    response = _a.sent();
+                    return [2 /*return*/, response.body];
+            }
+        });
+    });
+}
+export function del(service, endpoint, options) {
+    if (options === void 0) { options = {}; }
+    return __awaiter(this, void 0, void 0, function () {
+        var sudo, query, response;
+        return __generator(this, function (_a) {
+            switch (_a.label) {
+                case 0:
+                    sudo = options.sudo, query = __rest(options, ["sudo"]);
+                    return [4 /*yield*/, Request.delete.apply(Request, __spread(defaultRequest(service, endpoint, {
+                            query: query,
+                        })))];
+                case 1:
+                    response = _a.sent();
+                    return [2 /*return*/, response.body];
+            }
+        });
+    });
+}
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/infrastructure/Utils.js
@@ -0,0 +1,25 @@
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+export function bundler(services) {
+    return function Bundle(options) {
+        var _this = this;
+        Object.entries(services || {}).forEach(function (_a) {
+            var _b = __read(_a, 2), name = _b[0], ser = _b[1];
+            _this[name] = new ser(options);
+        });
+    };
+}
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/infrastructure/index.js
@@ -0,0 +1,4 @@
+import * as RequestHelper from './RequestHelper';
+export { BaseService } from './BaseService';
+export { bundler } from './Utils';
+export { RequestHelper };
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ApplicationSettings.js
@@ -0,0 +1,28 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var ApplicationSettings = /** @class */ (function (_super) {
+    __extends(ApplicationSettings, _super);
+    function ApplicationSettings() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    ApplicationSettings.prototype.all = function (options) {
+        return RequestHelper.get(this, 'application/settings', options);
+    };
+    ApplicationSettings.prototype.edit = function (options) {
+        return RequestHelper.put(this, 'application/settings', options);
+    };
+    return ApplicationSettings;
+}(BaseService));
+export default ApplicationSettings;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Branches.js
@@ -0,0 +1,73 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Branches = /** @class */ (function (_super) {
+    __extends(Branches, _super);
+    function Branches() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Branches.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/branches", options);
+    };
+    Branches.prototype.create = function (projectId, branchName, ref, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/repository/branches", __assign({ branch: branchName, ref: ref }, options));
+    };
+    Branches.prototype.protect = function (projectId, branchName, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/protected_branches", __assign({ name: branchName }, options));
+    };
+    Branches.prototype.remove = function (projectId, branchName, options) {
+        var _a = __read([projectId, branchName].map(encodeURIComponent), 2), pId = _a[0], bName = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/repository/branches/" + bName, options);
+    };
+    Branches.prototype.show = function (projectId, branchName, options) {
+        var _a = __read([projectId, branchName].map(encodeURIComponent), 2), pId = _a[0], bName = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/repository/branches/" + bName, options);
+    };
+    Branches.prototype.unprotect = function (projectId, branchName, options) {
+        var _a = __read([projectId, branchName].map(encodeURIComponent), 2), pId = _a[0], bName = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/repository/branches/" + bName + "/unprotect", options);
+    };
+    return Branches;
+}(BaseService));
+export default Branches;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/BroadcastMessages.js
@@ -0,0 +1,40 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var BroadcastMessages = /** @class */ (function (_super) {
+    __extends(BroadcastMessages, _super);
+    function BroadcastMessages() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    BroadcastMessages.prototype.all = function (options) {
+        return RequestHelper.get(this, 'broadcast_messages', options);
+    };
+    BroadcastMessages.prototype.create = function (options) {
+        return RequestHelper.post(this, 'broadcast_messages', options);
+    };
+    BroadcastMessages.prototype.edit = function (broadcastMessageId, options) {
+        var bId = encodeURIComponent(broadcastMessageId);
+        return RequestHelper.put(this, "broadcast_messages/" + bId, options);
+    };
+    BroadcastMessages.prototype.remove = function (broadcastMessageId) {
+        var bId = encodeURIComponent(broadcastMessageId);
+        return RequestHelper.del(this, "broadcast_messages/" + bId);
+    };
+    BroadcastMessages.prototype.show = function (broadcastMessageId, options) {
+        var bId = encodeURIComponent(broadcastMessageId);
+        return RequestHelper.get(this, "broadcast_messages/" + bId, options);
+    };
+    return BroadcastMessages;
+}(BaseService));
+export default BroadcastMessages;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/CommitDiscussions.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceDiscussions } from '../templates';
+var CommitDiscussions = /** @class */ (function (_super) {
+    __extends(CommitDiscussions, _super);
+    function CommitDiscussions(options) {
+        return _super.call(this, 'projects', 'commits', options) || this;
+    }
+    return CommitDiscussions;
+}(ResourceDiscussions));
+export default CommitDiscussions;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Commits.js
@@ -0,0 +1,74 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Commits = /** @class */ (function (_super) {
+    __extends(Commits, _super);
+    function Commits() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Commits.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/commits", options);
+    };
+    Commits.prototype.cherryPick = function (projectId, sha, branch, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/repository/commits/" + sha + "/cherry_pick", __assign({ branch: branch }, options));
+    };
+    Commits.prototype.comments = function (projectId, sha, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/commits/" + sha + "/comments", options);
+    };
+    Commits.prototype.create = function (projectId, branch, message, actions, options) {
+        if (actions === void 0) { actions = []; }
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/repository/commits", __assign({ branch: branch, commitMessage: message, actions: actions }, options));
+    };
+    Commits.prototype.createComment = function (projectId, sha, note, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/repository/commits/" + sha + "/comments", __assign({ note: note }, options));
+    };
+    Commits.prototype.diff = function (projectId, sha, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/commits/" + sha + "/diff", options);
+    };
+    Commits.prototype.editStatus = function (projectId, sha, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/statuses/" + sha, options);
+    };
+    Commits.prototype.references = function (projectId, sha, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/commits/" + sha + "/refs", options);
+    };
+    Commits.prototype.show = function (projectId, sha, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/commits/" + sha, options);
+    };
+    Commits.prototype.status = function (projectId, sha, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/commits/" + sha + "/statuses", options);
+    };
+    return Commits;
+}(BaseService));
+export default Commits;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/DeployKeys.js
@@ -0,0 +1,54 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var DeployKeys = /** @class */ (function (_super) {
+    __extends(DeployKeys, _super);
+    function DeployKeys() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    DeployKeys.prototype.add = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/deploy_keys", options);
+    };
+    DeployKeys.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/deploy_keys", options);
+    };
+    DeployKeys.prototype.show = function (projectId, keyId, options) {
+        var _a = __read([projectId, keyId].map(encodeURIComponent), 2), pId = _a[0], kId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/deploy_keys/" + kId, options);
+    };
+    DeployKeys.prototype.enable = function (projectId, keyId, options) {
+        var _a = __read([projectId, keyId].map(encodeURIComponent), 2), pId = _a[0], kId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/deploy_keys/" + kId + "/enable", options);
+    };
+    return DeployKeys;
+}(BaseService));
+export default DeployKeys;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Deployments.js
@@ -0,0 +1,46 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Deployments = /** @class */ (function (_super) {
+    __extends(Deployments, _super);
+    function Deployments() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Deployments.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/deployments", options);
+    };
+    Deployments.prototype.show = function (projectId, deploymentId, options) {
+        var _a = __read([projectId, deploymentId].map(encodeURIComponent), 2), pId = _a[0], dId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/deployments/" + dId, options);
+    };
+    return Deployments;
+}(BaseService));
+export default Deployments;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Environments.js
@@ -0,0 +1,58 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Environments = /** @class */ (function (_super) {
+    __extends(Environments, _super);
+    function Environments() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Environments.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/environments", options);
+    };
+    Environments.prototype.create = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/environments", options);
+    };
+    Environments.prototype.edit = function (projectId, environmentId, options) {
+        var _a = __read([projectId, environmentId].map(encodeURIComponent), 2), pId = _a[0], eId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/environments/" + eId, options);
+    };
+    Environments.prototype.remove = function (projectId, environmentId, options) {
+        var _a = __read([projectId, environmentId].map(encodeURIComponent), 2), pId = _a[0], eId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/environments/" + eId, options);
+    };
+    Environments.prototype.stop = function (projectId, environmentId, options) {
+        var _a = __read([projectId, environmentId].map(encodeURIComponent), 2), pId = _a[0], eId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/environments/" + eId + "/stop", options);
+    };
+    return Environments;
+}(BaseService));
+export default Environments;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/EpicDiscussions.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceDiscussions } from '../templates';
+var EpicDiscussions = /** @class */ (function (_super) {
+    __extends(EpicDiscussions, _super);
+    function EpicDiscussions(options) {
+        return _super.call(this, 'groups', 'epics', options) || this;
+    }
+    return EpicDiscussions;
+}(ResourceDiscussions));
+export default EpicDiscussions;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/EpicIssues.js
@@ -0,0 +1,54 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var EpicIssues = /** @class */ (function (_super) {
+    __extends(EpicIssues, _super);
+    function EpicIssues() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    EpicIssues.prototype.all = function (groupId, epicId, options) {
+        var _a = __read([groupId, epicId].map(encodeURIComponent), 2), gId = _a[0], eId = _a[1];
+        return RequestHelper.get(this, "groups/" + gId + "/epics/" + eId + "/issues", options);
+    };
+    EpicIssues.prototype.assign = function (groupId, epicId, issueId, options) {
+        var _a = __read([groupId, epicId, issueId].map(encodeURIComponent), 3), gId = _a[0], eId = _a[1], iId = _a[2];
+        return RequestHelper.put(this, "groups/" + gId + "/epics/" + eId + "/issues/" + iId, options);
+    };
+    EpicIssues.prototype.edit = function (groupId, epicId, issueId, options) {
+        var _a = __read([groupId, epicId, issueId].map(encodeURIComponent), 3), gId = _a[0], eId = _a[1], iId = _a[2];
+        return RequestHelper.del(this, "groups/" + gId + "/epics/" + eId + "/issues/" + iId, options);
+    };
+    EpicIssues.prototype.remove = function (groupId, epicId, issueId, options) {
+        var _a = __read([groupId, epicId, issueId].map(encodeURIComponent), 3), gId = _a[0], eId = _a[1], iId = _a[2];
+        return RequestHelper.del(this, "groups/" + gId + "/epics/" + eId + "/issues/" + iId, options);
+    };
+    return EpicIssues;
+}(BaseService));
+export default EpicIssues;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/EpicNotes.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceNotes } from '../templates';
+var EpicNotes = /** @class */ (function (_super) {
+    __extends(EpicNotes, _super);
+    function EpicNotes(options) {
+        return _super.call(this, 'groups', 'epics', options) || this;
+    }
+    return EpicNotes;
+}(ResourceNotes));
+export default EpicNotes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Epics.js
@@ -0,0 +1,69 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Epics = /** @class */ (function (_super) {
+    __extends(Epics, _super);
+    function Epics() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Epics.prototype.all = function (groupId, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.get(this, "groups/" + gId + "/epics", options);
+    };
+    Epics.prototype.create = function (groupId, title, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.post(this, "groups/" + gId + "/epics", __assign({ title: title }, options));
+    };
+    Epics.prototype.edit = function (groupId, epicId, options) {
+        var _a = __read([groupId, epicId].map(encodeURIComponent), 2), gId = _a[0], eId = _a[1];
+        return RequestHelper.put(this, "groups/" + gId + "/epics/" + eId, options);
+    };
+    Epics.prototype.remove = function (groupId, epicId, options) {
+        var _a = __read([groupId, epicId].map(encodeURIComponent), 2), gId = _a[0], eId = _a[1];
+        return RequestHelper.del(this, "groups/" + gId + "/epics/" + eId, options);
+    };
+    Epics.prototype.show = function (groupId, epicId, options) {
+        var _a = __read([groupId, epicId].map(encodeURIComponent), 2), gId = _a[0], eId = _a[1];
+        return RequestHelper.get(this, "groups/" + gId + "/epics/" + eId, options);
+    };
+    return Epics;
+}(BaseService));
+export default Epics;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Events.js
@@ -0,0 +1,25 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var Events = /** @class */ (function (_super) {
+    __extends(Events, _super);
+    function Events() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Events.prototype.all = function (options) {
+        return RequestHelper.get(this, 'events', options);
+    };
+    return Events;
+}(BaseService));
+export default Events;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/FeatureFlags.js
@@ -0,0 +1,29 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var FeatureFlags = /** @class */ (function (_super) {
+    __extends(FeatureFlags, _super);
+    function FeatureFlags() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    FeatureFlags.prototype.all = function (options) {
+        return RequestHelper.get(this, 'features', options);
+    };
+    FeatureFlags.prototype.set = function (name, options) {
+        var encodedName = encodeURIComponent(name);
+        return RequestHelper.post(this, "features/" + encodedName, options);
+    };
+    return FeatureFlags;
+}(BaseService));
+export default FeatureFlags;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GeoNodes.js
@@ -0,0 +1,51 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var GeoNodes = /** @class */ (function (_super) {
+    __extends(GeoNodes, _super);
+    function GeoNodes() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    GeoNodes.prototype.all = function (options) {
+        return RequestHelper.get(this, 'geo_nodes', options);
+    };
+    GeoNodes.prototype.create = function (geonodeId, options) {
+        var gId = encodeURIComponent(geonodeId);
+        return RequestHelper.post(this, "geo_nodes/" + gId, options);
+    };
+    GeoNodes.prototype.edit = function (geonodeId, options) {
+        var gId = encodeURIComponent(geonodeId);
+        return RequestHelper.put(this, "geo_nodes/" + gId, options);
+    };
+    GeoNodes.prototype.failures = function (options) {
+        return RequestHelper.post(this, 'geo_nodes/current/failures', options);
+    };
+    GeoNodes.prototype.repair = function (geonodeId, options) {
+        var gId = encodeURIComponent(geonodeId);
+        return RequestHelper.del(this, "geo_nodes/" + gId, options);
+    };
+    GeoNodes.prototype.show = function (geonodeId, options) {
+        var gId = encodeURIComponent(geonodeId);
+        return RequestHelper.get(this, "geo_nodes/" + gId, options);
+    };
+    GeoNodes.prototype.status = function (geonodeId, options) {
+        var gId = encodeURIComponent(geonodeId);
+        return RequestHelper.get(this, "geo_nodes/" + gId + "/status", options);
+    };
+    GeoNodes.prototype.statuses = function (options) {
+        return RequestHelper.get(this, 'geo_nodes/statuses', options);
+    };
+    return GeoNodes;
+}(BaseService));
+export default GeoNodes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GitLabCIYMLTemplates.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceTemplates } from '../templates';
+var GitLabCIYMLTemplates = /** @class */ (function (_super) {
+    __extends(GitLabCIYMLTemplates, _super);
+    function GitLabCIYMLTemplates(options) {
+        return _super.call(this, 'gitlab_ci_ymls', options) || this;
+    }
+    return GitLabCIYMLTemplates;
+}(ResourceTemplates));
+export default GitLabCIYMLTemplates;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GitignoreTemplates.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceTemplates } from '../templates';
+var GitignoreTemplates = /** @class */ (function (_super) {
+    __extends(GitignoreTemplates, _super);
+    function GitignoreTemplates(options) {
+        return _super.call(this, 'gitignores', options) || this;
+    }
+    return GitignoreTemplates;
+}(ResourceTemplates));
+export default GitignoreTemplates;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GroupAccessRequests.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceAccessRequests } from '../templates';
+var GroupAccessRequests = /** @class */ (function (_super) {
+    __extends(GroupAccessRequests, _super);
+    function GroupAccessRequests(options) {
+        return _super.call(this, 'groups', options) || this;
+    }
+    return GroupAccessRequests;
+}(ResourceAccessRequests));
+export default GroupAccessRequests;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GroupBadges.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceBadges } from '../templates';
+var GroupBadges = /** @class */ (function (_super) {
+    __extends(GroupBadges, _super);
+    function GroupBadges(options) {
+        return _super.call(this, 'groups', options) || this;
+    }
+    return GroupBadges;
+}(ResourceBadges));
+export default GroupBadges;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GroupCustomAttributes.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceCustomAttributes } from '../templates';
+var GroupCustomAttributes = /** @class */ (function (_super) {
+    __extends(GroupCustomAttributes, _super);
+    function GroupCustomAttributes(options) {
+        return _super.call(this, 'groups', options) || this;
+    }
+    return GroupCustomAttributes;
+}(ResourceCustomAttributes));
+export default GroupCustomAttributes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GroupIssueBoards.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceIssueBoards } from '../templates';
+var GroupIssueBoards = /** @class */ (function (_super) {
+    __extends(GroupIssueBoards, _super);
+    function GroupIssueBoards(options) {
+        return _super.call(this, 'groups', options) || this;
+    }
+    return GroupIssueBoards;
+}(ResourceIssueBoards));
+export default GroupIssueBoards;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GroupMembers.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceMembers } from '../templates';
+var GroupMembers = /** @class */ (function (_super) {
+    __extends(GroupMembers, _super);
+    function GroupMembers(options) {
+        return _super.call(this, 'groups', options) || this;
+    }
+    return GroupMembers;
+}(ResourceMembers));
+export default GroupMembers;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GroupMilestones.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceMilestones } from '../templates';
+var GroupMilestones = /** @class */ (function (_super) {
+    __extends(GroupMilestones, _super);
+    function GroupMilestones(options) {
+        return _super.call(this, 'groups', options) || this;
+    }
+    return GroupMilestones;
+}(ResourceMilestones));
+export default GroupMilestones;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GroupProjects.js
@@ -0,0 +1,46 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var GroupProjects = /** @class */ (function (_super) {
+    __extends(GroupProjects, _super);
+    function GroupProjects() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    GroupProjects.prototype.all = function (groupId, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.get(this, "groups/" + gId + "/projects", options);
+    };
+    GroupProjects.prototype.add = function (groupId, projectId, options) {
+        var _a = __read([groupId, projectId].map(encodeURIComponent), 2), gId = _a[0], pId = _a[1];
+        return RequestHelper.post(this, "groups/" + gId + "/projects/" + pId, options);
+    };
+    return GroupProjects;
+}(BaseService));
+export default GroupProjects;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/GroupVariables.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceVariables } from '../templates';
+var GroupVariables = /** @class */ (function (_super) {
+    __extends(GroupVariables, _super);
+    function GroupVariables(options) {
+        return _super.call(this, 'groups', options) || this;
+    }
+    return GroupVariables;
+}(ResourceVariables));
+export default GroupVariables;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Groups.js
@@ -0,0 +1,84 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Groups = /** @class */ (function (_super) {
+    __extends(Groups, _super);
+    function Groups() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Groups.prototype.all = function (options) {
+        return RequestHelper.get(this, 'groups', options);
+    };
+    Groups.prototype.create = function (options) {
+        return RequestHelper.post(this, 'groups', options);
+    };
+    Groups.prototype.createLDAPLink = function (groupId, cn, groupAccess, provider, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.post(this, "groups/" + gId + "/ldap_group_links", __assign({ cn: cn,
+            groupAccess: groupAccess,
+            provider: provider }, options));
+    };
+    Groups.prototype.edit = function (groupId, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.put(this, "groups/" + gId, options);
+    };
+    Groups.prototype.remove = function (groupId, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.del(this, "groups/" + gId, options);
+    };
+    Groups.prototype.removeLDAPLink = function (groupId, cn, _a) {
+        if (_a === void 0) { _a = {}; }
+        var provider = _a.provider, options = __rest(_a, ["provider"]);
+        var gId = encodeURIComponent(groupId);
+        var url = provider ? provider + "/" + cn : "" + cn;
+        return RequestHelper.del(this, "groups/" + gId + "/ldap_group_links/" + url, options);
+    };
+    Groups.prototype.search = function (nameOrPath, options) {
+        return RequestHelper.get(this, 'groups', __assign({ search: nameOrPath }, options));
+    };
+    Groups.prototype.show = function (groupId, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.get(this, "groups/" + gId, options);
+    };
+    Groups.prototype.subgroups = function (groupId, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.get(this, "groups/" + gId + "/subgroups", options);
+    };
+    Groups.prototype.syncLDAP = function (groupId, options) {
+        var gId = encodeURIComponent(groupId);
+        return RequestHelper.post(this, "groups/" + gId + "/ldap_sync", options);
+    };
+    return Groups;
+}(BaseService));
+export default Groups;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/IssueAwardEmojis.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceAwardEmojis } from '../templates';
+var IssueAwardEmojis = /** @class */ (function (_super) {
+    __extends(IssueAwardEmojis, _super);
+    function IssueAwardEmojis(options) {
+        return _super.call(this, 'issues', options) || this;
+    }
+    return IssueAwardEmojis;
+}(ResourceAwardEmojis));
+export default IssueAwardEmojis;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/IssueDiscussions.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceDiscussions } from '../templates';
+var IssueDiscussions = /** @class */ (function (_super) {
+    __extends(IssueDiscussions, _super);
+    function IssueDiscussions(options) {
+        return _super.call(this, 'projects', 'issues', options) || this;
+    }
+    return IssueDiscussions;
+}(ResourceDiscussions));
+export default IssueDiscussions;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/IssueNotes.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceNotes } from '../templates';
+var IssueNotes = /** @class */ (function (_super) {
+    __extends(IssueNotes, _super);
+    function IssueNotes(options) {
+        return _super.call(this, 'projects', 'issues', options) || this;
+    }
+    return IssueNotes;
+}(ResourceNotes));
+export default IssueNotes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Issues.js
@@ -0,0 +1,116 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Issues = /** @class */ (function (_super) {
+    __extends(Issues, _super);
+    function Issues() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Issues.prototype.addSpentTime = function (projectId, issueId, duration, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + iId + "/add_spent_time", __assign({ duration: duration }, options));
+    };
+    Issues.prototype.addTimeEstimate = function (projectId, issueId, duration, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + iId + "/time_estimate", __assign({ duration: duration }, options));
+    };
+    Issues.prototype.all = function (_a) {
+        var projectId = _a.projectId, options = __rest(_a, ["projectId"]);
+        var url = projectId ? "projects/" + encodeURIComponent(projectId) + "/issues" : 'issues';
+        return RequestHelper.get(this, url, options);
+    };
+    Issues.prototype.create = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/issues", options);
+    };
+    Issues.prototype.edit = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/issues/" + iId, options);
+    };
+    Issues.prototype.link = function (projectId, issueIId, targetProjectId, targetIssueId, options) {
+        var _a = __read([projectId, issueIId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        var _b = __read([targetProjectId, targetIssueId].map(encodeURIComponent), 2), targetpId = _b[0], targetIId = _b[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + iId + "/links", __assign({ targetProjectId: targetpId, targetIssueId: targetIId }, options));
+    };
+    Issues.prototype.participants = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/issues/" + iId + "/participants", options);
+    };
+    Issues.prototype.remove = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/issues/" + iId, options);
+    };
+    Issues.prototype.resetSpentTime = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + iId + "/reset_spent_time", options);
+    };
+    Issues.prototype.resetTimeEstimate = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + iId + "/reset_time_estimate", options);
+    };
+    Issues.prototype.show = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/issues/" + iId, options);
+    };
+    Issues.prototype.subscribe = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + iId + "/subscribe", options);
+    };
+    Issues.prototype.timeStats = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/issues/" + iId + "/time_stats", options);
+    };
+    Issues.prototype.unsubscribe = function (projectId, issueId, options) {
+        var _a = __read([projectId, issueId].map(encodeURIComponent), 2), pId = _a[0], iId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/issues/" + iId + "/unsubscribe", options);
+    };
+    return Issues;
+}(BaseService));
+export default Issues;
--- a/node_modules/gitlab/dist/services/Jobs.d.ts
+++ b/node_modules/gitlab/dist/services/Jobs.d.ts
@@ -5,10 +5,10 @@ declare class Jobs extends BaseService {
     cancel(projectId: ProjectId, jobId: JobId, options?: Sudo): Promise<object>;
     downloadSingleArtifactFile(projectId: ProjectId, jobId: JobId, artifactPath: string, { stream, ...options }: {
         stream?: boolean;
-    } & BaseRequestOptions): any;
+    } & BaseRequestOptions): Promise<import("../../types/types").GetResponse> | ReadableStream<any>;
     downloadLatestArtifactFile(projectId: ProjectId, ref: string, name: string, { stream, ...options }: {
         stream?: boolean;
-    } & BaseRequestOptions): any;
+    } & BaseRequestOptions): Promise<import("../../types/types").GetResponse> | ReadableStream<any>;
     downloadTraceFile(projectId: ProjectId, jobId: JobId, options?: Sudo): Promise<import("../../types/types").GetResponse>;
     erase(projectId: ProjectId, jobId: JobId, options?: Sudo): Promise<object>;
     keepArtifacts(projectId: ProjectId, jobId: JobId, options?: Sudo): Promise<object>;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Jobs.js
@@ -0,0 +1,99 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Jobs = /** @class */ (function (_super) {
+    __extends(Jobs, _super);
+    function Jobs() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Jobs.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/jobs", options);
+    };
+    Jobs.prototype.cancel = function (projectId, jobId, options) {
+        var _a = __read([projectId, jobId].map(encodeURIComponent), 2), pId = _a[0], jId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/jobs/" + jId + "/cancel", options);
+    };
+    Jobs.prototype.downloadSingleArtifactFile = function (projectId, jobId, artifactPath, _a) {
+        var _b = _a.stream, stream = _b === void 0 ? false : _b, options = __rest(_a, ["stream"]);
+        var _c = __read([projectId, jobId].map(encodeURIComponent), 2), pId = _c[0], jId = _c[1];
+        if (stream) {
+            return RequestHelper.stream(this, "projects/" + pId + "/jobs/" + jId + "/artifacts/" + artifactPath, options);
+        }
+        return RequestHelper.get(this, "projects/" + pId + "/jobs/" + jId + "/artifacts/" + artifactPath, options);
+    };
+    Jobs.prototype.downloadLatestArtifactFile = function (projectId, ref, name, _a) {
+        var _b = _a.stream, stream = _b === void 0 ? false : _b, options = __rest(_a, ["stream"]);
+        var _c = __read([projectId, ref, name].map(encodeURIComponent), 3), pId = _c[0], rId = _c[1], jobName = _c[2];
+        if (stream) {
+            return RequestHelper.stream(this, "projects/" + pId + "/jobs/artifacts/" + rId + "/download?job=" + jobName, options);
+        }
+        return RequestHelper.get(this, "projects/" + pId + "/jobs/artifacts/" + rId + "/download?job=" + jobName, options);
+    };
+    Jobs.prototype.downloadTraceFile = function (projectId, jobId, options) {
+        var _a = __read([projectId, jobId].map(encodeURIComponent), 2), pId = _a[0], jId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/jobs/" + jId + "/trace", options);
+    };
+    Jobs.prototype.erase = function (projectId, jobId, options) {
+        var _a = __read([projectId, jobId].map(encodeURIComponent), 2), pId = _a[0], jId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/jobs/" + jId + "/erase", options);
+    };
+    Jobs.prototype.keepArtifacts = function (projectId, jobId, options) {
+        var _a = __read([projectId, jobId].map(encodeURIComponent), 2), pId = _a[0], jId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/jobs/" + jId + "/artifacts/keep", options);
+    };
+    Jobs.prototype.play = function (projectId, jobId, options) {
+        var _a = __read([projectId, jobId].map(encodeURIComponent), 2), pId = _a[0], jId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/jobs/" + jId + "/play", options);
+    };
+    Jobs.prototype.retry = function (projectId, jobId, options) {
+        var _a = __read([projectId, jobId].map(encodeURIComponent), 2), pId = _a[0], jId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/jobs/" + jId + "/retry", options);
+    };
+    Jobs.prototype.show = function (projectId, jobId, options) {
+        var _a = __read([projectId, jobId].map(encodeURIComponent), 2), pId = _a[0], jId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/jobs/" + jId, options);
+    };
+    Jobs.prototype.showPipelineJobs = function (projectId, pipelineId, options) {
+        var _a = __read([projectId, pipelineId].map(encodeURIComponent), 2), pId = _a[0], ppId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/pipelines/" + ppId + "/jobs", options);
+    };
+    return Jobs;
+}(BaseService));
+export default Jobs;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Keys.js
@@ -0,0 +1,26 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var Keys = /** @class */ (function (_super) {
+    __extends(Keys, _super);
+    function Keys() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Keys.prototype.show = function (keyId, options) {
+        var kId = encodeURIComponent(keyId);
+        return RequestHelper.get(this, "keys/" + kId, options);
+    };
+    return Keys;
+}(BaseService));
+export default Keys;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Labels.js
@@ -0,0 +1,73 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Labels = /** @class */ (function (_super) {
+    __extends(Labels, _super);
+    function Labels() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Labels.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/labels", options);
+    };
+    Labels.prototype.create = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/labels", options);
+    };
+    Labels.prototype.edit = function (projectId, labelName, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.put(this, "projects/" + pId + "/labels", __assign({ name: labelName }, options));
+    };
+    Labels.prototype.remove = function (projectId, labelName, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.del(this, "projects/" + pId + "/labels", __assign({ name: labelName }, options));
+    };
+    Labels.prototype.subscribe = function (projectId, labelId, options) {
+        var _a = __read([projectId, labelId].map(encodeURIComponent), 2), pId = _a[0], lId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + lId + "/subscribe", options);
+    };
+    Labels.prototype.unsubscribe = function (projectId, labelId, options) {
+        var _a = __read([projectId, labelId].map(encodeURIComponent), 2), pId = _a[0], lId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/issues/" + lId + "/unsubscribe", options);
+    };
+    return Labels;
+}(BaseService));
+export default Labels;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Licence.js
@@ -0,0 +1,28 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var Licence = /** @class */ (function (_super) {
+    __extends(Licence, _super);
+    function Licence() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Licence.prototype.all = function (options) {
+        return RequestHelper.get(this, 'licence', options);
+    };
+    Licence.prototype.create = function (options) {
+        return RequestHelper.post(this, 'licence', options);
+    };
+    return Licence;
+}(BaseService));
+export default Licence;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/LicenceTemplates.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceTemplates } from '../templates';
+var LicenceTemplates = /** @class */ (function (_super) {
+    __extends(LicenceTemplates, _super);
+    function LicenceTemplates(options) {
+        return _super.call(this, 'licences', options) || this;
+    }
+    return LicenceTemplates;
+}(ResourceTemplates));
+export default LicenceTemplates;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Lint.js
@@ -0,0 +1,36 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Lint = /** @class */ (function (_super) {
+    __extends(Lint, _super);
+    function Lint() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Lint.prototype.lint = function (content, options) {
+        return RequestHelper.post(this, 'lint', __assign({ content: content }, options));
+    };
+    return Lint;
+}(BaseService));
+export default Lint;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Markdown.js
@@ -0,0 +1,36 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Markdown = /** @class */ (function (_super) {
+    __extends(Markdown, _super);
+    function Markdown() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Markdown.prototype.render = function (text, options) {
+        return RequestHelper.post(this, 'markdown', __assign({ text: text }, options));
+    };
+    return Markdown;
+}(BaseService));
+export default Markdown;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/MergeRequestAwardEmojis.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceAwardEmojis } from '../templates';
+var MergeRequestAwardEmojis = /** @class */ (function (_super) {
+    __extends(MergeRequestAwardEmojis, _super);
+    function MergeRequestAwardEmojis(options) {
+        return _super.call(this, 'merge_requests', options) || this;
+    }
+    return MergeRequestAwardEmojis;
+}(ResourceAwardEmojis));
+export default MergeRequestAwardEmojis;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/MergeRequestDiscussions.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceDiscussions } from '../templates';
+var MergeRequestDiscussions = /** @class */ (function (_super) {
+    __extends(MergeRequestDiscussions, _super);
+    function MergeRequestDiscussions(options) {
+        return _super.call(this, 'projects', 'merge_requests', options) || this;
+    }
+    return MergeRequestDiscussions;
+}(ResourceDiscussions));
+export default MergeRequestDiscussions;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/MergeRequestNotes.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceNotes } from '../templates';
+var MergeRequestNotes = /** @class */ (function (_super) {
+    __extends(MergeRequestNotes, _super);
+    function MergeRequestNotes(options) {
+        return _super.call(this, 'projects', 'merge_requests', options) || this;
+    }
+    return MergeRequestNotes;
+}(ResourceNotes));
+export default MergeRequestNotes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/MergeRequests.js
@@ -0,0 +1,190 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var MergeRequests = /** @class */ (function (_super) {
+    __extends(MergeRequests, _super);
+    function MergeRequests() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    MergeRequests.prototype.accept = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/merge_requests/" + mIId + "/merge", options);
+    };
+    MergeRequests.prototype.addSpentTime = function (projectId, mergerequestIId, duration, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + mIId + "/add_spent_time", __assign({ duration: duration }, options));
+    };
+    MergeRequests.prototype.addTimeEstimate = function (projectId, mergerequestIId, duration, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/issues/" + mIId + "/time_estimate", __assign({ duration: duration }, options));
+    };
+    MergeRequests.prototype.all = function (_a) {
+        var projectId = _a.projectId, groupId = _a.groupId, options = __rest(_a, ["projectId", "groupId"]);
+        var url;
+        if (projectId) {
+            url = "projects/" + encodeURIComponent(projectId) + "/merge_requests";
+        }
+        else if (groupId) {
+            url = "groups/" + encodeURIComponent(groupId) + "/merge_requests";
+        }
+        else {
+            url = 'merge_requests';
+        }
+        return RequestHelper.get(this, url, options);
+    };
+    MergeRequests.prototype.approve = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/merge_requests/" + mIId + "/approve", options);
+    };
+    MergeRequests.prototype.approvals = function (projectId, _a) {
+        var mergerequestIId = _a.mergerequestIId, options = __rest(_a, ["mergerequestIId"]);
+        var _b = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _b[0], mIId = _b[1];
+        var url;
+        if (mergerequestIId) {
+            url = "projects/" + pId + "/merge_requests/" + mIId + "/approvals";
+        }
+        else {
+            url = "projects/" + pId + "/approvals";
+        }
+        return RequestHelper.get(this, url, options);
+    };
+    MergeRequests.prototype.approvers = function (projectId, approverIds, approverGroupIds, _a) {
+        var mergerequestIId = _a.mergerequestIId, options = __rest(_a, ["mergerequestIId"]);
+        var _b = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _b[0], mIId = _b[1];
+        var url;
+        if (mergerequestIId) {
+            url = "projects/" + pId + "/merge_requests/" + mIId + "/approvals";
+        }
+        else {
+            url = "projects/" + pId + "/approvals";
+        }
+        return RequestHelper.post(this, url, __assign({ approverIds: approverIds, approverGroupIds: approverGroupIds }, options));
+    };
+    MergeRequests.prototype.cancelOnPipelineSucess = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/merge_requests/" + mIId + "/cancel_merge_when_pipeline_succeeds", options);
+    };
+    MergeRequests.prototype.changes = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/merge_requests/" + mIId + "/changes", options);
+    };
+    MergeRequests.prototype.closesIssues = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/merge_requests/" + mIId + "/closes_issues", options);
+    };
+    MergeRequests.prototype.commits = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/merge_requests/" + mIId + "/commits", options);
+    };
+    MergeRequests.prototype.create = function (projectId, sourceBranch, targetBranch, title, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/merge_requests", __assign({ id: pId, sourceBranch: sourceBranch,
+            targetBranch: targetBranch,
+            title: title }, options));
+    };
+    MergeRequests.prototype.edit = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/merge_requests/" + mIId, options);
+    };
+    MergeRequests.prototype.editApprovals = function (projectId, _a) {
+        var mergerequestIId = _a.mergerequestIId, options = __rest(_a, ["mergerequestIId"]);
+        var _b = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _b[0], mIId = _b[1];
+        var url;
+        if (mergerequestIId) {
+            url = "projects/" + pId + "/merge_requests/" + mIId + "/approvals";
+        }
+        else {
+            url = "projects/" + pId + "/approvals";
+        }
+        return RequestHelper.post(this, url, options);
+    };
+    MergeRequests.prototype.pipelines = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/merge_requests/" + mIId + "/pipelines", options);
+    };
+    MergeRequests.prototype.remove = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/merge_requests/" + mIId, options);
+    };
+    MergeRequests.prototype.resetSpentTime = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/merge_requests/" + mIId + "/reset_spent_time", options);
+    };
+    MergeRequests.prototype.resetTimeEstimate = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/merge_requests/" + mIId + "/reset_time_estimate", options);
+    };
+    MergeRequests.prototype.show = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/merge_requests/" + mIId, options);
+    };
+    MergeRequests.prototype.timeStats = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/merge_requests/" + mIId + "/time_stats", options);
+    };
+    MergeRequests.prototype.version = function (projectId, mergerequestIId, versionId, options) {
+        var _a = __read([projectId, mergerequestIId, versionId].map(encodeURIComponent), 3), pId = _a[0], mIId = _a[1], vId = _a[2];
+        return RequestHelper.get(this, "projects/" + pId + "/merge_requests/" + mIId + "/versions/" + vId, options);
+    };
+    MergeRequests.prototype.versions = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/merge_requests/" + mIId + "/versions", options);
+    };
+    MergeRequests.prototype.unapprove = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/merge_requests/" + mIId + "/approve", options);
+    };
+    MergeRequests.prototype.unsubscribe = function (projectId, mergerequestIId, options) {
+        var _a = __read([projectId, mergerequestIId].map(encodeURIComponent), 2), pId = _a[0], mIId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/merge_requests/" + mIId + "/unsubscribe", options);
+    };
+    return MergeRequests;
+}(BaseService));
+export default MergeRequests;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Namespaces.js
@@ -0,0 +1,29 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var Namespaces = /** @class */ (function (_super) {
+    __extends(Namespaces, _super);
+    function Namespaces() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Namespaces.prototype.all = function (options) {
+        return RequestHelper.get(this, 'namespaces', options);
+    };
+    Namespaces.prototype.show = function (namespaceId, options) {
+        var nId = encodeURIComponent(namespaceId);
+        return RequestHelper.get(this, "namespaces/" + nId, options);
+    };
+    return Namespaces;
+}(BaseService));
+export default Namespaces;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/NotificationSettings.js
@@ -0,0 +1,55 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var NotificationSettings = /** @class */ (function (_super) {
+    __extends(NotificationSettings, _super);
+    function NotificationSettings() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    NotificationSettings.prototype.all = function (_a) {
+        if (_a === void 0) { _a = {}; }
+        var projectId = _a.projectId, groupId = _a.groupId, options = __rest(_a, ["projectId", "groupId"]);
+        var url = '';
+        if (projectId) {
+            url += "projects/" + encodeURIComponent(projectId) + "/";
+        }
+        else if (groupId) {
+            url += "groups/" + encodeURIComponent(groupId) + "/";
+        }
+        return RequestHelper.get(this, url + "notification_settings", options);
+    };
+    NotificationSettings.prototype.edit = function (_a) {
+        if (_a === void 0) { _a = {}; }
+        var projectId = _a.projectId, groupId = _a.groupId, options = __rest(_a, ["projectId", "groupId"]);
+        var url = '';
+        if (projectId) {
+            url += "projects/" + encodeURIComponent(projectId) + "/";
+        }
+        else if (groupId) {
+            url += "groups/" + encodeURIComponent(groupId) + "/";
+        }
+        return RequestHelper.put(this, url + "notification_settings", options);
+    };
+    return NotificationSettings;
+}(BaseService));
+export default NotificationSettings;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/PagesDomains.js
@@ -0,0 +1,64 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var PagesDomains = /** @class */ (function (_super) {
+    __extends(PagesDomains, _super);
+    function PagesDomains() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    PagesDomains.prototype.all = function (_a) {
+        if (_a === void 0) { _a = {}; }
+        var projectId = _a.projectId, options = __rest(_a, ["projectId"]);
+        var url = projectId ? "projects/" + encodeURIComponent(projectId) + "/" : '';
+        return RequestHelper.get(this, url + "pages/domains", options);
+    };
+    PagesDomains.prototype.create = function (projectId, domain, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/pages/domains", __assign({ domain: domain }, options));
+    };
+    PagesDomains.prototype.edit = function (projectId, domain, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.put(this, "projects/" + pId + "/pages/domains/" + domain, options);
+    };
+    PagesDomains.prototype.show = function (projectId, domain, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/pages/domains/" + domain, options);
+    };
+    PagesDomains.prototype.remove = function (projectId, domain, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.del(this, "projects/" + pId + "/pages/domains/" + domain, options);
+    };
+    return PagesDomains;
+}(BaseService));
+export default PagesDomains;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/PipelineScheduleVariables.js
@@ -0,0 +1,58 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var PipelineScheduleVariables = /** @class */ (function (_super) {
+    __extends(PipelineScheduleVariables, _super);
+    function PipelineScheduleVariables() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    PipelineScheduleVariables.prototype.all = function (projectId, pipelineScheduleId, options) {
+        var _a = __read([projectId, pipelineScheduleId].map(encodeURIComponent), 2), pId = _a[0], psId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/pipeline_schedules/" + psId + "/variables", options);
+    };
+    PipelineScheduleVariables.prototype.create = function (projectId, pipelineScheduleId, options) {
+        var _a = __read([projectId, pipelineScheduleId].map(encodeURIComponent), 2), pId = _a[0], psId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/pipeline_schedules/" + psId + "/variables", options);
+    };
+    PipelineScheduleVariables.prototype.edit = function (projectId, pipelineScheduleId, keyId, options) {
+        var _a = __read([projectId, pipelineScheduleId, keyId].map(encodeURIComponent), 3), pId = _a[0], psId = _a[1], kId = _a[2];
+        return RequestHelper.put(this, "projects/" + pId + "/pipeline_schedules/" + psId + "/variables/" + kId, options);
+    };
+    PipelineScheduleVariables.prototype.show = function (projectId, pipelineScheduleId, keyId, options) {
+        var _a = __read([projectId, pipelineScheduleId, keyId].map(encodeURIComponent), 3), pId = _a[0], psId = _a[1], kId = _a[2];
+        return RequestHelper.get(this, "projects/" + pId + "/pipeline_schedules/" + psId + "/variables/" + kId, options);
+    };
+    PipelineScheduleVariables.prototype.remove = function (projectId, pipelineScheduleId, keyId, options) {
+        var _a = __read([projectId, pipelineScheduleId, keyId].map(encodeURIComponent), 3), pId = _a[0], psId = _a[1], kId = _a[2];
+        return RequestHelper.del(this, "projects/" + pId + "/pipeline_schedules/" + psId + "/variables/" + kId, options);
+    };
+    return PipelineScheduleVariables;
+}(BaseService));
+export default PipelineScheduleVariables;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/PipelineSchedules.js
@@ -0,0 +1,75 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var PipelineSchedules = /** @class */ (function (_super) {
+    __extends(PipelineSchedules, _super);
+    function PipelineSchedules() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    PipelineSchedules.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/pipeline_schedules", options);
+    };
+    PipelineSchedules.prototype.create = function (projectId, description, ref, cron, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/pipeline_schedules", __assign({ description: description,
+            ref: ref,
+            cron: cron }, options));
+    };
+    PipelineSchedules.prototype.edit = function (projectId, scheduleId, options) {
+        var _a = __read([projectId, scheduleId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/pipeline_schedules/" + sId, options);
+    };
+    PipelineSchedules.prototype.remove = function (projectId, scheduleId, options) {
+        var _a = __read([projectId, scheduleId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/pipeline_schedules/" + sId, options);
+    };
+    PipelineSchedules.prototype.show = function (projectId, scheduleId, options) {
+        var _a = __read([projectId, scheduleId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/pipeline_schedules/" + sId, options);
+    };
+    PipelineSchedules.prototype.takeOwnership = function (projectId, scheduleId, options) {
+        var _a = __read([projectId, scheduleId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/pipeline_schedules/" + sId + "/take_ownership", options);
+    };
+    return PipelineSchedules;
+}(BaseService));
+export default PipelineSchedules;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Pipelines.js
@@ -0,0 +1,57 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Pipelines = /** @class */ (function (_super) {
+    __extends(Pipelines, _super);
+    function Pipelines() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Pipelines.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/pipelines", options);
+    };
+    Pipelines.prototype.create = function (projectId, ref, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/pipeline", __assign({ ref: ref }, options));
+    };
+    Pipelines.prototype.show = function (projectId, pipelineId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/pipelines/" + pipelineId, options);
+    };
+    Pipelines.prototype.retry = function (projectId, pipelineId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/pipelines/" + pipelineId + "/retry", options);
+    };
+    Pipelines.prototype.cancel = function (projectId, pipelineId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/pipelines/" + pipelineId + "/cancel", options);
+    };
+    Pipelines.prototype.showJobs = function (projectId, pipelineId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/pipelines/" + pipelineId + "/jobs", options);
+    };
+    return Pipelines;
+}(BaseService));
+export default Pipelines;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectAccessRequests.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceAccessRequests } from '../templates';
+var ProjectAccessRequests = /** @class */ (function (_super) {
+    __extends(ProjectAccessRequests, _super);
+    function ProjectAccessRequests(options) {
+        return _super.call(this, 'projects', options) || this;
+    }
+    return ProjectAccessRequests;
+}(ResourceAccessRequests));
+export default ProjectAccessRequests;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectBadges.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceBadges } from '../templates';
+var ProjectBadges = /** @class */ (function (_super) {
+    __extends(ProjectBadges, _super);
+    function ProjectBadges(options) {
+        return _super.call(this, 'projects', options) || this;
+    }
+    return ProjectBadges;
+}(ResourceBadges));
+export default ProjectBadges;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectCustomAttributes.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceCustomAttributes } from '../templates';
+var ProjectCustomAttributes = /** @class */ (function (_super) {
+    __extends(ProjectCustomAttributes, _super);
+    function ProjectCustomAttributes(options) {
+        return _super.call(this, 'projects', options) || this;
+    }
+    return ProjectCustomAttributes;
+}(ResourceCustomAttributes));
+export default ProjectCustomAttributes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectHooks.js
@@ -0,0 +1,69 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ProjectHooks = /** @class */ (function (_super) {
+    __extends(ProjectHooks, _super);
+    function ProjectHooks() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    ProjectHooks.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/hooks", options);
+    };
+    ProjectHooks.prototype.show = function (projectId, hookId, options) {
+        var _a = __read([projectId, hookId].map(encodeURIComponent), 2), pId = _a[0], hId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/hooks/" + hId, options);
+    };
+    ProjectHooks.prototype.add = function (projectId, url, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/hooks", __assign({ url: url }, options));
+    };
+    ProjectHooks.prototype.edit = function (projectId, hookId, url, options) {
+        var _a = __read([projectId, hookId].map(encodeURIComponent), 2), pId = _a[0], hId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/hooks/" + hId, __assign({ url: url }, options));
+    };
+    ProjectHooks.prototype.remove = function (projectId, hookId, options) {
+        var _a = __read([projectId, hookId].map(encodeURIComponent), 2), pId = _a[0], hId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/hooks/" + hId, options);
+    };
+    return ProjectHooks;
+}(BaseService));
+export default ProjectHooks;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectImportExport.js
@@ -0,0 +1,63 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import FormData from 'form-data';
+import { BaseService, RequestHelper } from '../infrastructure';
+var ProjectImportExport = /** @class */ (function (_super) {
+    __extends(ProjectImportExport, _super);
+    function ProjectImportExport() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    ProjectImportExport.prototype.download = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/export/download", options);
+    };
+    ProjectImportExport.prototype.exportStatus = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/export", options);
+    };
+    ProjectImportExport.prototype.import = function (content, path, options) {
+        var form = new FormData();
+        form.append(path, {
+            file: {
+                value: content,
+                options: {
+                    filename: path,
+                    contentType: 'application/octet-stream',
+                },
+            },
+        });
+        return RequestHelper.post(this, 'projects/import', __assign({}, form, options));
+    };
+    ProjectImportExport.prototype.importStatus = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/import", options);
+    };
+    ProjectImportExport.prototype.schedule = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/export", options);
+    };
+    return ProjectImportExport;
+}(BaseService));
+export default ProjectImportExport;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectIssueBoards.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceIssueBoards } from '../templates';
+var ProjectIssueBoards = /** @class */ (function (_super) {
+    __extends(ProjectIssueBoards, _super);
+    function ProjectIssueBoards(options) {
+        return _super.call(this, 'projects', options) || this;
+    }
+    return ProjectIssueBoards;
+}(ResourceIssueBoards));
+export default ProjectIssueBoards;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectMembers.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceMembers } from '../templates';
+var ProjectMembers = /** @class */ (function (_super) {
+    __extends(ProjectMembers, _super);
+    function ProjectMembers(options) {
+        return _super.call(this, 'projects', options) || this;
+    }
+    return ProjectMembers;
+}(ResourceMembers));
+export default ProjectMembers;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectMilestones.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceMilestones } from '../templates';
+var ProjectMilestones = /** @class */ (function (_super) {
+    __extends(ProjectMilestones, _super);
+    function ProjectMilestones(options) {
+        return _super.call(this, 'projects', options) || this;
+    }
+    return ProjectMilestones;
+}(ResourceMilestones));
+export default ProjectMilestones;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectSnippetAwardEmojis.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceAwardEmojis } from '../templates';
+var ProjectSnippetAwardEmojis = /** @class */ (function (_super) {
+    __extends(ProjectSnippetAwardEmojis, _super);
+    function ProjectSnippetAwardEmojis(options) {
+        return _super.call(this, 'issues', options) || this;
+    }
+    return ProjectSnippetAwardEmojis;
+}(ResourceAwardEmojis));
+export default ProjectSnippetAwardEmojis;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectSnippetDiscussions.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceDiscussions } from '../templates';
+var ProjectSnippetDiscussions = /** @class */ (function (_super) {
+    __extends(ProjectSnippetDiscussions, _super);
+    function ProjectSnippetDiscussions(options) {
+        return _super.call(this, 'projects', 'snippets', options) || this;
+    }
+    return ProjectSnippetDiscussions;
+}(ResourceDiscussions));
+export default ProjectSnippetDiscussions;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectSnippetNotes.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceNotes } from '../templates';
+var ProjectSnippetNotes = /** @class */ (function (_super) {
+    __extends(ProjectSnippetNotes, _super);
+    function ProjectSnippetNotes(options) {
+        return _super.call(this, 'projects', 'snippets', options) || this;
+    }
+    return ProjectSnippetNotes;
+}(ResourceNotes));
+export default ProjectSnippetNotes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectSnippets.js
@@ -0,0 +1,80 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ProjectSnippets = /** @class */ (function (_super) {
+    __extends(ProjectSnippets, _super);
+    function ProjectSnippets() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    ProjectSnippets.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/snippets", options);
+    };
+    ProjectSnippets.prototype.content = function (projectId, snippetId, options) {
+        var _a = __read([projectId, snippetId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/snippets/" + sId + "/raw", options);
+    };
+    ProjectSnippets.prototype.create = function (projectId, title, fileName, code, visibility, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/snippets", __assign({ title: title,
+            fileName: fileName,
+            code: code,
+            visibility: visibility }, options));
+    };
+    ProjectSnippets.prototype.edit = function (projectId, snippetId, options) {
+        var _a = __read([projectId, snippetId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/snippets/" + sId, options);
+    };
+    ProjectSnippets.prototype.remove = function (projectId, snippetId, options) {
+        var _a = __read([projectId, snippetId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/snippets/" + sId, options);
+    };
+    ProjectSnippets.prototype.show = function (projectId, snippetId, options) {
+        var _a = __read([projectId, snippetId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/snippets/" + sId, options);
+    };
+    ProjectSnippets.prototype.userAgentDetails = function (projectId, snippetId, options) {
+        var _a = __read([projectId, snippetId].map(encodeURIComponent), 2), pId = _a[0], sId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/snippets/" + sId + "/user_agent_detail", options);
+    };
+    return ProjectSnippets;
+}(BaseService));
+export default ProjectSnippets;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProjectVariables.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceVariables } from '../templates';
+var ProjectVariables = /** @class */ (function (_super) {
+    __extends(ProjectVariables, _super);
+    function ProjectVariables(options) {
+        return _super.call(this, 'projects', options) || this;
+    }
+    return ProjectVariables;
+}(ResourceVariables));
+export default ProjectVariables;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Projects.js
@@ -0,0 +1,154 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import FormData from 'form-data';
+import randomstring from 'randomstring';
+import { BaseService, RequestHelper } from '../infrastructure';
+var Projects = /** @class */ (function (_super) {
+    __extends(Projects, _super);
+    function Projects() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Projects.prototype.all = function (options) {
+        return RequestHelper.get(this, 'projects', options);
+    };
+    Projects.prototype.archive = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/archive", options);
+    };
+    Projects.prototype.create = function (_a) {
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        var url = userId ? "projects/user/" + encodeURIComponent(userId) : 'projects';
+        return RequestHelper.post(this, url, options);
+    };
+    Projects.prototype.edit = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.put(this, "projects/" + pId, options);
+    };
+    Projects.prototype.events = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/events", options);
+    };
+    Projects.prototype.fork = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/fork", options);
+    };
+    Projects.prototype.forks = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/forks", options);
+    };
+    Projects.prototype.languages = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/languages", options);
+    };
+    Projects.prototype.mirrorPull = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/mirror/pull", options);
+    };
+    Projects.prototype.remove = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.del(this, "projects/" + pId, options);
+    };
+    Projects.prototype.search = function (projectName) {
+        return RequestHelper.get(this, 'projects', { search: projectName });
+    };
+    Projects.prototype.share = function (projectId, groupId, groupAccess, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/share", __assign({ groupId: groupId, groupAccess: groupAccess }, options));
+    };
+    Projects.prototype.show = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId, options);
+    };
+    Projects.prototype.star = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/star", options);
+    };
+    Projects.prototype.statuses = function (projectId, sha, state, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/statuses/" + sha, __assign({ state: state }, options));
+    };
+    Projects.prototype.transfer = function (projectId, namespaceId) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.put(this, "projects/" + pId + "/transfer", { namespace: namespaceId });
+    };
+    Projects.prototype.unarchive = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/unarchive", options);
+    };
+    Projects.prototype.unshare = function (projectId, groupId, options) {
+        var _a = __read([projectId, groupId].map(encodeURIComponent), 2), pId = _a[0], gId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/share" + gId, options);
+    };
+    Projects.prototype.unstar = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/unstar", options);
+    };
+    Projects.prototype.updatePushRule = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.put(this, "projects/" + pId + "/push_rule", options);
+    };
+    Projects.prototype.upload = function (projectId, content, _a) {
+        var _b = _a.fileName, fileName = _b === void 0 ? randomstring(8) : _b;
+        var pId = encodeURIComponent(projectId);
+        var form = new FormData();
+        form.append(fileName, {
+            file: {
+                value: content,
+                options: {
+                    filename: fileName,
+                    contentType: 'application/octet-stream',
+                },
+            },
+        });
+        return RequestHelper.post(this, "projects/" + pId + "/uploads", form);
+    };
+    return Projects;
+}(BaseService));
+export default Projects;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProtectedBranches.js
@@ -0,0 +1,65 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ProtectedBranches = /** @class */ (function (_super) {
+    __extends(ProtectedBranches, _super);
+    function ProtectedBranches() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    ProtectedBranches.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/protected_branches", options);
+    };
+    ProtectedBranches.prototype.protect = function (projectId, branchName, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/protected_branches", __assign({ name: branchName }, options));
+    };
+    ProtectedBranches.prototype.show = function (projectId, branchName, options) {
+        var _a = __read([projectId, branchName].map(encodeURIComponent), 2), pId = _a[0], bName = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/protected_branches/" + bName, options);
+    };
+    ProtectedBranches.prototype.unprotect = function (projectId, branchName, options) {
+        var _a = __read([projectId, branchName].map(encodeURIComponent), 2), pId = _a[0], bName = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/protected_branches/" + bName, options);
+    };
+    return ProtectedBranches;
+}(BaseService));
+export default ProtectedBranches;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/ProtectedTags.js
@@ -0,0 +1,65 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ProtectedTags = /** @class */ (function (_super) {
+    __extends(ProtectedTags, _super);
+    function ProtectedTags() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    ProtectedTags.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/protected_tags", options);
+    };
+    ProtectedTags.prototype.protect = function (projectId, tagName, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/protected_tags", __assign({ name: tagName }, options));
+    };
+    ProtectedTags.prototype.show = function (projectId, tagName, options) {
+        var _a = __read([projectId, tagName].map(encodeURIComponent), 2), pId = _a[0], tName = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/protected_tags/" + tName, options);
+    };
+    ProtectedTags.prototype.unprotect = function (projectId, tagName, options) {
+        var _a = __read([projectId, tagName].map(encodeURIComponent), 2), pId = _a[0], tName = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/protected_tags/" + tName, options);
+    };
+    return ProtectedTags;
+}(BaseService));
+export default ProtectedTags;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/PushRule.js
@@ -0,0 +1,55 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var PushRule = /** @class */ (function (_super) {
+    __extends(PushRule, _super);
+    function PushRule() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    PushRule.prototype.create = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/push_rule", options);
+    };
+    PushRule.prototype.edit = function (projectId, _a) {
+        var _b = _a.upsert, upsert = _b === void 0 ? false : _b, options = __rest(_a, ["upsert"]);
+        var pId = encodeURIComponent(projectId);
+        try {
+            return RequestHelper.put(this, "projects/" + pId + "/push_rule", options);
+        }
+        catch (e) {
+            if (e.message.includes('exist'))
+                return this.create(projectId, options);
+            throw e;
+        }
+    };
+    PushRule.prototype.remove = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.del(this, "projects/" + pId + "/push_rule", options);
+    };
+    PushRule.prototype.show = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/push_rule", options);
+    };
+    return PushRule;
+}(BaseService));
+export default PushRule;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Repositories.js
@@ -0,0 +1,58 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Repositories = /** @class */ (function (_super) {
+    __extends(Repositories, _super);
+    function Repositories() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Repositories.prototype.compare = function (projectId, from, to, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/compare", __assign({ from: from,
+            to: to }, options));
+    };
+    Repositories.prototype.contributors = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/contributors", options);
+    };
+    Repositories.prototype.showArchive = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/archive", options);
+    };
+    Repositories.prototype.showBlob = function (projectId, sha, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/blobs/" + sha, options);
+    };
+    Repositories.prototype.showBlobRaw = function (projectId, sha, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/blobs/" + sha + "/raw", options);
+    };
+    Repositories.prototype.tree = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/tree", options);
+    };
+    return Repositories;
+}(BaseService));
+export default Repositories;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/RepositoryFiles.js
@@ -0,0 +1,71 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var RepositoryFiles = /** @class */ (function (_super) {
+    __extends(RepositoryFiles, _super);
+    function RepositoryFiles() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    RepositoryFiles.prototype.create = function (projectId, filePath, branch, content, options) {
+        var _a = __read([projectId, filePath].map(encodeURIComponent), 2), pId = _a[0], path = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/repository/files/" + path, __assign({ branch: branch,
+            content: content }, options));
+    };
+    RepositoryFiles.prototype.edit = function (projectId, filePath, branch, content, options) {
+        var _a = __read([projectId, filePath].map(encodeURIComponent), 2), pId = _a[0], path = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/repository/files/" + path, __assign({ branch: branch,
+            content: content }, options));
+    };
+    RepositoryFiles.prototype.remove = function (projectId, filePath, branch, options) {
+        var _a = __read([projectId, filePath].map(encodeURIComponent), 2), pId = _a[0], path = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/repository/files/" + path, __assign({ branch: branch }, options));
+    };
+    RepositoryFiles.prototype.show = function (projectId, filePath, ref, options) {
+        var _a = __read([projectId, filePath].map(encodeURIComponent), 2), pId = _a[0], path = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/repository/files/" + path, __assign({ ref: ref }, options));
+    };
+    RepositoryFiles.prototype.showRaw = function (projectId, filePath, ref, options) {
+        var _a = __read([projectId, filePath].map(encodeURIComponent), 2), pId = _a[0], path = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/repository/files/" + path + "/raw", __assign({ ref: ref }, options));
+    };
+    return RepositoryFiles;
+}(BaseService));
+export default RepositoryFiles;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Runners.js
@@ -0,0 +1,90 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Runners = /** @class */ (function (_super) {
+    __extends(Runners, _super);
+    function Runners() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Runners.prototype.all = function (_a) {
+        var projectId = _a.projectId, options = __rest(_a, ["projectId"]);
+        var url = projectId ? "projects/" + encodeURIComponent(projectId) + "/runners" : 'runners/all';
+        return RequestHelper.get(this, url, options);
+    };
+    Runners.prototype.allOwned = function (options) {
+        return RequestHelper.get(this, 'runners', options);
+    };
+    Runners.prototype.edit = function (runnerId, options) {
+        var rId = encodeURIComponent(runnerId);
+        return RequestHelper.put(this, "runners/" + rId, options);
+    };
+    Runners.prototype.enable = function (projectId, runnerId, options) {
+        var _a = __read([projectId, runnerId].map(encodeURIComponent), 2), pId = _a[0], rId = _a[1];
+        return RequestHelper.post(this, "projects/" + pId + "/runners", __assign({ runnerId: rId }, options));
+    };
+    Runners.prototype.disable = function (projectId, runnerId, options) {
+        var _a = __read([projectId, runnerId].map(encodeURIComponent), 2), pId = _a[0], rId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/runners/" + rId, options);
+    };
+    Runners.prototype.jobs = function (runnerId, options) {
+        var rId = encodeURIComponent(runnerId);
+        return RequestHelper.get(this, "runners/" + rId + "/jobs", options);
+    };
+    Runners.prototype.remove = function (runnerId, options) {
+        var rId = encodeURIComponent(runnerId);
+        return RequestHelper.del(this, "runners/" + rId, options);
+    };
+    Runners.prototype.show = function (runnerId, options) {
+        var rId = encodeURIComponent(runnerId);
+        return RequestHelper.get(this, "runners/" + rId, options);
+    };
+    return Runners;
+}(BaseService));
+export default Runners;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Search.js
@@ -0,0 +1,53 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Search = /** @class */ (function (_super) {
+    __extends(Search, _super);
+    function Search() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Search.prototype.all = function (scope, search, _a) {
+        var projectId = _a.projectId, groupId = _a.groupId, options = __rest(_a, ["projectId", "groupId"]);
+        var url = '';
+        if (projectId) {
+            url += "projects/" + encodeURIComponent(projectId) + "/";
+        }
+        else if (groupId) {
+            url += "groups/" + encodeURIComponent(groupId) + "/";
+        }
+        return RequestHelper.get(this, url + "search", __assign({ scope: scope, search: search }, options));
+    };
+    return Search;
+}(BaseService));
+export default Search;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Services.js
@@ -0,0 +1,34 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var Services = /** @class */ (function (_super) {
+    __extends(Services, _super);
+    function Services() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Services.prototype.edit = function (projectId, serviceName, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.put(this, "projects/" + pId + "/services/" + serviceName, options);
+    };
+    Services.prototype.remove = function (projectId, serviceName, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.del(this, "projects/" + pId + "/services/" + serviceName, options);
+    };
+    Services.prototype.show = function (projectId, serviceName, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/services/" + serviceName, options);
+    };
+    return Services;
+}(BaseService));
+export default Services;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/SidekiqMetrics.js
@@ -0,0 +1,34 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var SidekiqMetrics = /** @class */ (function (_super) {
+    __extends(SidekiqMetrics, _super);
+    function SidekiqMetrics() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    SidekiqMetrics.prototype.queueMetrics = function () {
+        return RequestHelper.get(this, 'sidekiq/queue_metrics');
+    };
+    SidekiqMetrics.prototype.processMetrics = function () {
+        return RequestHelper.get(this, 'sidekiq/process_metrics');
+    };
+    SidekiqMetrics.prototype.jobStats = function () {
+        return RequestHelper.get(this, 'sidekiq/job_stats');
+    };
+    SidekiqMetrics.prototype.compoundMetrics = function () {
+        return RequestHelper.get(this, 'sidekiq/compound_metrics');
+    };
+    return SidekiqMetrics;
+}(BaseService));
+export default SidekiqMetrics;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Snippets.js
@@ -0,0 +1,73 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Snippets = /** @class */ (function (_super) {
+    __extends(Snippets, _super);
+    function Snippets() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Snippets.prototype.all = function (_a) {
+        var p = _a.public, options = __rest(_a, ["public"]);
+        var url = p ? 'snippets/public' : 'snippets';
+        return RequestHelper.get(this, url, options);
+    };
+    Snippets.prototype.content = function (snippetId, options) {
+        var sId = encodeURIComponent(snippetId);
+        return RequestHelper.get(this, "snippets/" + sId + "/raw", options);
+    };
+    Snippets.prototype.create = function (title, fileName, content, visibility, options) {
+        return RequestHelper.post(this, 'snippets', __assign({ title: title,
+            fileName: fileName,
+            content: content,
+            visibility: visibility }, options));
+    };
+    Snippets.prototype.edit = function (snippetId, options) {
+        var sId = encodeURIComponent(snippetId);
+        return RequestHelper.put(this, "snippets/" + sId, options);
+    };
+    Snippets.prototype.remove = function (snippetId, options) {
+        var sId = encodeURIComponent(snippetId);
+        return RequestHelper.del(this, "snippets/" + sId, options);
+    };
+    Snippets.prototype.show = function (snippetId, options) {
+        var sId = encodeURIComponent(snippetId);
+        return RequestHelper.get(this, "snippets/" + sId, options);
+    };
+    Snippets.prototype.userAgentDetails = function (snippetId, options) {
+        var sId = encodeURIComponent(snippetId);
+        return RequestHelper.get(this, "snippets/" + sId + "/user_agent_detail", options);
+    };
+    return Snippets;
+}(BaseService));
+export default Snippets;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/SystemHooks.js
@@ -0,0 +1,47 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var SystemHooks = /** @class */ (function (_super) {
+    __extends(SystemHooks, _super);
+    function SystemHooks() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    SystemHooks.prototype.add = function (url, options) {
+        return RequestHelper.post(this, 'hooks', __assign({ url: url }, options));
+    };
+    SystemHooks.prototype.all = function (options) {
+        return RequestHelper.get(this, 'hooks', options);
+    };
+    SystemHooks.prototype.edit = function (hookId, url, options) {
+        var hId = encodeURIComponent(hookId);
+        return RequestHelper.put(this, "hooks/" + hId, __assign({ url: url }, options));
+    };
+    SystemHooks.prototype.remove = function (hookId, options) {
+        var hId = encodeURIComponent(hookId);
+        return RequestHelper.del(this, "hooks/" + hId, options);
+    };
+    return SystemHooks;
+}(BaseService));
+export default SystemHooks;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Tags.js
@@ -0,0 +1,54 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Tags = /** @class */ (function (_super) {
+    __extends(Tags, _super);
+    function Tags() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Tags.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/repository/tags", options);
+    };
+    Tags.prototype.create = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/repository/tags", options);
+    };
+    Tags.prototype.remove = function (projectId, tagName, options) {
+        var _a = __read([projectId, tagName].map(encodeURIComponent), 2), pId = _a[0], tId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/repository/tags/" + tId, options);
+    };
+    Tags.prototype.show = function (projectId, tagName, options) {
+        var _a = __read([projectId, tagName].map(encodeURIComponent), 2), pId = _a[0], tId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/repository/tags/" + tId, options);
+    };
+    return Tags;
+}(BaseService));
+export default Tags;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Todos.js
@@ -0,0 +1,44 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Todos = /** @class */ (function (_super) {
+    __extends(Todos, _super);
+    function Todos() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Todos.prototype.all = function (options) {
+        return RequestHelper.get(this, 'todos', options);
+    };
+    Todos.prototype.create = function (projectId, mergerequestId, options) {
+        return RequestHelper.post(this, "projects/" + projectId + "/merge_requests/" + mergerequestId + "/todo", options);
+    };
+    Todos.prototype.done = function (_a) {
+        var todoId = _a.todoId, options = __rest(_a, ["todoId"]);
+        var url = 'mark_as_done';
+        if (todoId)
+            url = todoId + "/" + url;
+        return RequestHelper.del(this, "todos/" + url, options);
+    };
+    return Todos;
+}(BaseService));
+export default Todos;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Triggers.js
@@ -0,0 +1,58 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Triggers = /** @class */ (function (_super) {
+    __extends(Triggers, _super);
+    function Triggers() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Triggers.prototype.add = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/triggers", options);
+    };
+    Triggers.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/triggers", options);
+    };
+    Triggers.prototype.edit = function (projectId, triggerId, options) {
+        var _a = __read([projectId, triggerId].map(encodeURIComponent), 2), pId = _a[0], tId = _a[1];
+        return RequestHelper.put(this, "projects/" + pId + "/triggers/" + tId, options);
+    };
+    Triggers.prototype.remove = function (projectId, triggerId, options) {
+        var _a = __read([projectId, triggerId].map(encodeURIComponent), 2), pId = _a[0], tId = _a[1];
+        return RequestHelper.del(this, "projects/" + pId + "/triggers/" + tId, options);
+    };
+    Triggers.prototype.show = function (projectId, triggerId, options) {
+        var _a = __read([projectId, triggerId].map(encodeURIComponent), 2), pId = _a[0], tId = _a[1];
+        return RequestHelper.get(this, "projects/" + pId + "/triggers/" + tId, options);
+    };
+    return Triggers;
+}(BaseService));
+export default Triggers;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/UserCustomAttributes.js
@@ -0,0 +1,22 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { ResourceCustomAttributes } from '../templates';
+var UserCustomAttributes = /** @class */ (function (_super) {
+    __extends(UserCustomAttributes, _super);
+    function UserCustomAttributes(options) {
+        return _super.call(this, 'users', options) || this;
+    }
+    return UserCustomAttributes;
+}(ResourceCustomAttributes));
+export default UserCustomAttributes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/UserEmails.js
@@ -0,0 +1,63 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var url = function (userId) { return (userId ? "users/" + encodeURIComponent(userId) + "/emails" : 'user/emails'); };
+var UserEmails = /** @class */ (function (_super) {
+    __extends(UserEmails, _super);
+    function UserEmails() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    UserEmails.prototype.all = function (_a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        return RequestHelper.get(this, url(userId), options);
+    };
+    UserEmails.prototype.add = function (email, _a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        return RequestHelper.post(this, url(userId), __assign({ email: email }, options));
+    };
+    UserEmails.prototype.show = function (emailId, options) {
+        var eId = encodeURIComponent(emailId);
+        return RequestHelper.get(this, "user/emails/" + eId, options);
+    };
+    UserEmails.prototype.remove = function (emailId, _a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        var eId = encodeURIComponent(emailId);
+        return RequestHelper.del(this, url(userId) + "/" + eId, options);
+    };
+    return UserEmails;
+}(BaseService));
+export default UserEmails;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/UserGPGKeys.js
@@ -0,0 +1,66 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var url = function (userId) { return (userId ? "users/" + encodeURIComponent(userId) + "/gpg_keys" : 'users/gpg_keys'); };
+var UserGPGKeys = /** @class */ (function (_super) {
+    __extends(UserGPGKeys, _super);
+    function UserGPGKeys() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    UserGPGKeys.prototype.all = function (_a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        return RequestHelper.get(this, url(userId), options);
+    };
+    UserGPGKeys.prototype.add = function (title, key, _a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        return RequestHelper.post(this, url(userId), __assign({ title: title,
+            key: key }, options));
+    };
+    UserGPGKeys.prototype.show = function (keyId, _a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        var kId = encodeURIComponent(keyId);
+        return RequestHelper.get(this, url(userId) + "/" + kId, options);
+    };
+    UserGPGKeys.prototype.remove = function (keyId, _a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        var kId = encodeURIComponent(keyId);
+        return RequestHelper.del(this, url(userId) + "/" + kId, options);
+    };
+    return UserGPGKeys;
+}(BaseService));
+export default UserGPGKeys;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/UserImpersonationTokens.js
@@ -0,0 +1,67 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var UserImpersonationTokens = /** @class */ (function (_super) {
+    __extends(UserImpersonationTokens, _super);
+    function UserImpersonationTokens() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    UserImpersonationTokens.prototype.all = function (userId, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.get(this, "users/" + uId + "/impersonation_tokens", options);
+    };
+    UserImpersonationTokens.prototype.add = function (userId, name, scopes, expiresAt, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.post(this, "users/" + uId + "/impersonation_tokens", __assign({ name: name,
+            expiresAt: expiresAt,
+            scopes: scopes }, options));
+    };
+    UserImpersonationTokens.prototype.show = function (userId, tokenId, options) {
+        var _a = __read([userId, tokenId].map(encodeURIComponent), 2), uId = _a[0], tId = _a[1];
+        return RequestHelper.get(this, "users/" + uId + "/impersonation_tokens/" + tId, options);
+    };
+    UserImpersonationTokens.prototype.revoke = function (userId, tokenId, options) {
+        var _a = __read([userId, tokenId].map(encodeURIComponent), 2), uId = _a[0], tId = _a[1];
+        return RequestHelper.del(this, "users/" + uId + "/impersonation_tokens/" + tId, options);
+    };
+    return UserImpersonationTokens;
+}(BaseService));
+export default UserImpersonationTokens;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/UserKeys.js
@@ -0,0 +1,64 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __rest = (this && this.__rest) || function (s, e) {
+    var t = {};
+    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
+        t[p] = s[p];
+    if (s != null && typeof Object.getOwnPropertySymbols === "function")
+        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
+            t[p[i]] = s[p[i]];
+    return t;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var url = function (userId) { return (userId ? "users/" + encodeURIComponent(userId) + "/keys" : 'user/keys'); };
+var UserKeys = /** @class */ (function (_super) {
+    __extends(UserKeys, _super);
+    function UserKeys() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    UserKeys.prototype.all = function (_a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        return RequestHelper.get(this, url(userId), options);
+    };
+    UserKeys.prototype.create = function (title, key, _a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        return RequestHelper.post(this, url(userId), __assign({ title: title,
+            key: key }, options));
+    };
+    UserKeys.prototype.show = function (keyId, options) {
+        var kId = encodeURIComponent(keyId);
+        return RequestHelper.get(this, "user/keys/" + kId, options);
+    };
+    UserKeys.prototype.remove = function (keyId, _a) {
+        if (_a === void 0) { _a = {}; }
+        var userId = _a.userId, options = __rest(_a, ["userId"]);
+        var kId = encodeURIComponent(keyId);
+        return RequestHelper.del(this, url(userId) + "/" + kId, options);
+    };
+    return UserKeys;
+}(BaseService));
+export default UserKeys;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Users.js
@@ -0,0 +1,80 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var Users = /** @class */ (function (_super) {
+    __extends(Users, _super);
+    function Users() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Users.prototype.all = function (options) {
+        return RequestHelper.get(this, 'users', options);
+    };
+    Users.prototype.activities = function (options) {
+        return RequestHelper.get(this, 'users/activities', options);
+    };
+    Users.prototype.projects = function (userId, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.get(this, "users/" + uId + "/projects", options);
+    };
+    Users.prototype.block = function (userId, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.post(this, "users/" + uId + "/block", options);
+    };
+    Users.prototype.create = function (options) {
+        return RequestHelper.post(this, 'users', options);
+    };
+    Users.prototype.current = function (options) {
+        return RequestHelper.get(this, 'user', options);
+    };
+    Users.prototype.edit = function (userId, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.put(this, "users/" + uId, options);
+    };
+    Users.prototype.events = function (userId, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.get(this, "users/" + uId + "/events", options);
+    };
+    Users.prototype.session = function (email, password, options) {
+        return RequestHelper.post(this, 'session', __assign({ email: email,
+            password: password }, options));
+    };
+    Users.prototype.search = function (emailOrUsername, options) {
+        return RequestHelper.get(this, 'users', __assign({ search: emailOrUsername }, options));
+    };
+    Users.prototype.show = function (userId, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.get(this, "users/" + uId, options);
+    };
+    Users.prototype.remove = function (userId, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.del(this, "users/" + uId, options);
+    };
+    Users.prototype.unblock = function (userId, options) {
+        var uId = encodeURIComponent(userId);
+        return RequestHelper.post(this, "users/" + uId + "/unblock", options);
+    };
+    return Users;
+}(BaseService));
+export default Users;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Version.js
@@ -0,0 +1,25 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var Version = /** @class */ (function (_super) {
+    __extends(Version, _super);
+    function Version() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Version.prototype.show = function (options) {
+        return RequestHelper.get(this, 'version', options);
+    };
+    return Version;
+}(BaseService));
+export default Version;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/Wikis.js
@@ -0,0 +1,42 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+import { BaseService, RequestHelper } from '../infrastructure';
+var Wikis = /** @class */ (function (_super) {
+    __extends(Wikis, _super);
+    function Wikis() {
+        return _super !== null && _super.apply(this, arguments) || this;
+    }
+    Wikis.prototype.all = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/wikis", options);
+    };
+    Wikis.prototype.create = function (projectId, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.post(this, "projects/" + pId + "/wikis", options);
+    };
+    Wikis.prototype.edit = function (projectId, slug, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.put(this, "projects/" + pId + "/wikis/" + slug, options);
+    };
+    Wikis.prototype.show = function (projectId, slug, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.get(this, "projects/" + pId + "/wikis/" + slug, options);
+    };
+    Wikis.prototype.remove = function (projectId, slug, options) {
+        var pId = encodeURIComponent(projectId);
+        return RequestHelper.del(this, "projects/" + pId + "/wikis/" + slug, options);
+    };
+    return Wikis;
+}(BaseService));
+export default Wikis;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/services/index.js
@@ -0,0 +1,87 @@
+// Groups
+export { default as Groups } from './Groups';
+export { default as GroupAccessRequests } from './GroupAccessRequests';
+export { default as GroupBadges } from './GroupBadges';
+export { default as GroupCustomAttributes } from './GroupCustomAttributes';
+export { default as GroupIssueBoards } from './GroupIssueBoards';
+export { default as GroupMembers } from './GroupMembers';
+export { default as GroupMilestones } from './GroupMilestones';
+export { default as GroupProjects } from './GroupProjects';
+export { default as GroupVariables } from './GroupVariables';
+export { default as Epics } from './Epics';
+export { default as EpicIssues } from './EpicIssues';
+export { default as EpicNotes } from './EpicNotes';
+export { default as EpicDiscussions } from './EpicDiscussions';
+// Users
+export { default as Users } from './Users';
+export { default as UserCustomAttributes } from './UserCustomAttributes';
+export { default as UserEmails } from './UserEmails';
+export { default as UserImpersonationTokens } from './UserImpersonationTokens';
+export { default as UserKeys } from './UserKeys';
+export { default as UserGPGKeys } from './UserGPGKeys';
+// Projects
+export { default as Branches } from './Branches';
+export { default as Commits } from './Commits';
+export { default as CommitDiscussions } from './CommitDiscussions';
+export { default as Deployments } from './Deployments';
+export { default as DeployKeys } from './DeployKeys';
+export { default as Environments } from './Environments';
+export { default as Issues } from './Issues';
+export { default as IssueNotes } from './IssueNotes';
+export { default as IssueDiscussions } from './IssueDiscussions';
+export { default as IssueAwardEmojis } from './IssueAwardEmojis';
+export { default as Jobs } from './Jobs';
+export { default as Labels } from './Labels';
+export { default as MergeRequests } from './MergeRequests';
+export { default as MergeRequestAwardEmojis } from './MergeRequestAwardEmojis';
+export { default as MergeRequestDiscussions } from './MergeRequestDiscussions';
+export { default as MergeRequestNotes } from './MergeRequestNotes';
+export { default as Pipelines } from './Pipelines';
+export { default as PipelineSchedules } from './PipelineSchedules';
+export { default as PipelineScheduleVariables } from './PipelineScheduleVariables';
+export { default as Projects } from './Projects';
+export { default as ProjectAccessRequests } from './ProjectAccessRequests';
+export { default as ProjectBadges } from './ProjectBadges';
+export { default as ProjectCustomAttributes } from './ProjectCustomAttributes';
+export { default as ProjectImportExport } from './ProjectImportExport';
+export { default as ProjectIssueBoards } from './ProjectIssueBoards';
+export { default as ProjectHooks } from './ProjectHooks';
+export { default as ProjectMembers } from './ProjectMembers';
+export { default as ProjectMilestones } from './ProjectMilestones';
+export { default as ProjectSnippets } from './ProjectSnippets';
+export { default as ProjectSnippetNotes } from './ProjectSnippetNotes';
+export { default as ProjectSnippetDiscussions } from './ProjectSnippetDiscussions';
+export { default as ProjectSnippetAwardEmojis } from './ProjectSnippetAwardEmojis';
+export { default as ProtectedBranches } from './ProtectedBranches';
+export { default as ProtectedTags } from './ProtectedTags';
+export { default as ProjectVariables } from './ProjectVariables';
+export { default as Repositories } from './Repositories';
+export { default as RepositoryFiles } from './RepositoryFiles';
+export { default as Runners } from './Runners';
+export { default as Services } from './Services';
+export { default as Tags } from './Tags';
+export { default as Todos } from './Todos';
+export { default as Triggers } from './Triggers';
+export { default as PushRule } from './PushRule';
+// General
+export { default as ApplicationSettings } from './ApplicationSettings';
+export { default as BroadcastMessages } from './BroadcastMessages';
+export { default as Events } from './Events';
+export { default as FeatureFlags } from './FeatureFlags';
+export { default as GeoNodes } from './GeoNodes';
+export { default as GitignoreTemplates } from './GitignoreTemplates';
+export { default as GitLabCIYMLTemplates } from './GitLabCIYMLTemplates';
+export { default as Keys } from './Keys';
+export { default as Licence } from './Licence';
+export { default as LicenceTemplates } from './LicenceTemplates';
+export { default as Lint } from './Lint';
+export { default as Namespaces } from './Namespaces';
+export { default as NotificationSettings } from './NotificationSettings';
+export { default as Markdown } from './Markdown';
+export { default as PagesDomains } from './PagesDomains';
+export { default as Search } from './Search';
+export { default as SidekiqMetrics } from './SidekiqMetrics';
+export { default as Snippets } from './Snippets';
+export { default as SystemHooks } from './SystemHooks';
+export { default as Version } from './Version';
+export { default as Wikis } from './Wikis';
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceAccessRequests.js
@@ -0,0 +1,68 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceAccessRequests = /** @class */ (function (_super) {
+    __extends(ResourceAccessRequests, _super);
+    function ResourceAccessRequests(resourceType, options) {
+        return _super.call(this, __assign({ url: resourceType }, options)) || this;
+    }
+    ResourceAccessRequests.prototype.all = function (resourceId) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.get(this, rId + "/access_requests");
+    };
+    ResourceAccessRequests.prototype.request = function (resourceId) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.post(this, rId + "/access_requests");
+    };
+    ResourceAccessRequests.prototype.approve = function (resourceId, userId, _a) {
+        var accessLevel = _a.accessLevel;
+        var _b = __read([resourceId, userId].map(encodeURIComponent), 2), rId = _b[0], uId = _b[1];
+        return RequestHelper.post(this, rId + "/access_requests/" + uId + "/approve", {
+            accessLevel: accessLevel,
+        });
+    };
+    ResourceAccessRequests.prototype.deny = function (resourceId, userId) {
+        var _a = __read([resourceId, userId].map(encodeURIComponent), 2), rId = _a[0], uId = _a[1];
+        return RequestHelper.del(this, rId + "/access_requests/" + uId);
+    };
+    return ResourceAccessRequests;
+}(BaseService));
+export default ResourceAccessRequests;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceAwardEmojis.js
@@ -0,0 +1,73 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+function url(projectId, resourceType, resourceId, awardId, noteId) {
+    var _a = __read([projectId, resourceId].map(encodeURIComponent), 2), pId = _a[0], rId = _a[1];
+    var output = [pId, resourceType, rId];
+    if (noteId)
+        output.push('notes', encodeURIComponent(noteId));
+    output.push(encodeURIComponent('award_emoji'));
+    if (awardId)
+        output.push(encodeURIComponent(awardId));
+    return output.join('/');
+}
+var ResourceAwardsEmojis = /** @class */ (function (_super) {
+    __extends(ResourceAwardsEmojis, _super);
+    function ResourceAwardsEmojis(resourceType, options) {
+        var _this = _super.call(this, __assign({ url: 'projects' }, options)) || this;
+        _this.resourceType = resourceType;
+        return _this;
+    }
+    ResourceAwardsEmojis.prototype.all = function (projectId, resourceId, noteId, options) {
+        return RequestHelper.get(this, url(projectId, this.resourceType, resourceId, null, noteId), options);
+    };
+    ResourceAwardsEmojis.prototype.award = function (projectId, resourceId, name, noteId, options) {
+        return RequestHelper.post(this, url(projectId, this.resourceType, resourceId, null, noteId), __assign({ name: name }, options));
+    };
+    ResourceAwardsEmojis.prototype.remove = function (projectId, resourceId, awardId, noteId, options) {
+        return RequestHelper.del(this, url(projectId, this.resourceType, resourceId, awardId, noteId), options);
+    };
+    ResourceAwardsEmojis.prototype.show = function (projectId, resourceId, awardId, noteId, options) {
+        return RequestHelper.get(this, url(projectId, this.resourceType, resourceId, awardId, noteId), options);
+    };
+    return ResourceAwardsEmojis;
+}(BaseService));
+export default ResourceAwardsEmojis;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceBadges.js
@@ -0,0 +1,73 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceBadges = /** @class */ (function (_super) {
+    __extends(ResourceBadges, _super);
+    function ResourceBadges(resourceType, options) {
+        return _super.call(this, __assign({ url: resourceType }, options)) || this;
+    }
+    ResourceBadges.prototype.add = function (resourceId, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.post(this, rId + "/badges", options);
+    };
+    ResourceBadges.prototype.all = function (resourceId, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.get(this, rId + "/badges", options);
+    };
+    ResourceBadges.prototype.edit = function (resourceId, badgeId, options) {
+        var _a = __read([resourceId, badgeId].map(encodeURIComponent), 2), rId = _a[0], bId = _a[1];
+        return RequestHelper.put(this, rId + "/badges/" + bId, options);
+    };
+    ResourceBadges.prototype.preview = function (resourceId, linkUrl, imageUrl, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.get(this, rId + "/badges/render", __assign({ linkUrl: linkUrl, imageUrl: imageUrl }, options));
+    };
+    ResourceBadges.prototype.remove = function (resourceId, badgeId, options) {
+        var _a = __read([resourceId, badgeId].map(encodeURIComponent), 2), rId = _a[0], bId = _a[1];
+        return RequestHelper.del(this, rId + "/badges/" + bId, options);
+    };
+    ResourceBadges.prototype.show = function (resourceId, badgeId, options) {
+        var _a = __read([resourceId, badgeId].map(encodeURIComponent), 2), rId = _a[0], bId = _a[1];
+        return RequestHelper.get(this, rId + "/badges/" + bId, options);
+    };
+    return ResourceBadges;
+}(BaseService));
+export default ResourceBadges;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceCustomAttributes.js
@@ -0,0 +1,65 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceCustomAttributes = /** @class */ (function (_super) {
+    __extends(ResourceCustomAttributes, _super);
+    function ResourceCustomAttributes(resourceType, options) {
+        return _super.call(this, __assign({ url: resourceType }, options)) || this;
+    }
+    ResourceCustomAttributes.prototype.all = function (resourceId, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.get(this, rId + "/custom_attributes", options);
+    };
+    ResourceCustomAttributes.prototype.set = function (resourceId, customAttributeId, value, options) {
+        var _a = __read([resourceId, customAttributeId].map(encodeURIComponent), 2), rId = _a[0], cId = _a[1];
+        return RequestHelper.put(this, rId + "/custom_attributes/" + cId, __assign({ value: value }, options));
+    };
+    ResourceCustomAttributes.prototype.remove = function (resourceId, customAttributeId, options) {
+        var _a = __read([resourceId, customAttributeId].map(encodeURIComponent), 2), rId = _a[0], cId = _a[1];
+        return RequestHelper.del(this, rId + "/custom_attributes/" + cId, options);
+    };
+    ResourceCustomAttributes.prototype.show = function (resourceId, customAttributeId, options) {
+        var _a = __read([resourceId, customAttributeId].map(encodeURIComponent), 2), rId = _a[0], cId = _a[1];
+        return RequestHelper.get(this, rId + "/custom_attributes/" + cId, options);
+    };
+    return ResourceCustomAttributes;
+}(BaseService));
+export default ResourceCustomAttributes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceDiscussions.js
@@ -0,0 +1,79 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceDiscussions = /** @class */ (function (_super) {
+    __extends(ResourceDiscussions, _super);
+    function ResourceDiscussions(resourceType, resource2Type, options) {
+        var _this = _super.call(this, __assign({ url: resourceType }, options)) || this;
+        _this.resource2Type = resource2Type;
+        return _this;
+    }
+    ResourceDiscussions.prototype.addNote = function (resourceId, resource2Id, discussionId, noteId, content, options) {
+        if (!content)
+            throw new Error('Missing required content argument');
+        var _a = __read([resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent), 4), rId = _a[0], r2Id = _a[1], dId = _a[2], nId = _a[3];
+        return RequestHelper.put(this, rId + "/" + this.resource2Type + "/" + r2Id + "/discussions/" + dId + "/notes/" + nId, __assign({ body: content }, options));
+    };
+    ResourceDiscussions.prototype.all = function (resourceId, resource2Id, options) {
+        var _a = __read([resourceId, resource2Id].map(encodeURIComponent), 2), rId = _a[0], r2Id = _a[1];
+        return RequestHelper.get(this, rId + "/" + this.resource2Type + "/" + r2Id + "/discussions", options);
+    };
+    ResourceDiscussions.prototype.create = function (resourceId, resource2Id, content, options) {
+        if (!content)
+            throw new Error('Missing required content argument');
+        var _a = __read([resourceId, resource2Id].map(encodeURIComponent), 2), rId = _a[0], r2Id = _a[1];
+        return RequestHelper.post(this, rId + "/" + this.resource2Type + "/" + r2Id + "/discussions", __assign({ body: content }, options));
+    };
+    ResourceDiscussions.prototype.editNote = function (resourceId, resource2Id, discussionId, noteId, options) {
+        var _a = __read([resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent), 4), rId = _a[0], r2Id = _a[1], dId = _a[2], nId = _a[3];
+        return RequestHelper.put(this, rId + "/" + this.resource2Type + "/" + r2Id + "/discussions/" + dId + "/notes/" + nId, { body: options });
+    };
+    ResourceDiscussions.prototype.removeNote = function (resourceId, resource2Id, discussionId, noteId, options) {
+        var _a = __read([resourceId, resource2Id, discussionId, noteId].map(encodeURIComponent), 4), rId = _a[0], r2Id = _a[1], dId = _a[2], nId = _a[3];
+        return RequestHelper.del(this, rId + "/" + this.resource2Type + "/" + r2Id + "/discussions/" + dId + "/notes/" + nId, options);
+    };
+    ResourceDiscussions.prototype.show = function (resourceId, resource2Id, discussionId, options) {
+        var _a = __read([resourceId, resource2Id, discussionId].map(encodeURIComponent), 3), rId = _a[0], r2Id = _a[1], dId = _a[2];
+        return RequestHelper.get(this, rId + "/" + this.resource2Type + "/" + r2Id + "/discussions/" + dId, options);
+    };
+    return ResourceDiscussions;
+}(BaseService));
+export default ResourceDiscussions;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceIssueBoards.js
@@ -0,0 +1,89 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceIssueBoards = /** @class */ (function (_super) {
+    __extends(ResourceIssueBoards, _super);
+    function ResourceIssueBoards(resourceType, options) {
+        return _super.call(this, __assign({ url: resourceType }, options)) || this;
+    }
+    ResourceIssueBoards.prototype.all = function (resourceId, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.get(this, rId + "/boards", options);
+    };
+    ResourceIssueBoards.prototype.create = function (resourceId, name, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.post(this, rId + "/boards", __assign({ name: name }, options));
+    };
+    ResourceIssueBoards.prototype.createList = function (resourceId, boardId, labelId, options) {
+        var _a = __read([resourceId, boardId].map(encodeURIComponent), 2), rId = _a[0], bId = _a[1];
+        return RequestHelper.post(this, rId + "/boards/" + bId + "/lists", __assign({ labelId: labelId }, options));
+    };
+    ResourceIssueBoards.prototype.edit = function (resourceId, boardId, options) {
+        var _a = __read([resourceId, boardId].map(encodeURIComponent), 2), rId = _a[0], bId = _a[1];
+        return RequestHelper.put(this, rId + "/boards/" + bId, options);
+    };
+    ResourceIssueBoards.prototype.editList = function (resourceId, boardId, listId, position, options) {
+        var _a = __read([resourceId, boardId, listId].map(encodeURIComponent), 3), rId = _a[0], bId = _a[1], lId = _a[2];
+        return RequestHelper.put(this, rId + "/boards/" + bId + "/lists/" + lId, __assign({ position: position }, options));
+    };
+    ResourceIssueBoards.prototype.lists = function (resourceId, boardId, options) {
+        var _a = __read([resourceId, boardId].map(encodeURIComponent), 2), rId = _a[0], bId = _a[1];
+        return RequestHelper.get(this, rId + "/boards/" + bId + "/lists", options);
+    };
+    ResourceIssueBoards.prototype.remove = function (resourceId, boardId, options) {
+        var _a = __read([resourceId, boardId].map(encodeURIComponent), 2), rId = _a[0], bId = _a[1];
+        return RequestHelper.del(this, rId + "/boards/" + bId, options);
+    };
+    ResourceIssueBoards.prototype.removeList = function (resourceId, boardId, listId, options) {
+        var _a = __read([resourceId, boardId, listId].map(encodeURIComponent), 3), rId = _a[0], bId = _a[1], lId = _a[2];
+        return RequestHelper.del(this, rId + "/boards/" + bId + "/lists/" + lId, options);
+    };
+    ResourceIssueBoards.prototype.show = function (resourceId, boardId, options) {
+        var _a = __read([resourceId, boardId].map(encodeURIComponent), 2), rId = _a[0], bId = _a[1];
+        return RequestHelper.get(this, rId + "/boards/" + bId, options);
+    };
+    ResourceIssueBoards.prototype.showList = function (resourceId, boardId, listId, options) {
+        var _a = __read([resourceId, boardId, listId].map(encodeURIComponent), 3), rId = _a[0], bId = _a[1], lId = _a[2];
+        return RequestHelper.get(this, rId + "/boards/" + bId + "/lists/" + lId, options);
+    };
+    return ResourceIssueBoards;
+}(BaseService));
+export default ResourceIssueBoards;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceMembers.js
@@ -0,0 +1,73 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceMembers = /** @class */ (function (_super) {
+    __extends(ResourceMembers, _super);
+    function ResourceMembers(resourceType, options) {
+        return _super.call(this, __assign({ url: resourceType }, options)) || this;
+    }
+    ResourceMembers.prototype.all = function (resourceId, includeInherited, options) {
+        if (includeInherited === void 0) { includeInherited = false; }
+        var rId = encodeURIComponent(resourceId);
+        var url = [rId, 'members'];
+        if (includeInherited)
+            url.push('all');
+        return RequestHelper.get(this, url.join('/'), { options: options });
+    };
+    ResourceMembers.prototype.add = function (resourceId, userId, accessLevel, options) {
+        var _a = __read([resourceId, userId].map(encodeURIComponent), 2), rId = _a[0], uId = _a[1];
+        return RequestHelper.post(this, rId + "/members", __assign({ userId: uId, accessLevel: accessLevel }, options));
+    };
+    ResourceMembers.prototype.edit = function (resourceId, userId, accessLevel, options) {
+        var _a = __read([resourceId, userId].map(encodeURIComponent), 2), rId = _a[0], uId = _a[1];
+        return RequestHelper.put(this, rId + "/members/" + uId, __assign({ accessLevel: accessLevel }, options));
+    };
+    ResourceMembers.prototype.show = function (resourceId, userId, options) {
+        var _a = __read([resourceId, userId].map(encodeURIComponent), 2), rId = _a[0], uId = _a[1];
+        return RequestHelper.get(this, rId + "/members/" + uId, options);
+    };
+    ResourceMembers.prototype.remove = function (resourceId, userId, options) {
+        var _a = __read([resourceId, userId].map(encodeURIComponent), 2), rId = _a[0], uId = _a[1];
+        return RequestHelper.del(this, rId + "/members/" + uId, options);
+    };
+    return ResourceMembers;
+}(BaseService));
+export default ResourceMembers;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceMilestones.js
@@ -0,0 +1,73 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceMilestones = /** @class */ (function (_super) {
+    __extends(ResourceMilestones, _super);
+    function ResourceMilestones(resourceType, options) {
+        return _super.call(this, __assign({ url: resourceType }, options)) || this;
+    }
+    ResourceMilestones.prototype.all = function (resourceId, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.get(this, rId + "/milestones", options);
+    };
+    ResourceMilestones.prototype.create = function (resourceId, title, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.post(this, rId + "/milestones", __assign({ title: title }, options));
+    };
+    ResourceMilestones.prototype.edit = function (resourceId, milestoneId, options) {
+        var _a = __read([resourceId, milestoneId].map(encodeURIComponent), 2), rId = _a[0], mId = _a[1];
+        return RequestHelper.put(this, rId + "/milestones/" + mId, options);
+    };
+    ResourceMilestones.prototype.issues = function (resourceId, milestoneId, options) {
+        var _a = __read([resourceId, milestoneId].map(encodeURIComponent), 2), rId = _a[0], mId = _a[1];
+        return RequestHelper.get(this, rId + "/milestones/" + mId + "/issues", options);
+    };
+    ResourceMilestones.prototype.mergeRequests = function (resourceId, milestoneId, options) {
+        var _a = __read([resourceId, milestoneId].map(encodeURIComponent), 2), rId = _a[0], mId = _a[1];
+        return RequestHelper.get(this, rId + "/milestones/" + mId + "/merge_requests", options);
+    };
+    ResourceMilestones.prototype.show = function (resourceId, milestoneId, options) {
+        var _a = __read([resourceId, milestoneId].map(encodeURIComponent), 2), rId = _a[0], mId = _a[1];
+        return RequestHelper.get(this, rId + "/milestones/" + mId, options);
+    };
+    return ResourceMilestones;
+}(BaseService));
+export default ResourceMilestones;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceNotes.js
@@ -0,0 +1,71 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceNotes = /** @class */ (function (_super) {
+    __extends(ResourceNotes, _super);
+    function ResourceNotes(resourceType, resource2Type, options) {
+        var _this = _super.call(this, __assign({ url: resourceType }, options)) || this;
+        _this.resource2Type = resource2Type;
+        return _this;
+    }
+    ResourceNotes.prototype.all = function (resourceId, resource2Id, options) {
+        var _a = __read([resourceId, resource2Id].map(encodeURIComponent), 2), rId = _a[0], r2Id = _a[1];
+        return RequestHelper.get(this, rId + "/" + this.resource2Type + "/" + r2Id + "/notes", options);
+    };
+    ResourceNotes.prototype.create = function (resourceId, resource2Id, body, options) {
+        var _a = __read([resourceId, resource2Id].map(encodeURIComponent), 2), rId = _a[0], r2Id = _a[1];
+        return RequestHelper.post(this, rId + "/" + this.resource2Type + "/" + r2Id + "/notes", __assign({ body: body }, options));
+    };
+    ResourceNotes.prototype.edit = function (resourceId, resource2Id, noteId, body, options) {
+        var _a = __read([resourceId, resource2Id, noteId].map(encodeURIComponent), 3), rId = _a[0], r2Id = _a[1], nId = _a[2];
+        return RequestHelper.put(this, rId + "/" + this.resource2Type + "/" + r2Id + "/notes/" + nId, __assign({ body: body }, options));
+    };
+    ResourceNotes.prototype.remove = function (resourceId, resource2Id, noteId, options) {
+        var _a = __read([resourceId, resource2Id, noteId].map(encodeURIComponent), 3), rId = _a[0], r2Id = _a[1], nId = _a[2];
+        return RequestHelper.del(this, rId + "/" + this.resource2Type + "/" + r2Id + "/notes/" + nId, options);
+    };
+    ResourceNotes.prototype.show = function (resourceId, resource2Id, noteId, options) {
+        var _a = __read([resourceId, resource2Id, noteId].map(encodeURIComponent), 3), rId = _a[0], r2Id = _a[1], nId = _a[2];
+        return RequestHelper.get(this, rId + "/" + this.resource2Type + "/" + r2Id + "/notes/" + nId, options);
+    };
+    return ResourceNotes;
+}(BaseService));
+export default ResourceNotes;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceTemplates.js
@@ -0,0 +1,40 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceTemplates = /** @class */ (function (_super) {
+    __extends(ResourceTemplates, _super);
+    function ResourceTemplates(resourceType, options) {
+        return _super.call(this, __assign({ url: ['templates', resourceType].join('/') }, options)) || this;
+    }
+    ResourceTemplates.prototype.all = function (options) {
+        return RequestHelper.get(this, '', options);
+    };
+    ResourceTemplates.prototype.show = function (resourceId, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.post(this, "" + rId, options);
+    };
+    return ResourceTemplates;
+}(BaseService));
+export default ResourceTemplates;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/ResourceVariables.js
@@ -0,0 +1,69 @@
+var __extends = (this && this.__extends) || (function () {
+    var extendStatics = function (d, b) {
+        extendStatics = Object.setPrototypeOf ||
+            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
+            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
+        return extendStatics(d, b);
+    }
+    return function (d, b) {
+        extendStatics(d, b);
+        function __() { this.constructor = d; }
+        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+    };
+})();
+var __assign = (this && this.__assign) || function () {
+    __assign = Object.assign || function(t) {
+        for (var s, i = 1, n = arguments.length; i < n; i++) {
+            s = arguments[i];
+            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
+                t[p] = s[p];
+        }
+        return t;
+    };
+    return __assign.apply(this, arguments);
+};
+var __read = (this && this.__read) || function (o, n) {
+    var m = typeof Symbol === "function" && o[Symbol.iterator];
+    if (!m) return o;
+    var i = m.call(o), r, ar = [], e;
+    try {
+        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
+    }
+    catch (error) { e = { error: error }; }
+    finally {
+        try {
+            if (r && !r.done && (m = i["return"])) m.call(i);
+        }
+        finally { if (e) throw e.error; }
+    }
+    return ar;
+};
+import { BaseService, RequestHelper } from '../infrastructure';
+var ResourceVariables = /** @class */ (function (_super) {
+    __extends(ResourceVariables, _super);
+    function ResourceVariables(resourceType, options) {
+        return _super.call(this, __assign({ url: resourceType }, options)) || this;
+    }
+    ResourceVariables.prototype.all = function (resourceId, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.get(this, rId + "/variables", options);
+    };
+    ResourceVariables.prototype.create = function (resourceId, options) {
+        var rId = encodeURIComponent(resourceId);
+        return RequestHelper.post(this, rId + "/variables", options);
+    };
+    ResourceVariables.prototype.edit = function (resourceId, keyId, options) {
+        var _a = __read([resourceId, keyId].map(encodeURIComponent), 2), rId = _a[0], kId = _a[1];
+        return RequestHelper.put(this, rId + "/variables/" + kId, options);
+    };
+    ResourceVariables.prototype.show = function (resourceId, keyId, options) {
+        var _a = __read([resourceId, keyId].map(encodeURIComponent), 2), rId = _a[0], kId = _a[1];
+        return RequestHelper.get(this, rId + "/variables/" + kId, options);
+    };
+    ResourceVariables.prototype.remove = function (resourceId, keyId, options) {
+        var _a = __read([resourceId, keyId].map(encodeURIComponent), 2), rId = _a[0], kId = _a[1];
+        return RequestHelper.del(this, rId + "/variables/" + kId, options);
+    };
+    return ResourceVariables;
+}(BaseService));
+export default ResourceVariables;
new file mode 100644
--- /dev/null
+++ b/node_modules/gitlab/dist/templates/index.js
@@ -0,0 +1,11 @@
+export { default as ResourceAccessRequests } from './ResourceAccessRequests';
+export { default as ResourceAwardEmojis } from './ResourceAwardEmojis';
+export { default as ResourceBadges } from './ResourceBadges';
+export { default as ResourceCustomAttributes } from './ResourceCustomAttributes';
+export { default as ResourceDiscussions } from './ResourceDiscussions';
+export { default as ResourceIssueBoards } from './ResourceIssueBoards';
+export { default as ResourceMembers } from './ResourceMembers';
+export { default as ResourceMilestones } from './ResourceMilestones';
+export { default as ResourceNotes } from './ResourceNotes';
+export { default as ResourceTemplates } from './ResourceTemplates';
+export { default as ResourceVariables } from './ResourceVariables';
--- a/node_modules/gitlab/types/types.d.ts
+++ b/node_modules/gitlab/types/types.d.ts
@@ -66,7 +66,7 @@ export interface BaseServiceOptions extends Sudo {
     post: Function;
     put: Function;
     delete: Function;
-    stream: Function;
+    // stream: Function;
   };
 }
 
@@ -114,11 +114,11 @@ export enum AccessLevel {
 }
 
 // Commits
-export interface CommitAction {
+interface BaseCommitAction {
   /** The action to perform */
   action: 'create' | 'delete' | 'move' | 'update';
   /** Full path to the file. Ex. lib/class.rb */
-  filePath: string;
+  // filePath?: string;
   /** Original full path to the file being moved.Ex.lib / class1.rb */
   previousPath?: string;
   /** File content, required for all except delete. Optional for move */
@@ -129,6 +129,16 @@ export interface CommitAction {
   lastCommitId?: string;
 }
 
+interface CamelCommitAction extends BaseCommitAction {
+  file_path?: string;
+}
+
+interface SnakeCommitAction extends BaseCommitAction {
+  filePath?: string;
+}
+
+export type CommitAction = CamelCommitAction | SnakeCommitAction;
+
 // Events
 export type EventAction =
   | 'created'
